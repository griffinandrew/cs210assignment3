commit aa7fb6e36559ebbeedc2a1ae302bfb318daa1237
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Sun Oct 4 13:16:48 2020 -0400

    working on schedule seat

diff --git a/assignment-3.c b/assignment-3.c
index 96aefa5..01d6b72 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -439,11 +439,11 @@ if (fs->next != NULL && fs == flight_schedules_active) { // firtst node with oth
   flight_schedules_active->prev = NULL;
 }
 if (fs == flight_schedules_active){   //only one node
-  flight_schedules_active == NULL;
+  flight_schedules_active = NULL;
 
 }
 if (fs->next == NULL){ // last
-  fs->prev->next == NULL;
+  fs->prev->next = NULL;
 }
 else{
   fs->prev->next = fs->next;
@@ -510,14 +510,21 @@ else{
 
 struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
   struct flight_schedule *temp = flight_schedules_active;
+  int found = 0;
 
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+      found =1;
+      //continue;
       return(temp);
     }
+    else {
+      found = 0;
+    }
     temp = temp->next;
   }
  //this might return null 
+ //return(temp);
 }
 
 
@@ -552,7 +559,7 @@ void flight_schedule_remove(city_t city){
     //printf("removed");
     flight_schedule_free(flight_schedule_find(city));
   }
-  printf("removed");
+  //printf("removed");
 }
 
 
@@ -669,7 +676,7 @@ void flight_schedule_remove_flight(city_t city){
   int *t;
   time_get(t); //if 1 continue; else tell user
   int found = 0;
-  if (temp = NULL){
+  if (temp == NULL){
     msg_city_bad(city);
   }
   else{
@@ -696,18 +703,40 @@ void flight_schedule_remove_flight(city_t city){
 void flight_schedule_schedule_seat(city_t city) {
   struct flight_schedule *temp = flight_schedule_find(city);
 
-  struct flight *flights;
-  flights = temp->flights;
+  struct flight *fl;
+  fl = temp->flights;
   int *t;
   time_get(t);
-  if(time_get(t) == 0) {
-     msg_flight_bad_time();
-     return;
+  if(temp == NULL) {
+     msg_city_bad(city);
+   }
+   else {
+    //int nearest = 0; 
+    //int position = 0;
+    int i =0;
+    flight_schedule_sort_flights_by_time(temp);
+
+    while(fl[i].time != -1 && i != MAX_FLIGHTS_PER_CITY-1 ){
+      if(fl[i].time < *t && fl[i+1].time == -1){
+        msg_flight_bad_time();
+        break;
+      }
+      else if (fl[i].time >= *t && fl[i].available != 0){
+        fl[i].available--;
+        break;
+      }
+      else if (fl[i].time >= *t && fl[i].available == 0){
+        msg_flight_no_seats();
+        break;
+      }
+      i++;
+    }
    }
 
-  int nearest = 0; 
-  int position = 0;
+  
+
 
+/*
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
     if(flights[i].time >= *t){
       if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
@@ -717,7 +746,7 @@ void flight_schedule_schedule_seat(city_t city) {
     }
   }
 flights[position].available--;
-  
+  */
 }
 
  void flight_schedule_unschedule_seat(city_t city){
@@ -736,6 +765,7 @@ flights[position].available--;
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
     if(flights[i].time == *t){ //origrinally was time 
      flights[i].available--;
+     break;
     }
   }
 }
diff --git a/gitlog.txt b/gitlog.txt
index a0b8991..8a3e00b 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4877 @@
+commit 3703ab8ace9011a95daec4cc521f8a76a77233e7
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Sun Oct 4 11:41:16 2020 -0400
+
+    working on fixing free for edge cases
+
+diff --git a/assignment-3.c b/assignment-3.c
+index bf54b5c..96aefa5 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -11,8 +11,8 @@
+ 
+ // Limit constants
+ #define MAX_CITY_NAME_LEN 20
+-#define MAX_FLIGHTS_PER_CITY 3
+-#define MAX_DEFAULT_SCHEDULES 2
++#define MAX_FLIGHTS_PER_CITY 5 //3
++#define MAX_DEFAULT_SCHEDULES 50 //2
+ 
+ // Time definitions
+ #define TIME_MIN 0
+@@ -431,12 +431,44 @@ struct flight_schedule * flight_schedule_allocate(void){
+ //flight schedule free
+ //takes schedule off active list, resets it, then places the node back on free list
+ void flight_schedule_free(struct flight_schedule *fs){
++
++
++
++if (fs->next != NULL && fs == flight_schedules_active) { // firtst node with others
++  flight_schedules_active = fs->next;
++  flight_schedules_active->prev = NULL;
++}
++if (fs == flight_schedules_active){   //only one node
++  flight_schedules_active == NULL;
++
++}
++if (fs->next == NULL){ // last
++  fs->prev->next == NULL;
++}
++else{
++  fs->prev->next = fs->next;
++  fs->next->prev = fs->prev;
++}
++flight_schedule_reset(fs);
++
++if (flight_schedules_free == NULL){
++  flight_schedules_free = fs;
++}
++else{
++  flight_schedules_free->prev = fs;
++  fs->next = flight_schedules_free;
++  flight_schedules_free = fs;
++  fs->prev = NULL;
++}
++
++
++/*
+   flight_schedules_active = flight_schedules_active->next;
+   flight_schedule_reset(fs);
+   fs->next = flight_schedules_free;
+   flight_schedules_free = fs;
+   fs->next->prev = fs;
+-
++*/
+ 
+   /*int counter = 0;
+   struct flight_schedule *temp = flight_schedules_active;
+@@ -517,9 +549,10 @@ void flight_schedule_remove(city_t city){
+    msg_city_bad(city);
+   }
+   else{
++    //printf("removed");
+     flight_schedule_free(flight_schedule_find(city));
+   }
+-  
++  printf("removed");
+ }
+ 
+ 
+@@ -635,26 +668,28 @@ void flight_schedule_remove_flight(city_t city){
+ 
+   int *t;
+   time_get(t); //if 1 continue; else tell user
+-   if(time_get(t) == 0) {
+-     return;
+-   }
+-  int c =15;
+-  flight_capacity_get(&c); 
+-  if(flight_capacity_get(&c) == 0){
+-      return;
++  int found = 0;
++  if (temp = NULL){
++    msg_city_bad(city);
+   }
+-  
+-  struct flight *flights;
+-  flights = temp->flights;
++  else{
++  struct flight *fl;
++  fl = temp->flights;
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+-    if(flights[i].time == *t){
+-      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
+-      flights[i].capacity = 0;  
+-      flights[i].available = 0;
++    if(fl[i].time == *t){
++      fl[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
++      fl[i].capacity = 0;  
++      fl[i].available = 0;
++      found = 1;
+       break;
+     }
+   }
++  if (found == 0){
++    msg_flight_bad_time();
++  }
++  }
++
+ }
+ 
+ 
+diff --git a/gitlog.txt b/gitlog.txt
+index 5a29c1f..a0b8991 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4746 @@
++commit 1493f977f82c9be3c010cec6e5cd7ae2e3fd4fb5
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Sun Oct 4 10:13:37 2020 -0400
++
++    working on remove
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 8031b9d..bf54b5c 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -512,11 +512,14 @@ void flight_schedule_add(city_t city){ //should this call get city
++ 
++ 
++ void flight_schedule_remove(city_t city){
++-  struct flight_schedule *temp = flight_schedule_find(city);
++-  //if(temp == NULL){
++-   
++-  //}
++-  flight_schedule_free(temp);
+++  //struct flight_schedule *temp = flight_schedule_find(city);
+++  if(flight_schedule_find(city) == NULL){
+++   msg_city_bad(city);
+++  }
+++  else{
+++    flight_schedule_free(flight_schedule_find(city));
+++  }
+++  
++ }
++ 
++ 
++diff --git a/gitlog.txt b/gitlog.txt
++index 02b9e97..5a29c1f 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4707 @@
+++commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Oct 2 16:23:51 2020 -0400
+++
+++    add_flight working properly
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 473a053..8031b9d 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -393,8 +393,11 @@ struct flight_schedule * flight_schedule_allocate(void){
+++   struct flight_schedule *temp =  flight_schedules_free;
+++   struct flight_schedule *fs;
+++   if (flight_schedules_free != NULL){
+++-    flight_schedules_free = temp->next;
+++-    flight_schedules_free->prev = NULL;
++++    flight_schedules_free = temp->next; //make sure 
++++    if(temp->next != NULL) {
++++      flight_schedules_free->prev = NULL;
++++    }
++++    
+++   }
+++ 
+++ 
+++@@ -528,13 +531,31 @@ void flight_schedule_listAll(void){
+++ }
+++ 
+++ void flight_schedule_list(city_t city){
+++-  struct flight_schedule *temp = flight_schedules_active; 
++++  if(flight_schedule_find(city) == NULL){
++++    msg_city_bad(city);
++++    return;
++++  }
++++  struct flight_schedule *fs = flight_schedule_find(city);
++++  msg_city_flights(city);
++++  for(int j =0; j < MAX_FLIGHTS_PER_CITY; j++){
++++    if(fs->flights[j].time != -1){
++++      msg_flight_info(fs->flights[j].time, fs->flights[j].available, fs->flights[j].capacity);
++++    }
++++  }
++++  printf("\n");
++++
++++
++++
++++
++++  /*struct flight_schedule *temp = flight_schedules_active; 
++++  msg_city_flights(city);
+++   while(temp != NULL){
+++     if (strcmp(city,temp->destination) == 0){
+++       printf("%s\n", temp->destination); //displaying memory address
+++     }
+++     temp = temp->next;
+++   }
++++  */
+++ }
+++ 
+++ void flight_schedule_add_flight(city_t city){
+++@@ -557,16 +578,18 @@ void flight_schedule_add_flight(city_t city){
+++     msg_city_max_flights_reached(city);
+++   }
+++   else{
+++-    int c = (temp->flights[i].capacity); // look for value of c 
+++-    
+++-    flight_capacity_get(&c);
+++-    printf("ADD_FLIGHT %d", c);
+++-    flights[i].available = c; 
++++
+++     int t = (flights[i].time);
+++     
+++     time_get(&t);
+++-    printf("ADD FLIGHT 2 %d", t);
+++-
++++    //printf("ADD FLIGHT time %d", t);
++++    temp->flights[i].time = t;
++++    int c = (temp->flights[i].capacity); // look for value of c 
++++    
++++    flight_capacity_get(&c);
++++    //printf("ADD_FLIGHT cap %d", c);
++++    temp->flights[i].available = c; 
++++    temp->flights[i].capacity = c;
+++   }
+++   /*
+++   int *t;
+++@@ -644,7 +667,7 @@ void flight_schedule_schedule_seat(city_t city) {
+++      return;
+++    }
+++ 
+++-  int nearest = 0;
++++  int nearest = 0; 
+++   int position = 0;
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++diff --git a/gitlog.txt b/gitlog.txt
+++index 9868705..02b9e97 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -1,3 +1,4606 @@
++++commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Fri Oct 2 15:36:11 2020 -0400
++++
++++    debugging
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 09d6332..473a053 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -11,8 +11,8 @@
++++ 
++++ // Limit constants
++++ #define MAX_CITY_NAME_LEN 20
++++-#define MAX_FLIGHTS_PER_CITY 5
++++-#define MAX_DEFAULT_SCHEDULES 50
+++++#define MAX_FLIGHTS_PER_CITY 3
+++++#define MAX_DEFAULT_SCHEDULES 2
++++ 
++++ // Time definitions
++++ #define TIME_MIN 0
++++@@ -403,7 +403,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++++   if(flight_schedules_active != NULL){
++++     flight_schedules_active->prev = temp;
++++   }
++++-   flight_schedules_active = temp;
+++++  flight_schedules_active = temp;
++++ 
++++   /*
++++   flight_schedules_free-> prev->next = flight_schedules_active;
++++@@ -422,7 +422,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++++   //flight_schedules_active = temp;
++++   temp = flight_schedules_active;
++++   */
++++-  return(temp); //return temp?
+++++  return(temp); //return temp temp could be null resulting in error
++++ }
++++ 
++++ //flight schedule free
++++@@ -478,18 +478,18 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++ 
++++   while(temp != NULL){
++++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++-      break; //return(temp);
+++++      return(temp);
++++     }
++++     temp = temp->next;
++++   }
++++-  return (temp); //this might return null 
+++++ //this might return null 
++++ }
++++ 
++++ 
++++ void flight_schedule_add(city_t city){ //should this call get city
++++ 
++++   //first cheeck to see if city exists
++++-  if (flight_schedules_free ==NULL){
+++++  if (flight_schedules_free == NULL){
++++     msg_schedule_no_free();
++++   }
++++ 
++++@@ -510,9 +510,9 @@ void flight_schedule_add(city_t city){ //should this call get city
++++ 
++++ void flight_schedule_remove(city_t city){
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++-  if(temp == NULL){
++++-
++++-  }
+++++  //if(temp == NULL){
+++++   
+++++  //}
++++   flight_schedule_free(temp);
++++ }
++++ 
++++@@ -540,7 +540,35 @@ void flight_schedule_list(city_t city){
++++ void flight_schedule_add_flight(city_t city){
++++   //flight_schedule_add(city);
++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++  struct flight *flights;
+++++  flights = temp->flights;
+++++  int full = 0;
+++++  int i =0;
+++++
+++++  while(temp->flights[i].time != -1){
+++++    
+++++    if (i == MAX_FLIGHTS_PER_CITY){
+++++      full = 1;
+++++      break;
+++++    }
+++++    i++;
+++++  }
+++++  if(full){
+++++    msg_city_max_flights_reached(city);
+++++  }
+++++  else{
+++++    int c = (temp->flights[i].capacity); // look for value of c 
+++++    
+++++    flight_capacity_get(&c);
+++++    printf("ADD_FLIGHT %d", c);
+++++    flights[i].available = c; 
+++++    int t = (flights[i].time);
+++++    
+++++    time_get(&t);
+++++    printf("ADD FLIGHT 2 %d", t);
++++ 
+++++  }
+++++  /*
++++   int *t;
++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++   
++++@@ -557,8 +585,8 @@ void flight_schedule_add_flight(city_t city){
++++       return;
++++   }
++++ 
++++-  struct flight *flights;
++++-  flights = temp->flights;
+++++  //struct flight *flights;
+++++  //flights = temp->flights;
++++   //flights[i]
++++   //loop thru flights until open flight then add flight
++++ 
++++@@ -570,6 +598,7 @@ void flight_schedule_add_flight(city_t city){
++++     }
++++   }
++++   //else return that it failed
+++++  */
++++ }
++++ 
++++ 
++++@@ -594,7 +623,7 @@ void flight_schedule_remove_flight(city_t city){
++++ 
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++     if(flights[i].time == *t){
++++-      flights[i].time = -1;//was flights[i] will this change correct one?
+++++      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
++++       flights[i].capacity = 0;  
++++       flights[i].available = 0;
++++       break;
++++diff --git a/gitlog.txt b/gitlog.txt
++++index 3fd9781..9868705 100644
++++--- a/gitlog.txt
+++++++ b/gitlog.txt
++++@@ -1,3 +1,4459 @@
+++++commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Fri Oct 2 11:01:38 2020 -0400
+++++
+++++    working on debugging
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index dceff55..09d6332 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++   }
+++++    flight_schedules_active = temp;
+++++ 
+++++-
+++++-
+++++-
+++++-
+++++-
+++++   /*
+++++   flight_schedules_free-> prev->next = flight_schedules_active;
+++++   
+++++@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++++     }
+++++     temp = temp->next;
+++++   }
+++++-  return (temp);
++++++  return (temp); //this might return null 
+++++ }
+++++ 
+++++ 
+++++ void flight_schedule_add(city_t city){ //should this call get city
+++++ 
+++++   //first cheeck to see if city exists
++++++  if (flight_schedules_free ==NULL){
++++++    msg_schedule_no_free();
++++++  }
++++++
+++++   struct flight_schedule *fs = flight_schedule_find(city);
+++++   if (fs != NULL)  {
+++++     msg_city_exists(city);
+++++@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
+++++   
+++++   if(time_get(t) == 0) { //or just t
+++++     msg_flight_bad_time();      
+++++-    return;
++++++    return; //maybe use go to end
+++++    }
+++++ 
+++++-  int *c;
+++++-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++++  int c = 15;
++++++  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
+++++   
+++++-  if (flight_capacity_get(c) == 0){ //show message plane is full
+++++-      msg_flight_no_seats();
++++++  if (flight_capacity_get(&c) == 0){ //show message plane is full
++++++      //msg_flight_no_seats();
+++++       return;
+++++   }
+++++ 
+++++@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
+++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++     if(flights[i].time == -1){
+++++       flights[i].time = *t;//was flights[i] will this change correct one?
+++++-      flights[i].capacity = *c;
++++++      flights[i].capacity = c;
+++++       break;
+++++     }
+++++   }
+++++   //else return that it failed
++++++}
+++++ 
+++++ 
+++++-}
+++++ 
+++++ void flight_schedule_remove_flight(city_t city){
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
+++++    if(time_get(t) == 0) {
+++++      return;
+++++    }
+++++-  int *c;
+++++-  flight_capacity_get(c); 
+++++-  if(flight_capacity_get(c) == 0){
++++++  int c =15;
++++++  flight_capacity_get(&c); 
++++++  if(flight_capacity_get(&c) == 0){
+++++       return;
+++++   }
+++++   
+++++@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
+++++   int *t;
+++++   time_get(t);
+++++   if(time_get(t) == 0) {
++++++     msg_flight_bad_time();
+++++      return;
+++++    }
+++++ 
+++++diff --git a/gitlog.txt b/gitlog.txt
+++++index 1364b9f..3fd9781 100644
+++++--- a/gitlog.txt
++++++++ b/gitlog.txt
+++++@@ -1,3 +1,4351 @@
++++++commit 1fc06886442458df6df848e0f90ac6e155b1d853
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Fri Oct 2 10:20:31 2020 -0400
++++++
++++++    working on add_flight
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index e50b45e..dceff55 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
++++++ 
++++++ void flight_schedule_remove(city_t city){
++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++  if(temp == NULL){
+++++++
+++++++  }
++++++   flight_schedule_free(temp);
++++++ }
++++++ 
++++++@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
++++++ }
++++++ 
++++++ void flight_schedule_add_flight(city_t city){
++++++-  flight_schedule_add(city);
+++++++  //flight_schedule_add(city);
++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++ 
++++++-
++++++   int *t;
++++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++++   
++++++   if(time_get(t) == 0) { //or just t
++++++-     return;
+++++++    msg_flight_bad_time();      
+++++++    return;
++++++    }
++++++ 
++++++   int *c;
++++++   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++++   
++++++-  if (flight_capacity_get(c) == 0){
+++++++  if (flight_capacity_get(c) == 0){ //show message plane is full
+++++++      msg_flight_no_seats();
++++++       return;
++++++   }
++++++ 
++++++@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
++++++   int *c;
++++++   flight_capacity_get(c); 
++++++   if(flight_capacity_get(c) == 0){
++++++-
+++++++      return;
++++++   }
++++++   
++++++   struct flight *flights;
++++++diff --git a/gitlog.txt b/gitlog.txt
++++++index 29ef0ec..1364b9f 100644
++++++--- a/gitlog.txt
+++++++++ b/gitlog.txt
++++++@@ -1,3 +1,4286 @@
+++++++commit da6661f7aace13f7460f1854b7f421ec09bce194
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Thu Oct 1 20:00:10 2020 -0400
+++++++
+++++++    fixed aloocate, add and list
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 6644548..e50b45e 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
+++++++ //returns pointer to updated flight schedule
+++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++ 
+++++++-  struct flight_schedule *temp;// =  flight_schedules_free;
++++++++  struct flight_schedule *temp =  flight_schedules_free;
++++++++  struct flight_schedule *fs;
++++++++  if (flight_schedules_free != NULL){
++++++++    flight_schedules_free = temp->next;
++++++++    flight_schedules_free->prev = NULL;
++++++++  }
++++++++
++++++++
++++++++  temp->next = flight_schedules_active;
++++++++  //if active not null set active prev to temp
++++++++  if(flight_schedules_active != NULL){
++++++++    flight_schedules_active->prev = temp;
++++++++  }
++++++++   flight_schedules_active = temp;
++++++++
++++++++
++++++++
++++++++
+++++++ 
+++++++ 
+++++++-  flight_schedules_free = flight_schedules_free->next;
++++++++  /*
+++++++   flight_schedules_free-> prev->next = flight_schedules_active;
+++++++   
+++++++   //temp->next = flight_schedules_active;
+++++++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++++ 
+++++++   //flight_schedules_active = temp;
+++++++   temp = flight_schedules_active;
++++++++  */
+++++++   return(temp); //return temp?
+++++++ }
+++++++ 
+++++++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++++++ 
+++++++   while(temp != NULL){
+++++++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++++++-      return(temp);
++++++++      break; //return(temp);
+++++++     }
+++++++     temp = temp->next;
+++++++   }
++++++++  return (temp);
+++++++ }
+++++++ 
+++++++ 
+++++++ void flight_schedule_add(city_t city){ //should this call get city
++++++++
++++++++  //first cheeck to see if city exists
++++++++  struct flight_schedule *fs = flight_schedule_find(city);
++++++++  if (fs != NULL)  {
++++++++    msg_city_exists(city);
++++++++  }
++++++++
++++++++  if (fs == NULL){
+++++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++++-  
+++++++-  //if (flight_schedule_find == city)  {
+++++++-  //  msg_city_exists(city);
+++++++- // } //
+++++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++++   
+++++++   //p->destination = ch; 
+++++++ 
++++++++  }
+++++++ }
+++++++ 
+++++++ 
+++++++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
+++++++ 
+++++++ 
+++++++ void flight_schedule_listAll(void){
+++++++-  struct flight_schedule *temp = flight_schedules_active;
++++++++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
+++++++   while(temp != NULL){
+++++++-    printf("%p", temp); // print temp is disaplying memory address
++++++++    printf("%s\n", temp->destination); // print temp is disaplying memory address
+++++++     temp = temp->next;
+++++++   }
+++++++ 
+++++++ }
+++++++ 
+++++++ void flight_schedule_list(city_t city){
+++++++-  struct flight_schedule *temp = flight_schedules_active;
++++++++  struct flight_schedule *temp = flight_schedules_active; 
+++++++   while(temp != NULL){
+++++++     if (strcmp(city,temp->destination) == 0){
+++++++-      printf("%p", *temp); //displaying memory address
++++++++      printf("%s\n", temp->destination); //displaying memory address
+++++++     }
+++++++     temp = temp->next;
+++++++   }
+++++++diff --git a/gitlog.txt b/gitlog.txt
+++++++index c3e37f7..29ef0ec 100644
+++++++--- a/gitlog.txt
++++++++++ b/gitlog.txt
+++++++@@ -1,3 +1,4170 @@
++++++++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Thu Oct 1 18:48:16 2020 -0400
++++++++
++++++++    editing and debugging
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 881c536..6644548 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++++ 
++++++++   // Loop through the Array connecting them
++++++++   // as a linear doubly linked list
+++++++++  if (n == 1) {
+++++++++    flight_schedule_reset(&array[0]);
+++++++++    array[0].next = NULL;
+++++++++    array[0].prev = NULL;
+++++++++    flight_schedules_free = &array[0];
+++++++++    return;
+++++++++  }
+++++++++
+++++++++  flight_schedule_reset(&array[0]);
+++++++++  array[0].next = &array[1];
++++++++   array[0].prev = NULL;
++++++++-  for (int i=0; i<n-1; i++) {
+++++++++
+++++++++  for (int i=1; i<n-1; i++) {
++++++++     flight_schedule_reset(&array[i]);
++++++++     array[i].next = &array[i+1];
++++++++-    array[i+1].prev = &array[i];
+++++++++    array[i].prev = &array[i-1];
++++++++   }
+++++++++
++++++++   // Takes care of last node.  
++++++++   flight_schedule_reset(&array[n-1]); // reset clears all fields
++++++++   array[n-1].next = NULL;
++++++++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
++++++++ //returns pointer to updated flight schedule
++++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++++ 
++++++++-  struct flight_schedule *temp =  flight_schedules_free;
+++++++++  struct flight_schedule *temp;// =  flight_schedules_free;
+++++++++
+++++++++
++++++++   flight_schedules_free = flight_schedules_free->next;
+++++++++  flight_schedules_free-> prev->next = flight_schedules_active;
+++++++++  
+++++++++  //temp->next = flight_schedules_active;
+++++++++  flight_schedules_active = flight_schedules_free->prev;
++++++++   flight_schedules_free->prev = NULL;
++++++++-  temp->next = flight_schedules_active;
++++++++-
++++++++-  flight_schedules_active = temp;
++++++++-  flight_schedules_active->next->prev = flight_schedules_active;
+++++++++  
++++++++   //temp->prev = NULL;
++++++++   //struct flight_schedule *temp2 = flight_schedules_active
++++++++-  
++++++++-  return(flight_schedules_active);
+++++++++
+++++++++  if(flight_schedules_active -> next != NULL){
+++++++++    flight_schedules_active->next->prev = flight_schedules_active;
+++++++++  }
+++++++++
+++++++++  //flight_schedules_active = temp;
+++++++++  temp = flight_schedules_active;
+++++++++  return(temp); //return temp?
++++++++ }
++++++++ 
++++++++ //flight schedule free
++++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++++-  int counter = 0;
+++++++++  flight_schedules_active = flight_schedules_active->next;
+++++++++  flight_schedule_reset(fs);
+++++++++  fs->next = flight_schedules_free;
+++++++++  flight_schedules_free = fs;
+++++++++  fs->next->prev = fs;
+++++++++
+++++++++
+++++++++  /*int counter = 0;
++++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++   while(temp != NULL) {
++++++++     if(temp == fs){ //use flight schedule find instead
++++++++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     temp = temp->next;
++++++++     counter++;
++++++++   }
++++++++-  
++++++++   if (counter == 0){
++++++++     flight_schedules_active = temp->next;
++++++++     flight_schedules_active->prev = NULL;
++++++++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     //flight_schedule_reset(temp);
++++++++ 
++++++++   }
++++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++++++-    temp->prev->next = temp->next;
+++++++++  else{ 
+++++++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
++++++++     temp->next->prev = temp->prev;
++++++++     temp->next = NULL;
++++++++     temp->prev = NULL;
++++++++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     flight_schedules_free = temp;
++++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++++   }
++++++++-  else{
++++++++-    temp->prev = NULL;
++++++++-    flight_schedules_active->prev->next = NULL;
++++++++-
++++++++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++++-
++++++++-    temp->next = flight_schedules_free;
++++++++-    flight_schedules_free = temp;
++++++++-    flight_schedules_free->next->prev = flight_schedules_free;
++++++++-    
++++++++-  }
+++++++++}
+++++++++*/
++++++++ }
++++++++ 
++++++++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++++++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++++++ void flight_schedule_add(city_t city){ //should this call get city
++++++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++++   
++++++++-  if (flight_schedule_find) {
++++++++-    msg_city_exists(city);
++++++++-  }
+++++++++  //if (flight_schedule_find == city)  {
+++++++++  //  msg_city_exists(city);
+++++++++ // } //
++++++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++++   
++++++++   //p->destination = ch; 
++++++++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
++++++++ void flight_schedule_listAll(void){
++++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++   while(temp != NULL){
++++++++-    printf("%p", &temp);
+++++++++    printf("%p", temp); // print temp is disaplying memory address
++++++++     temp = temp->next;
++++++++   }
++++++++ 
++++++++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
++++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++   while(temp != NULL){
++++++++     if (strcmp(city,temp->destination) == 0){
++++++++-      printf("%p", &temp);
+++++++++      printf("%p", *temp); //displaying memory address
++++++++     }
++++++++     temp = temp->next;
++++++++   }
++++++++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
++++++++ 
++++++++   int *t;
++++++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++++++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++++++   
++++++++-  if (time == 1 || capacity == 1 ){
++++++++-      return 1;
+++++++++  if(time_get(t) == 0) { //or just t
+++++++++     return;
+++++++++   }
+++++++++
+++++++++  int *c;
+++++++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++++++++  
+++++++++  if (flight_capacity_get(c) == 0){
+++++++++      return;
++++++++   }
++++++++ 
++++++++   struct flight *flights;
++++++++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
++++++++ 
++++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++     if(flights[i].time == -1){
++++++++-      flights[i].time = time;//was flights[i] will this change correct one?
++++++++-      flights[i].capacity = capacity;
+++++++++      flights[i].time = *t;//was flights[i] will this change correct one?
+++++++++      flights[i].capacity = *c;
++++++++       break;
++++++++     }
++++++++   }
++++++++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
++++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++++  //idk if this is the right time to call or even need too
++++++++ 
++++++++-
++++++++-
++++++++   int *t;
++++++++   time_get(t); //if 1 continue; else tell user
++++++++    if(time_get(t) == 0) {
++++++++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
++++++++    }
++++++++   int *c;
++++++++   flight_capacity_get(c); 
+++++++++  if(flight_capacity_get(c) == 0){
+++++++++
+++++++++  }
++++++++   
++++++++   struct flight *flights;
++++++++   flights = temp->flights;
++++++++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
++++++++ 
++++++++   struct flight *flights;
++++++++   flights = temp->flights;
+++++++++  int *t;
+++++++++  time_get(t);
+++++++++  if(time_get(t) == 0) {
+++++++++     return;
+++++++++   }
++++++++ 
++++++++-  int time = time_get();
++++++++   int nearest = 0;
++++++++   int position = 0;
++++++++ 
++++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++-    if(flights[i].time >= time){
++++++++-      if(flights[i].time - nearest <= nearest - time){
+++++++++    if(flights[i].time >= *t){
+++++++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
++++++++         nearest = flights[i].time;
++++++++         position = i;
++++++++       }
++++++++@@ -573,18 +602,21 @@ flights[position].available--;
++++++++   
++++++++ }
++++++++ 
++++++++-flight_schedule_unschedule_seat(city_t city){
+++++++++ void flight_schedule_unschedule_seat(city_t city){
++++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++++ 
++++++++   struct flight *flights;
++++++++   flights = temp->flights;
++++++++-
++++++++-  int time = time_get();
+++++++++  int *t;
+++++++++  time_get(t);
+++++++++  if(time_get(t) == 0) {
+++++++++     return;
+++++++++   }
++++++++   int nearest = 0;
++++++++   int position = 0;
++++++++ 
++++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++-    if(flights[i].time == time){
+++++++++    if(flights[i].time == *t){ //origrinally was time 
++++++++      flights[i].available--;
++++++++     }
++++++++   }
++++++++diff --git a/gitlog.txt b/gitlog.txt
++++++++index e69de29..c3e37f7 100644
++++++++--- a/gitlog.txt
+++++++++++ b/gitlog.txt
++++++++@@ -0,0 +1,3895 @@
+++++++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 22:04:59 2020 -0400
+++++++++
+++++++++    finshing up scheduling/unscheduling and debuggin
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index 322ef6c..881c536 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
+++++++++   flight_schedule_add(city);
+++++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++++ 
+++++++++-  time_t time = time_get();
+++++++++-  int capacity = flight_capacity_get();
++++++++++
++++++++++  int *t;
++++++++++  time_get(t); //do this then check if t is 0 to see if valid or not 
++++++++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++++++++   
+++++++++   if (time == 1 || capacity == 1 ){
+++++++++       return 1;
+++++++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
+++++++++ 
+++++++++ 
+++++++++ 
+++++++++-  time_t time = time_get();
+++++++++-  int capacity = flight_capacity_get(); 
++++++++++  int *t;
++++++++++  time_get(t); //if 1 continue; else tell user
++++++++++   if(time_get(t) == 0) {
++++++++++     return;
++++++++++   }
++++++++++  int *c;
++++++++++  flight_capacity_get(c); 
+++++++++   
+++++++++   struct flight *flights;
+++++++++   flights = temp->flights;
+++++++++ 
+++++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++++-    if(flights[i].time == time){
++++++++++    if(flights[i].time == *t){
+++++++++       flights[i].time = -1;//was flights[i] will this change correct one?
+++++++++       flights[i].capacity = 0;  
+++++++++       flights[i].available = 0;
+++++++++
+++++++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 21:51:04 2020 -0400
+++++++++
+++++++++    schedule and unschedule seat
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index 6db86b9..322ef6c 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
+++++++++ 
+++++++++ 
+++++++++ void flight_schedule_schedule_seat(city_t city) {
++++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++++
++++++++++  struct flight *flights;
++++++++++  flights = temp->flights;
++++++++++
++++++++++  int time = time_get();
++++++++++  int nearest = 0;
++++++++++  int position = 0;
++++++++++
++++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++++    if(flights[i].time >= time){
++++++++++      if(flights[i].time - nearest <= nearest - time){
++++++++++        nearest = flights[i].time;
++++++++++        position = i;
++++++++++      }
++++++++++    }
++++++++++  }
++++++++++flights[position].available--;
+++++++++   
+++++++++-}
+++++++++\ No newline at end of file
++++++++++}
++++++++++
++++++++++flight_schedule_unschedule_seat(city_t city){
++++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++++
++++++++++  struct flight *flights;
++++++++++  flights = temp->flights;
++++++++++
++++++++++  int time = time_get();
++++++++++  int nearest = 0;
++++++++++  int position = 0;
++++++++++
++++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++++    if(flights[i].time == time){
++++++++++     flights[i].available--;
++++++++++    }
++++++++++  }
++++++++++}
++++++++++
+++++++++
+++++++++commit 4490dcc205f2959c8fa299368be096d99f756e27
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 21:23:54 2020 -0400
+++++++++
+++++++++    continuing work on add and remove flights
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index d9c99ff..6db86b9 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
+++++++++   flight_schedule_add(city);
+++++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++++ 
+++++++++-  int time = time_get();
++++++++++  time_t time = time_get();
+++++++++   int capacity = flight_capacity_get();
+++++++++   
+++++++++   if (time == 1 || capacity == 1 ){
+++++++++       return 1;
+++++++++   }
+++++++++ 
+++++++++-  temp->flight->flights[];
++++++++++  struct flight *flights;
++++++++++  flights = temp->flights;
++++++++++  //flights[i]
++++++++++  //loop thru flights until open flight then add flight
+++++++++ 
++++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++++    if(flights[i].time == -1){
++++++++++      flights[i].time = time;//was flights[i] will this change correct one?
++++++++++      flights[i].capacity = capacity;
++++++++++      break;
++++++++++    }
++++++++++  }
++++++++++  //else return that it failed
++++++++++
++++++++++
++++++++++}
++++++++++
++++++++++void flight_schedule_remove_flight(city_t city){
++++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++++ //idk if this is the right time to call or even need too
+++++++++ 
+++++++++ 
++++++++++
++++++++++  time_t time = time_get();
++++++++++  int capacity = flight_capacity_get(); 
++++++++++  
++++++++++  struct flight *flights;
++++++++++  flights = temp->flights;
++++++++++
++++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++++    if(flights[i].time == time){
++++++++++      flights[i].time = -1;//was flights[i] will this change correct one?
++++++++++      flights[i].capacity = 0;  
++++++++++      flights[i].available = 0;
++++++++++      break;
++++++++++    }
++++++++++  }
+++++++++ }
++++++++++
++++++++++
++++++++++void flight_schedule_schedule_seat(city_t city) {
++++++++++  
++++++++++}
+++++++++\ No newline at end of file
+++++++++
+++++++++commit e41186f0b9058ea4390a8f0fda78296861580f31
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 20:05:28 2020 -0400
+++++++++
+++++++++    updates to add_flight
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index aae10c7..d9c99ff 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++++   }
+++++++++ }
+++++++++ 
+++++++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++++
+++++++++   while(temp != NULL){
+++++++++-    if (strcmp(city,temp->destination) == 0){
++++++++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++++++++       return(temp);
+++++++++     }
+++++++++     temp = temp->next;
+++++++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++++ }
+++++++++ 
+++++++++ 
++++++++++void flight_schedule_add(city_t city){ //should this call get city
++++++++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++++++  
++++++++++  if (flight_schedule_find) {
++++++++++    msg_city_exists(city);
++++++++++  }
++++++++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++++++  
++++++++++  //p->destination = ch; 
++++++++++
++++++++++}
++++++++++
++++++++++
++++++++++void flight_schedule_remove(city_t city){
++++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++++  flight_schedule_free(temp);
++++++++++}
++++++++++
++++++++++
++++++++++
++++++++++void flight_schedule_listAll(void){
++++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++++  while(temp != NULL){
++++++++++    printf("%p", &temp);
++++++++++    temp = temp->next;
++++++++++  }
++++++++++
++++++++++}
++++++++++
++++++++++void flight_schedule_list(city_t city){
++++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++++  while(temp != NULL){
++++++++++    if (strcmp(city,temp->destination) == 0){
++++++++++      printf("%p", &temp);
++++++++++    }
++++++++++    temp = temp->next;
++++++++++  }
++++++++++}
++++++++++
++++++++++void flight_schedule_add_flight(city_t city){
++++++++++  flight_schedule_add(city);
++++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++++
++++++++++  int time = time_get();
++++++++++  int capacity = flight_capacity_get();
++++++++++  
++++++++++  if (time == 1 || capacity == 1 ){
++++++++++      return 1;
++++++++++  }
++++++++++
++++++++++  temp->flight->flights[];
++++++++++
++++++++++
++++++++++
++++++++++}
+++++++++
+++++++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 18:35:40 2020 -0400
+++++++++
+++++++++    correction of free, working on find
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index a03a0af..aae10c7 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++++   int counter = 0;
+++++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++++   while(temp != NULL) {
+++++++++-    if(temp == fs){
++++++++++    if(temp == fs){ //use flight schedule find instead
+++++++++       break;
+++++++++     }
+++++++++     temp = temp->next;
+++++++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++++     flight_schedule_reset(temp);
+++++++++ 
+++++++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++++++-    flight_schedule_free = temp;
++++++++++    flight_schedules_free = temp;
+++++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++++     //flight_schedule_reset(temp);
+++++++++ 
+++++++++   }
+++++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++++++++     temp->prev->next = temp->next;
+++++++++     temp->next->prev = temp->prev;
+++++++++     temp->next = NULL;
+++++++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++++     flight_schedule_reset(temp);
+++++++++ 
+++++++++     temp->next = flight_schedules_free;
+++++++++-    flight_schedule_free = temp;
++++++++++    flight_schedules_free = temp;
+++++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++++   }
+++++++++   else{
+++++++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++++++ 
+++++++++     temp->next = flight_schedules_free;
+++++++++-    flight_schedule_free = temp;
++++++++++    flight_schedules_free = temp;
+++++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++++     
+++++++++   }
+++++++++-}
+++++++++\ No newline at end of file
++++++++++}
++++++++++
++++++++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++++  while(temp != NULL){
++++++++++    if (strcmp(city,temp->destination) == 0){
++++++++++      return(temp);
++++++++++    }
++++++++++    temp = temp->next;
++++++++++  }
++++++++++}
++++++++++
++++++++++
+++++++++
+++++++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 15:08:53 2020 -0400
+++++++++
+++++++++    working on flight_schedule_free
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index 1f30cd1..a03a0af 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++++++ //flight schedule free
+++++++++ //takes schedule off active list, resets it, then places the node back on free list
+++++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++++-  struct flight_schedule *temp = flight
++++++++++  int counter = 0;
++++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++++  while(temp != NULL) {
++++++++++    if(temp == fs){
++++++++++      break;
++++++++++    }
++++++++++    temp = temp->next;
++++++++++    counter++;
++++++++++  }
++++++++++  
++++++++++  if (counter == 0){
++++++++++    flight_schedules_active = temp->next;
++++++++++    flight_schedules_active->prev = NULL;
++++++++++    temp->next = NULL;
++++++++++
++++++++++    flight_schedule_reset(temp);
++++++++++
++++++++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++++++++    flight_schedule_free = temp;
++++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++++    //flight_schedule_reset(temp);
++++++++++
++++++++++  }
++++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++++++    temp->prev->next = temp->next;
++++++++++    temp->next->prev = temp->prev;
++++++++++    temp->next = NULL;
++++++++++    temp->prev = NULL;
++++++++++
++++++++++    flight_schedule_reset(temp);
++++++++++
++++++++++    temp->next = flight_schedules_free;
++++++++++    flight_schedule_free = temp;
++++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++++  }
++++++++++  else{
++++++++++    temp->prev = NULL;
++++++++++    flight_schedules_active->prev->next = NULL;
++++++++++
++++++++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++++++
++++++++++    temp->next = flight_schedules_free;
++++++++++    flight_schedule_free = temp;
++++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++++    
++++++++++  }
+++++++++ }
+++++++++\ No newline at end of file
+++++++++
+++++++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Mon Sep 28 14:12:10 2020 -0400
+++++++++
+++++++++    correcting allocate
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index ec71f49..1f30cd1 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
+++++++++ //returns pointer to updated flight schedule
+++++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++++ 
+++++++++-  struct flight_schedule temp = 
++++++++++  struct flight_schedule *temp =  flight_schedules_free;
++++++++++  flight_schedules_free = flight_schedules_free->next;
++++++++++  flight_schedules_free->prev = NULL;
++++++++++  temp->next = flight_schedules_active;
++++++++++
++++++++++  flight_schedules_active = temp;
++++++++++  flight_schedules_active->next->prev = flight_schedules_active;
++++++++++  //temp->prev = NULL;
++++++++++  //struct flight_schedule *temp2 = flight_schedules_active
+++++++++   
+++++++++-  
+++++++++-  
+++++++++-  *flight_schedules_active = *flight_schedules_free->free;
+++++++++-
+++++++++-  
+++++++++-  //flight_schedules_active = flight_schedules_free;
+++++++++-  *flight_schedules_free = *flight_schedules_free->next;
+++++++++-  *flight_schedules_free->prev = NULL;
+++++++++-  return(flight_schedules_active->flights[]);
++++++++++  return(flight_schedules_active);
+++++++++ }
+++++++++ 
+++++++++ //flight schedule free
+++++++++ //takes schedule off active list, resets it, then places the node back on free list
+++++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++++-  
++++++++++  struct flight_schedule *temp = flight
+++++++++ }
+++++++++\ No newline at end of file
+++++++++
+++++++++commit 7c7197814c779e696458438563f16bc76b197fb2
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Fri Sep 25 18:25:04 2020 -0400
+++++++++
+++++++++    very confused, trying to use pointers to alt sched
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index ff89d23..ec71f49 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
+++++++++   return (af->time - bf->time);
+++++++++ }
+++++++++ 
+++++++++-WRITE SOME CODE!
++++++++++//WRITE SOME CODE!
+++++++++ //flight schedule allocate
++++++++++//takes a schedule off the free list and places it on the active list
++++++++++//returns pointer to updated flight schedule
+++++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++++-  *flight_schedules_active = *flight_schedules_free;
+++++++++-  *flight_schedules_free = *flight_schedules_free.next;
+++++++++-  return(flight_schedule);
+++++++++-}
+++++++++ 
++++++++++  struct flight_schedule temp = 
++++++++++  
++++++++++  
++++++++++  
++++++++++  *flight_schedules_active = *flight_schedules_free->free;
+++++++++ 
++++++++++  
++++++++++  //flight_schedules_active = flight_schedules_free;
++++++++++  *flight_schedules_free = *flight_schedules_free->next;
++++++++++  *flight_schedules_free->prev = NULL;
++++++++++  return(flight_schedules_active->flights[]);
++++++++++}
+++++++++ 
+++++++++ //flight schedule free
+++++++++-
++++++++++//takes schedule off active list, resets it, then places the node back on free list
+++++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++++-  *flight_schedule_active = *flight_schedule_free;
+++++++++-  *fs = 
++++++++++  
+++++++++ }
+++++++++\ No newline at end of file
+++++++++
+++++++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
+++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++++Date:   Fri Sep 25 12:05:56 2020 -0400
+++++++++
+++++++++    starting work on first 3 helper functions
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index 31abde4..ff89d23 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
+++++++++ }
+++++++++ 
+++++++++ WRITE SOME CODE!
++++++++++//flight schedule allocate
++++++++++struct flight_schedule * flight_schedule_allocate(void){
++++++++++  *flight_schedules_active = *flight_schedules_free;
++++++++++  *flight_schedules_free = *flight_schedules_free.next;
++++++++++  return(flight_schedule);
++++++++++}
++++++++++
++++++++++
++++++++++
++++++++++//flight schedule free
++++++++++
++++++++++void flight_schedule_free(struct flight_schedule *fs){
++++++++++  *flight_schedule_active = *flight_schedule_free;
++++++++++  *fs = 
++++++++++}
+++++++++\ No newline at end of file
+++++++++
+++++++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
+++++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++++++Date:   Thu Sep 24 18:32:49 2020 -0400
+++++++++
+++++++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
+++++++++
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++index 2f5c360..31abde4 100644
+++++++++--- a/assignment-3.c
++++++++++++ b/assignment-3.c
+++++++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++++++ // Structure to hold all the information for a single flight
+++++++++ //   A city's schedule has an array of these
+++++++++ struct flight {
+++++++++-  int time;       // departure time of the flight
++++++++++  time_t time;       // departure time of the flight
+++++++++   int available;  // number of seats currently available on the flight
+++++++++   int capacity;   // maximum seat capacity of the flight
+++++++++ };
+++++++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++++++     array[i+1].prev = &array[i];
+++++++++   }
+++++++++   // Takes care of last node.  
+++++++++-  // Its prev pointer will be set in the loop,
+++++++++-  // we just have to set its next to NULL.
++++++++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
+++++++++   array[n-1].next = NULL;
++++++++++  array[n-1].prev = &array[n-2];
+++++++++   flight_schedules_free = &array[0];
+++++++++ }
+++++++++ 
+++++++++diff --git a/reference b/reference
+++++++++index ee9132a..b11f6c6 100755
+++++++++Binary files a/reference and b/reference differ
+++++++++
+++++++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
+++++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++++++Date:   Mon Sep 21 21:02:39 2020 -0400
+++++++++
+++++++++    Initial Commit to seed assignment 3. Have fun!
+++++++++
+++++++++diff --git a/.gitignore b/.gitignore
+++++++++new file mode 100644
+++++++++index 0000000..8ff04a2
+++++++++--- /dev/null
++++++++++++ b/.gitignore
+++++++++@@ -0,0 +1,4 @@
++++++++++*
++++++++++!assignment-3.c
++++++++++!gitlog.txt
++++++++++
+++++++++diff --git a/.vscode/launch.json b/.vscode/launch.json
+++++++++new file mode 100644
+++++++++index 0000000..5f223b9
+++++++++--- /dev/null
++++++++++++ b/.vscode/launch.json
+++++++++@@ -0,0 +1,30 @@
++++++++++{
++++++++++    // Use IntelliSense to learn about possible attributes.
++++++++++    // Hover to view descriptions of existing attributes.
++++++++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
++++++++++    "version": "0.2.0",
++++++++++    "configurations": [
++++++++++    
++++++++++
++++++++++        {
++++++++++            "name": "(gdb) Launch",
++++++++++            "type": "cppdbg",
++++++++++            "request": "launch",
++++++++++            "program": "${workspaceFolder}/assignment-3",
++++++++++            "args": [],
++++++++++            "stopAtEntry": true,
++++++++++            "cwd": "${workspaceFolder}",
++++++++++            "environment": [],
++++++++++            "externalConsole": false,
++++++++++            "MIMode": "gdb",
++++++++++            "setupCommands": [
++++++++++                {
++++++++++                    "description": "Enable pretty-printing for gdb",
++++++++++                    "text": "-enable-pretty-printing",
++++++++++                    "ignoreFailures": true
++++++++++                }
++++++++++            ],
++++++++++            "preLaunchTask": "Build"
++++++++++        }
++++++++++    ]
++++++++++}
+++++++++diff --git a/.vscode/settings.json b/.vscode/settings.json
+++++++++new file mode 100644
+++++++++index 0000000..495436f
+++++++++--- /dev/null
++++++++++++ b/.vscode/settings.json
+++++++++@@ -0,0 +1,21 @@
++++++++++{
++++++++++    "git.ignoreLegacyWarning": true,
++++++++++    "files.autoSave": "afterDelay",
++++++++++    "files.exclude": {
++++++++++        ".vscode": true,
++++++++++        "**/*.o": true,
++++++++++        "reference": true,
++++++++++        "assignment-3": true,
++++++++++        "test.sh":true,
++++++++++        "gitlog.txt":true,
++++++++++        ".gitignore":true
++++++++++    },
++++++++++    "editor.renderControlCharacters": true,
++++++++++    "C_Cpp.default.cStandard": "c99",
++++++++++    "C_Cpp.default.cppStandard": "gnu++11",
++++++++++    "C_Cpp.default.defines": [],
++++++++++    "C_Cpp.intelliSenseEngine": "Disabled",
++++++++++    "C_Cpp.workspaceParsingPriority": "low",
++++++++++    "C_Cpp.intelliSenseCacheSize": 100,
++++++++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
++++++++++}
+++++++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+++++++++new file mode 100644
+++++++++index 0000000..d02618f
+++++++++--- /dev/null
++++++++++++ b/.vscode/tasks.json
+++++++++@@ -0,0 +1,28 @@
++++++++++{
++++++++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++++++++++    // for the documentation about the tasks.json format
++++++++++    "version": "2.0.0",
++++++++++    "tasks": [
++++++++++        {
++++++++++            "label": "Build",
++++++++++            "type": "shell",
++++++++++            "command": "make",
++++++++++            "options": {
++++++++++                "cwd": "${workspaceFolder}"
++++++++++            },
++++++++++            "group": {
++++++++++                "kind": "build",
++++++++++                "isDefault": true
++++++++++            },
++++++++++            "presentation": {
++++++++++                "reveal": "always",
++++++++++                "panel": "shared"
++++++++++            },
++++++++++            "problemMatcher": {
++++++++++                "base": "$gcc",
++++++++++                "fileLocation": ["relative", "${workspaceRoot}/"]
++++++++++            }
++++++++++        }
++++++++++        
++++++++++    ]
++++++++++}
+++++++++diff --git a/Makefile b/Makefile
+++++++++new file mode 100644
+++++++++index 0000000..1c3a3d1
+++++++++--- /dev/null
++++++++++++ b/Makefile
+++++++++@@ -0,0 +1,69 @@
++++++++++.PHONY: all clean test gitlog
++++++++++
++++++++++all: assignment-3
++++++++++
++++++++++assignment-3: assignment-3.c
++++++++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
++++++++++
++++++++++test: assignment-3 gitlog
++++++++++	./test.sh
++++++++++
++++++++++test1: assignment-3
++++++++++	./test.sh 1
++++++++++
++++++++++test2: assignment-3
++++++++++	./test.sh 2
++++++++++
++++++++++test3: assignment-3
++++++++++	./test.sh 3
++++++++++
++++++++++test4: assignment-3
++++++++++	./test.sh 4
++++++++++
++++++++++test5: assignment-3
++++++++++	./test.sh 5
++++++++++
++++++++++test6: assignment-3
++++++++++	./test.sh 6
++++++++++
++++++++++test7: assignment-3
++++++++++	./test.sh 7
++++++++++
++++++++++test8: assignment-3
++++++++++	./test.sh 8
++++++++++
++++++++++test9: assignment-3
++++++++++	./test.sh 9
++++++++++
++++++++++test10: assignment-3
++++++++++	./test.sh 10
++++++++++
++++++++++test11: assignment-3
++++++++++	./test.sh 11
++++++++++
++++++++++test12: assignment-3
++++++++++	./test.sh 12
++++++++++
++++++++++test13: assignment-3
++++++++++	./test.sh 13
++++++++++
++++++++++test14: assignment-3
++++++++++	./test.sh 14
++++++++++
++++++++++test15: assignment-3
++++++++++	./test.sh 15
++++++++++
++++++++++test16: assignment-3
++++++++++	./test.sh 16
++++++++++
++++++++++bonus1: assignment-3
++++++++++	./test.sh 1 bonus
++++++++++
++++++++++bonus2: assignment-3
++++++++++	./test.sh 2 bonus
++++++++++
++++++++++gitlog:
++++++++++	git log -p > gitlog.txt
++++++++++
++++++++++clean:
++++++++++	-${RM} assignment-3
+++++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++++new file mode 100644
+++++++++index 0000000..2f5c360
+++++++++--- /dev/null
++++++++++++ b/assignment-3.c
+++++++++@@ -0,0 +1,375 @@
++++++++++/**
++++++++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
++++++++++ *  Let's use our knowledge to write a simple flight management system!
++++++++++ **/
++++++++++
++++++++++#include <stdio.h>
++++++++++#include <string.h>
++++++++++#include <stdlib.h>
++++++++++#include <stdbool.h>
++++++++++#include <assert.h>
++++++++++
++++++++++// Limit constants
++++++++++#define MAX_CITY_NAME_LEN 20
++++++++++#define MAX_FLIGHTS_PER_CITY 5
++++++++++#define MAX_DEFAULT_SCHEDULES 50
++++++++++
++++++++++// Time definitions
++++++++++#define TIME_MIN 0
++++++++++#define TIME_MAX ((60 * 24)-1)
++++++++++#define TIME_NULL -1
++++++++++
++++++++++
++++++++++/******************************************************************************
++++++++++ * Structure and Type definitions                                             *
++++++++++ ******************************************************************************/
++++++++++typedef int time_t;                        // integers used for time values
++++++++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++++++++ 
++++++++++// Structure to hold all the information for a single flight
++++++++++//   A city's schedule has an array of these
++++++++++struct flight {
++++++++++  int time;       // departure time of the flight
++++++++++  int available;  // number of seats currently available on the flight
++++++++++  int capacity;   // maximum seat capacity of the flight
++++++++++};
++++++++++
++++++++++// Structure for an individual flight schedule
++++++++++// The main data structure of the program is an Array of these structures
++++++++++// Each structure will be placed on one of two linked lists:
++++++++++//                free or active
++++++++++// Initially the active list will be empty and all the schedules
++++++++++// will be on the free list.  Adding a schedule is finding the first
++++++++++// free schedule on the free list, removing it from the free list,
++++++++++// setting its destination city and putting it on the active list
++++++++++struct flight_schedule {
++++++++++  city_t destination;                          // destination city name
++++++++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
++++++++++  struct flight_schedule *next;                // link list next pointer
++++++++++  struct flight_schedule *prev;                // link list prev pointer
++++++++++};
++++++++++
++++++++++/******************************************************************************
++++++++++ * Global / External variables                                                *
++++++++++ ******************************************************************************/
++++++++++// This program uses two global linked lists of Schedules.  See comments
++++++++++// of struct flight_schedule above for details
++++++++++struct flight_schedule *flight_schedules_free = NULL;
++++++++++struct flight_schedule *flight_schedules_active = NULL;
++++++++++
++++++++++
++++++++++/******************************************************************************
++++++++++ * Function Prototypes                                                        *
++++++++++ ******************************************************************************/
++++++++++// Misc utility io functions
++++++++++int city_read(city_t city);           
++++++++++bool time_get(time_t *time_ptr);      
++++++++++bool flight_capacity_get(int *capacity_ptr);
++++++++++void print_command_help(void);
++++++++++
++++++++++// Core functions of the program
++++++++++void flight_schedule_initialize(struct flight_schedule array[], int n);
++++++++++struct flight_schedule * flight_schedule_find(city_t city);
++++++++++struct flight_schedule * flight_schedule_allocate(void);
++++++++++void flight_schedule_free(struct flight_schedule *fs);
++++++++++void flight_schedule_add(city_t city);
++++++++++void flight_schedule_listAll(void);
++++++++++void flight_schedule_list(city_t city);
++++++++++void flight_schedule_add_flight(city_t city);
++++++++++void flight_schedule_remove_flight(city_t city);
++++++++++void flight_schedule_schedule_seat(city_t city);
++++++++++void flight_schedule_unschedule_seat(city_t city);
++++++++++void flight_schedule_remove(city_t city);
++++++++++
++++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
++++++++++int  flight_compare_time(const void *a, const void *b);
++++++++++
++++++++++
++++++++++int main(int argc, char *argv[]) 
++++++++++{
++++++++++  long n = MAX_DEFAULT_SCHEDULES;
++++++++++  char command;
++++++++++  city_t city;
++++++++++
++++++++++  if (argc > 1) {
++++++++++    // If the program was passed an argument then try and convert the first
++++++++++    // argument in the a number that will override the default max number
++++++++++    // of schedule we will support
++++++++++    char *end;
++++++++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
++++++++++    if (n==0) {
++++++++++      printf("ERROR: Bad number of default max scedules specified.\n");
++++++++++      exit(EXIT_FAILURE);
++++++++++    }
++++++++++  }
++++++++++
++++++++++  // C99 lets us allocate an array of a fixed length as a local 
++++++++++  // variable.  Since we are doing this in main and a call to main will be 
++++++++++  // active for the entire time of the program's execution this
++++++++++  // array will be alive for the entire time -- its memory and values
++++++++++  // will be stable for the entire program execution.
++++++++++  struct flight_schedule flight_schedules[n];
++++++++++ 
++++++++++  // Initialize our global lists of free and active schedules using
++++++++++  // the elements of the flight_schedules array
++++++++++  flight_schedule_initialize(flight_schedules, n);
++++++++++
++++++++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
++++++++++  //  When possible, if we know that some particular thing should have happened
++++++++++  //  we think of that as an assertion and write code to test them.
++++++++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
++++++++++  // the free list to a non-null value and the the active list is a null value.
++++++++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
++++++++++
++++++++++  // Print the instruction in the beginning
++++++++++  print_command_help();
++++++++++
++++++++++  // Command processing loop
++++++++++  while (scanf(" %c", &command) == 1) {
++++++++++    switch (command) {
++++++++++    case 'A': 
++++++++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_add(city);
++++++++++
++++++++++      break;
++++++++++    case 'L':
++++++++++      // List all active flight schedules eg. "L\n"
++++++++++      flight_schedule_listAll();
++++++++++      break;
++++++++++    case 'l': 
++++++++++      // List the flights for a particular city eg. "l\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_list(city);
++++++++++      break;
++++++++++    case 'a':
++++++++++      // Adds a flight for a particular city "a Toronto\n
++++++++++      //                                      360 100\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_add_flight(city);
++++++++++      break;
++++++++++    case 'r':
++++++++++      // Remove a flight for a particular city "r Toronto\n
++++++++++      //                                        360\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_remove_flight(city);
++++++++++	break;
++++++++++    case 's':
++++++++++      // schedule a seat on a flight for a particular city "s Toronto\n
++++++++++      //                                                    300\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_schedule_seat(city);
++++++++++      break;
++++++++++    case 'u':
++++++++++      // unschedule a seat on a flight for a particular city "u Toronto\n
++++++++++      //                                                      360\n"
++++++++++        city_read(city);
++++++++++        flight_schedule_unschedule_seat(city);
++++++++++        break;
++++++++++    case 'R':
++++++++++      // remove the schedule for a particular city "R Toronto\n"
++++++++++      city_read(city);
++++++++++      flight_schedule_remove(city);  
++++++++++      break;
++++++++++    case 'h':
++++++++++        print_command_help();
++++++++++        break;
++++++++++    case 'q':
++++++++++      goto done;
++++++++++    default:
++++++++++      printf("Bad command. Use h to see help.\n");
++++++++++    }
++++++++++  }
++++++++++ done:
++++++++++  return EXIT_SUCCESS;
++++++++++}
++++++++++
++++++++++/**********************************************************************
++++++++++ * city_read: Takes in and processes a given city following a command *
++++++++++ *********************************************************************/
++++++++++int city_read(city_t city) {
++++++++++  int ch, i=0;
++++++++++
++++++++++  // skip leading non letter characters
++++++++++  while (true) {
++++++++++    ch = getchar();
++++++++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
++++++++++      city[i++] = ch;
++++++++++      break;
++++++++++    }
++++++++++  }
++++++++++  while ((ch = getchar()) != '\n') {
++++++++++    if (i < MAX_CITY_NAME_LEN) {
++++++++++      city[i++] = ch;
++++++++++    }
++++++++++  }
++++++++++  city[i] = '\0';
++++++++++  return i;
++++++++++}
++++++++++
++++++++++
++++++++++/****************************************************************
++++++++++ * Message functions so that your messages match what we expect *
++++++++++ ****************************************************************/
++++++++++void msg_city_bad(char *city) {
++++++++++  printf("No schedule for %s\n", city);
++++++++++}
++++++++++
++++++++++void msg_city_exists(char *city) {
++++++++++  printf("There is a schedule of %s already.\n", city);
++++++++++}
++++++++++
++++++++++void msg_schedule_no_free(void) {
++++++++++  printf("Sorry no more free schedules.\n");
++++++++++}
++++++++++
++++++++++void msg_city_flights(char *city) {
++++++++++  printf("The flights for %s are:", city);
++++++++++}
++++++++++
++++++++++void msg_flight_info(int time, int avail, int capacity) {
++++++++++  printf(" (%d, %d, %d)", time, avail, capacity);
++++++++++}
++++++++++
++++++++++void msg_city_max_flights_reached(char *city) {
++++++++++  printf("Sorry we cannot add more flights on this city.\n");
++++++++++}
++++++++++
++++++++++void msg_flight_bad_time(void) {
++++++++++  printf("Sorry there's no flight scheduled on this time.\n");
++++++++++}
++++++++++
++++++++++void msg_flight_no_seats(void) {
++++++++++    printf("Sorry there's no more seats available!\n");
++++++++++}
++++++++++
++++++++++void msg_flight_all_seats_empty(void) {
++++++++++  printf("All the seats on this flights are empty!\n");
++++++++++}
++++++++++
++++++++++void msg_time_bad() {
++++++++++  printf("Invalid time value\n");
++++++++++}
++++++++++
++++++++++void msg_capacity_bad() {
++++++++++  printf("Invalid capacity value\n");
++++++++++}
++++++++++
++++++++++void print_command_help()
++++++++++{
++++++++++  printf("Here are the possible commands:\n"
++++++++++	 "A <city name>     - Add an active empty flight schedule for\n"
++++++++++	 "                    <city name>\n"
++++++++++	 "L                 - List cities which have an active schedule\n"
++++++++++	 "l <city name>     - List the flights for <city name>\n"
++++++++++	 "a <city name>\n"
++++++++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
++++++++++	 "                    with <capacity> seats\n"  
++++++++++	 "r <city name>\n"
++++++++++         "<time>            - Remove a flight form <city name> whose time is\n"
++++++++++	 "                    <time>\n"
++++++++++	 "s <city name>\n"
++++++++++	 "<time>            - Attempt to schedule seat on flight to \n"
++++++++++	 "                    <city name> at <time> or next closest time on\n"
++++++++++	 "                    which their is an available seat\n"
++++++++++	 "u <city name>\n"
++++++++++	 "<time>            - unschedule a seat from flight to <city name>\n"
++++++++++	 "                    at <time>\n"
++++++++++	 "R <city name>     - Remove schedule for <city name>\n"
++++++++++	 "h                 - print this help message\n"
++++++++++	 "q                 - quit\n"
++++++++++);
++++++++++}
++++++++++
++++++++++
++++++++++/****************************************************************
++++++++++ * Resets a flight schedule                                     *
++++++++++ ****************************************************************/
++++++++++void flight_schedule_reset(struct flight_schedule *fs) {
++++++++++    fs->destination[0] = 0;
++++++++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
++++++++++      fs->flights[i].time = TIME_NULL;
++++++++++      fs->flights[i].available = 0;
++++++++++      fs->flights[i].capacity = 0;
++++++++++    }
++++++++++    fs->next = NULL;
++++++++++    fs->prev = NULL;
++++++++++}
++++++++++
++++++++++/******************************************************************
++++++++++* Initializes the flight_schedule array that will hold any flight *
++++++++++* schedules created by the user. This is called in main for you.  *
++++++++++ *****************************************************************/
++++++++++
++++++++++void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++++++{
++++++++++  flight_schedules_active = NULL;
++++++++++  flight_schedules_free = NULL;
++++++++++
++++++++++  // takes care of empty array case
++++++++++  if (n==0) return;
++++++++++
++++++++++  // Loop through the Array connecting them
++++++++++  // as a linear doubly linked list
++++++++++  array[0].prev = NULL;
++++++++++  for (int i=0; i<n-1; i++) {
++++++++++    flight_schedule_reset(&array[i]);
++++++++++    array[i].next = &array[i+1];
++++++++++    array[i+1].prev = &array[i];
++++++++++  }
++++++++++  // Takes care of last node.  
++++++++++  // Its prev pointer will be set in the loop,
++++++++++  // we just have to set its next to NULL.
++++++++++  array[n-1].next = NULL;
++++++++++  flight_schedules_free = &array[0];
++++++++++}
++++++++++
++++++++++/***********************************************************
++++++++++ * time_get: read a time from the user
++++++++++   Time in this program is a minute number 0-((24*60)-1)=1439
++++++++++   -1 is used to indicate the NULL empty time 
++++++++++   This function should read in a time value and check its 
++++++++++   validity.  If it is not valid eg. not -1 or not 0-1439
++++++++++   It should print "Invalid Time" and return false.
++++++++++   othewise it should return the value in the integer pointed
++++++++++   to by time_ptr.
++++++++++ ***********************************************************/
++++++++++bool time_get(int *time_ptr) {
++++++++++  if (scanf("%d", time_ptr)==1) {
++++++++++    return (TIME_NULL == *time_ptr || 
++++++++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
++++++++++  } 
++++++++++  msg_time_bad();
++++++++++  return false;
++++++++++}
++++++++++
++++++++++/***********************************************************
++++++++++ * flight_capacity_get: read the capacity of a flight from the user
++++++++++   This function should read in a capacity value and check its 
++++++++++   validity.  If it is not greater than 0, it should print 
++++++++++   "Invalid capacity value" and return false. Othewise it should 
++++++++++   return the value in the integer pointed to by cap_ptr.
++++++++++ ***********************************************************/
++++++++++bool flight_capacity_get(int *cap_ptr) {
++++++++++  if (scanf("%d", cap_ptr)==1) {
++++++++++    return *cap_ptr > 0;
++++++++++  }
++++++++++  msg_capacity_bad();
++++++++++  return false;
++++++++++}
++++++++++
++++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
++++++++++{
++++++++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
++++++++++	flight_compare_time);
++++++++++}
++++++++++
++++++++++int flight_compare_time(const void *a, const void *b) 
++++++++++{
++++++++++  const struct flight *af = a;
++++++++++  const struct flight *bf = b;
++++++++++  
++++++++++  return (af->time - bf->time);
++++++++++}
++++++++++
++++++++++WRITE SOME CODE!
+++++++++diff --git a/gitlog.txt b/gitlog.txt
+++++++++new file mode 100644
+++++++++index 0000000..e69de29
+++++++++diff --git a/reference b/reference
+++++++++new file mode 100755
+++++++++index 0000000..ee9132a
+++++++++Binary files /dev/null and b/reference differ
+++++++++diff --git a/test.sh b/test.sh
+++++++++new file mode 100755
+++++++++index 0000000..f8ecbf4
+++++++++--- /dev/null
++++++++++++ b/test.sh
+++++++++@@ -0,0 +1,328 @@
++++++++++#!/bin/bash
++++++++++#set -x
++++++++++
++++++++++REFERENCE=./reference
++++++++++PGM=./assignment-3
++++++++++
++++++++++# To add a test you can add an element the REQUIRED arrays 
++++++++++# or BONUS Arrays
++++++++++# Each test can have a descripttion, input and optionally a num
++++++++++# num is passed as the argument on the command line to set
++++++++++# the default max schedule size
++++++++++
++++++++++# Required tests
++++++++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
++++++++++REQUIRED_INPUT[0]="L
++++++++++A Toronto
++++++++++L"
++++++++++
++++++++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
++++++++++REQUIRED_INPUT[1]="L
++++++++++A Toronto
++++++++++l Toronto
++++++++++a Toronto
++++++++++1000 5
++++++++++l Toronto"
++++++++++
++++++++++REQUIRED_NUM[2]="2"
++++++++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
++++++++++REQUIRED_INPUT[2]="L
++++++++++A City1
++++++++++A City2
++++++++++L
++++++++++A City3
++++++++++L"
++++++++++
++++++++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
++++++++++REQUIRED_INPUT[3]="A Naples
++++++++++A Addis Ababa
++++++++++L
++++++++++R Naples
++++++++++L"
++++++++++
++++++++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
++++++++++REQUIRED_INPUT[4]="A San Jose
++++++++++a San Jose
++++++++++360 100
++++++++++l San Jose
++++++++++r San Jose
++++++++++360
++++++++++l San Jose"
++++++++++
++++++++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
++++++++++REQUIRED_INPUT[5]="A Hanoi
++++++++++r Hanoi
++++++++++100"
++++++++++
++++++++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
++++++++++REQUIRED_INPUT[6]="A Cartagena
++++++++++a Cartagena
++++++++++720 100
++++++++++a Cartagena
++++++++++840 120
++++++++++s Cartagena
++++++++++480
++++++++++l Cartagena"
++++++++++
++++++++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
++++++++++REQUIRED_INPUT[7]="L
++++++++++A Abu Dhabi
++++++++++a Abu Dhabi
++++++++++360 50
++++++++++a Abu Dhabi
++++++++++840 100
++++++++++s Abu Dhabi
++++++++++700
++++++++++l Abu Dhabi
++++++++++u Abu Dhabi
++++++++++840
++++++++++l Abu Dhabi"
++++++++++
++++++++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
++++++++++REQUIRED_INPUT[8]="L
++++++++++A Belgrade
++++++++++a Belgrade
++++++++++400 1
++++++++++s Belgrade
++++++++++400
++++++++++l Belgrade
++++++++++s Belgrade
++++++++++400
++++++++++l Belgrade"
++++++++++
++++++++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
++++++++++REQUIRED_INPUT[9]="L
++++++++++A Kyoto
++++++++++a Kyoto
++++++++++300 5
++++++++++l Kyoto
++++++++++u Kyoto
++++++++++300
++++++++++l Kyoto"
++++++++++
++++++++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
++++++++++REQUIRED_INPUT[10]="L
++++++++++A Mumbai
++++++++++a Mumbai
++++++++++900 3
++++++++++l Mumbai
++++++++++u Mumbai
++++++++++300
++++++++++l Mumbai"
++++++++++
++++++++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
++++++++++REQUIRED_INPUT[11]="L
++++++++++A Prague
++++++++++a Prague
++++++++++360 5
++++++++++a Prague
++++++++++720 100
++++++++++l Prague
++++++++++s Prague
++++++++++900
++++++++++l Prague"
++++++++++
++++++++++REQUIRED_NUM[12]="2"
++++++++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
++++++++++REQUIRED_INPUT[12]="L
++++++++++A City1
++++++++++L
++++++++++A City2
++++++++++L
++++++++++A City3
++++++++++L
++++++++++R City1
++++++++++L
++++++++++R City2
++++++++++L
++++++++++R City3
++++++++++L
++++++++++A City1
++++++++++L"
++++++++++
++++++++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
++++++++++REQUIRED_INPUT[13]="L
++++++++++A City1
++++++++++a City1
++++++++++60 5
++++++++++l City1
++++++++++a City1
++++++++++120 5
++++++++++l City1
++++++++++a City1
++++++++++180 5
++++++++++l City1
++++++++++a City1
++++++++++240 5
++++++++++l City1
++++++++++a City1
++++++++++300 5
++++++++++l City1
++++++++++a City1
++++++++++360 5
++++++++++l City1
++++++++++r City1
++++++++++360
++++++++++l City1
++++++++++r City1
++++++++++300
++++++++++l City1
++++++++++r City1
++++++++++240
++++++++++l City1
++++++++++r City1
++++++++++180
++++++++++l City1
++++++++++r City1
++++++++++120
++++++++++l City1
++++++++++r City1
++++++++++60
++++++++++l City1
++++++++++a City1
++++++++++60 5
++++++++++l City1"
++++++++++
++++++++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
++++++++++REQUIRED_INPUT[14]="L
++++++++++A City1
++++++++++a City1
++++++++++60 3
++++++++++l City1
++++++++++s City1
++++++++++60
++++++++++l City1
++++++++++s City1
++++++++++60
++++++++++l City1
++++++++++s City1
++++++++++60
++++++++++l City1
++++++++++s City1
++++++++++60
++++++++++l City1
++++++++++u City1
++++++++++60
++++++++++l City1
++++++++++u City1
++++++++++60
++++++++++l City1
++++++++++u City1
++++++++++60
++++++++++l City1
++++++++++u City1
++++++++++60
++++++++++l City1"
++++++++++
++++++++++REQUIRED_DESC[15]="Required 16: A bigger test "
++++++++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
++++++++++REQUIRED_VALUE[15]=5
++++++++++
++++++++++
++++++++++# Bonus tests
++++++++++BONUS_DESC[0]="Bonus 1: Medium sized test"
++++++++++BONUS_INPUT[0]="$(cat testMedium.txt)"
++++++++++BONUS_VALUE[0]=3
++++++++++
++++++++++BONUS_DESC[1]="Bonus 2: Large sized test"
++++++++++BONUS_INPUT[1]="$(cat testBig.txt)"
++++++++++BONUS_VALUE[1]=5
++++++++++
++++++++++
++++++++++function run_test()
++++++++++{
++++++++++   description="$1"
++++++++++   input="$2"
++++++++++   num="$3"
++++++++++
++++++++++   echo -n "$description : "
++++++++++   [[ -n $VERBOSE ]] &&  echo "Input:"
++++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++++++   [[ -n $VERBOSE ]] &&  echo "$input"
++++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++++++
++++++++++   solution=$($REFERENCE $num <<EOF
++++++++++$input
++++++++++EOF
++++++++++)
++++++++++
++++++++++   answer=$($PGM $num<<EOF
++++++++++$input
++++++++++EOF
++++++++++)
++++++++++
++++++++++  if [[ -n $DEBUG ]]; then
++++++++++      echo "$solution"
++++++++++  else
++++++++++    if [[ "$answer" == "$solution" ]]; then
++++++++++       echo "PASS"
++++++++++       return 0
++++++++++    fi
++++++++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
++++++++++    echo "FAIL"
++++++++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
++++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++++    [[ -n $VERBOSE ]] && echo "$answers"    
++++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
++++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++++    [[ -n $VERBOSE ]] && echo "$solution"
++++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++++    [[ -n $VERBOSE ]] && echo ""
++++++++++  fi
++++++++++  return 1
++++++++++}
++++++++++
++++++++++testnum=$1
++++++++++type=$2
++++++++++
++++++++++total=0
++++++++++correct=0
++++++++++
++++++++++if [[ -z $testnum ]]; then
++++++++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
++++++++++	value="${REQUIRED_VALUE[$i]}"
++++++++++	[[ -z $value ]] && value=1
++++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++++++	    (( correct += $value ))
++++++++++	fi
++++++++++	(( total += value ))
++++++++++    done
++++++++++    
++++++++++    
++++++++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
++++++++++	value="${BONUS_VALUE[$i]}"
++++++++++	[[ -z $value ]] && value=1
++++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++++++	    (( correct += $value ))
++++++++++	fi
++++++++++    done
++++++++++else
++++++++++    VERBOSE=1
++++++++++    (( i=$testnum - 1 ))
++++++++++    if [[ -z "$type" ]]; then
++++++++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
++++++++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
++++++++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
++++++++++	    exit -1
++++++++++	fi
++++++++++	value="${REQUIRED_VALUE[$i]}"
++++++++++	[[ -z $value ]] && value=1
++++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++++++	    (( correct += $value ))
++++++++++	fi
++++++++++	(( total += value ))
++++++++++    else
++++++++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
++++++++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
++++++++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
++++++++++	    exit -1
++++++++++	fi	
++++++++++	value="${BONUS_VALUE[$i]}"
++++++++++	[[ -z $value ]] && value=1
++++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++++++         (( correct += $value ))
++++++++++	fi
++++++++++    fi
++++++++++fi
++++++++++echo "score: ${correct}/${total}"
+++++++++diff --git a/testBig.txt b/testBig.txt
+++++++++new file mode 100644
+++++++++index 0000000..90170d5
+++++++++--- /dev/null
++++++++++++ b/testBig.txt
+++++++++@@ -0,0 +1,1251 @@
++++++++++L
++++++++++A Qingdao
++++++++++A Paris
++++++++++A Lima
++++++++++A Los Angeles
++++++++++A Khartoum
++++++++++A Barcelona
++++++++++A Santiago
++++++++++A Tokyo
++++++++++A Delhi
++++++++++A Guangzhou
++++++++++A Johannesburg
++++++++++A Paris
++++++++++A Dhaka
++++++++++A Chennai
++++++++++A Jinan
++++++++++A Luanda
++++++++++A Surat
++++++++++A Hyderabad
++++++++++A Beijing
++++++++++A Atlanta
++++++++++A Chennai
++++++++++A Dar es Salaam
++++++++++A Osaka
++++++++++A Hong Kong
++++++++++A Toronto
++++++++++A Saint Petersburg
++++++++++A Manila
++++++++++A Washington, D.C.
++++++++++A Tehran
++++++++++A Miami
++++++++++A Khartoum
++++++++++A Seoul
++++++++++A Dar es Salaam
++++++++++A Sao Paulo
++++++++++A Baghdad
++++++++++A Guadalajara
++++++++++A Ahmedabad
++++++++++A Moscow
++++++++++A Philadelphia
++++++++++A Fukuoka
++++++++++a Tokyo
++++++++++1414 113
++++++++++a Guadalajara
++++++++++385 170
++++++++++a Qingdao
++++++++++782 37
++++++++++a Ahmedabad
++++++++++1411 50
++++++++++a Los Angeles
++++++++++517 84
++++++++++a Tehran
++++++++++86 61
++++++++++a Osaka
++++++++++1289 162
++++++++++a Barcelona
++++++++++1261 158
++++++++++a Fukuoka
++++++++++550 191
++++++++++a Seoul
++++++++++207 1
++++++++++a Manila
++++++++++364 96
++++++++++a Khartoum
++++++++++56 194
++++++++++a Tokyo
++++++++++98 1
++++++++++a Saint Petersburg
++++++++++1330 107
++++++++++a Baghdad
++++++++++15 15
++++++++++a Chennai
++++++++++1169 127
++++++++++a Beijing
++++++++++807 97
++++++++++a Seoul
++++++++++1134 34
++++++++++a Jinan
++++++++++220 102
++++++++++a Dhaka
++++++++++122 101
++++++++++a Luanda
++++++++++1342 71
++++++++++a Guadalajara
++++++++++195 35
++++++++++a Fukuoka
++++++++++28 37
++++++++++a Beijing
++++++++++678 83
++++++++++a Khartoum
++++++++++947 39
++++++++++a Hyderabad
++++++++++490 104
++++++++++a Sao Paulo
++++++++++62 83
++++++++++a Baghdad
++++++++++1319 24
++++++++++a Delhi
++++++++++718 115
++++++++++a Baghdad
++++++++++204 114
++++++++++a Surat
++++++++++430 74
++++++++++a Miami
++++++++++918 87
++++++++++a Surat
++++++++++455 95
++++++++++a Fukuoka
++++++++++1077 131
++++++++++a Luanda
++++++++++311 21
++++++++++a Seoul
++++++++++1132 155
++++++++++a Lima
++++++++++432 177
++++++++++a Surat
++++++++++494 102
++++++++++a Washington, D.C.
++++++++++667 12
++++++++++a Hong Kong
++++++++++200 55
++++++++++a Los Angeles
++++++++++1195 4
++++++++++a Ahmedabad
++++++++++610 161
++++++++++a Delhi
++++++++++508 110
++++++++++a Atlanta
++++++++++17 21
++++++++++a Washington, D.C.
++++++++++162 23
++++++++++a Luanda
++++++++++1216 15
++++++++++a Tokyo
++++++++++1095 117
++++++++++a Philadelphia
++++++++++1436 117
++++++++++a Atlanta
++++++++++277 164
++++++++++a Manila
++++++++++720 147
++++++++++a Tokyo
++++++++++1017 25
++++++++++a Jinan
++++++++++76 66
++++++++++a Toronto
++++++++++844 84
++++++++++a Santiago
++++++++++7 115
++++++++++a Surat
++++++++++388 55
++++++++++a Tehran
++++++++++836 174
++++++++++a Paris
++++++++++371 110
++++++++++a Sao Paulo
++++++++++516 113
++++++++++a Luanda
++++++++++1041 174
++++++++++a Dhaka
++++++++++1076 34
++++++++++a Guadalajara
++++++++++162 144
++++++++++a Los Angeles
++++++++++424 33
++++++++++a Philadelphia
++++++++++565 167
++++++++++a Luanda
++++++++++1411 44
++++++++++a Osaka
++++++++++1005 82
++++++++++a Fukuoka
++++++++++1253 194
++++++++++a Atlanta
++++++++++141 102
++++++++++a Fukuoka
++++++++++1119 112
++++++++++a Toronto
++++++++++782 150
++++++++++a Dhaka
++++++++++1006 96
++++++++++a Miami
++++++++++961 126
++++++++++a Lima
++++++++++360 41
++++++++++a Lima
++++++++++14 50
++++++++++a Dhaka
++++++++++1028 191
++++++++++a Philadelphia
++++++++++502 115
++++++++++a Washington, D.C.
++++++++++1380 59
++++++++++a Atlanta
++++++++++548 113
++++++++++a Fukuoka
++++++++++694 183
++++++++++a Saint Petersburg
++++++++++261 26
++++++++++a Jinan
++++++++++196 53
++++++++++a Delhi
++++++++++315 78
++++++++++a Delhi
++++++++++625 92
++++++++++a Ahmedabad
++++++++++105 98
++++++++++a Philadelphia
++++++++++111 15
++++++++++a Atlanta
++++++++++321 31
++++++++++a Ahmedabad
++++++++++1244 59
++++++++++a Osaka
++++++++++799 173
++++++++++a Khartoum
++++++++++302 7
++++++++++a Luanda
++++++++++823 190
++++++++++a Chennai
++++++++++754 139
++++++++++a Los Angeles
++++++++++1028 78
++++++++++a Miami
++++++++++1123 183
++++++++++a Dar es Salaam
++++++++++1353 102
++++++++++a Beijing
++++++++++473 88
++++++++++a Paris
++++++++++698 95
++++++++++a Barcelona
++++++++++545 170
++++++++++a Chennai
++++++++++382 85
++++++++++a Miami
++++++++++821 114
++++++++++a Luanda
++++++++++584 161
++++++++++a Fukuoka
++++++++++38 26
++++++++++a Jinan
++++++++++536 148
++++++++++a Manila
++++++++++1403 133
++++++++++a Washington, D.C.
++++++++++917 130
++++++++++a Sao Paulo
++++++++++1169 81
++++++++++a Santiago
++++++++++689 42
++++++++++a Ahmedabad
++++++++++279 30
++++++++++a Los Angeles
++++++++++881 35
++++++++++a Jinan
++++++++++1293 148
++++++++++a Guangzhou
++++++++++1366 38
++++++++++a Santiago
++++++++++317 123
++++++++++a Tokyo
++++++++++454 104
++++++++++a Atlanta
++++++++++626 177
++++++++++a Surat
++++++++++69 135
++++++++++a Luanda
++++++++++1426 19
++++++++++a Barcelona
++++++++++879 46
++++++++++a Los Angeles
++++++++++1329 90
++++++++++a Beijing
++++++++++402 60
++++++++++a Lima
++++++++++727 161
++++++++++a Hyderabad
++++++++++601 186
++++++++++a Khartoum
++++++++++294 183
++++++++++a Hyderabad
++++++++++267 131
++++++++++a Manila
++++++++++771 102
++++++++++a Osaka
++++++++++103 68
++++++++++a Atlanta
++++++++++848 147
++++++++++a Atlanta
++++++++++811 179
++++++++++a Toronto
++++++++++402 131
++++++++++a Guadalajara
++++++++++804 28
++++++++++a Qingdao
++++++++++16 114
++++++++++a Beijing
++++++++++1218 14
++++++++++a Moscow
++++++++++498 195
++++++++++a Surat
++++++++++528 48
++++++++++a Manila
++++++++++865 4
++++++++++a Guangzhou
++++++++++328 24
++++++++++a Dhaka
++++++++++227 50
++++++++++a Manila
++++++++++124 91
++++++++++a Philadelphia
++++++++++218 104
++++++++++a Dar es Salaam
++++++++++209 34
++++++++++a Chennai
++++++++++641 179
++++++++++a Barcelona
++++++++++1433 171
++++++++++a Lima
++++++++++957 60
++++++++++a Dhaka
++++++++++1292 111
++++++++++a Qingdao
++++++++++647 40
++++++++++a Khartoum
++++++++++417 3
++++++++++a Tehran
++++++++++751 180
++++++++++a Barcelona
++++++++++778 118
++++++++++a Luanda
++++++++++204 59
++++++++++a Ahmedabad
++++++++++541 34
++++++++++a Ahmedabad
++++++++++539 33
++++++++++a Los Angeles
++++++++++824 193
++++++++++a Tehran
++++++++++1412 39
++++++++++s Luanda
++++++++++1418
++++++++++s Toronto
++++++++++857
++++++++++s Lima
++++++++++22
++++++++++s Tehran
++++++++++100
++++++++++s Washington
++++++++++175
++++++++++s Dhaka
++++++++++132
++++++++++s Jinan
++++++++++90
++++++++++s Beijing
++++++++++812
++++++++++s Barcelona
++++++++++1268
++++++++++s Dhaka
++++++++++228
++++++++++s Dhaka
++++++++++229
++++++++++s Osaka
++++++++++1295
++++++++++s Los Angeles
++++++++++527
++++++++++s Ahmedabad
++++++++++620
++++++++++s Tokyo
++++++++++461
++++++++++s Luanda
++++++++++588
++++++++++s Tehran
++++++++++1420
++++++++++s Jinan
++++++++++228
++++++++++s Hyderabad
++++++++++497
++++++++++s Manila
++++++++++879
++++++++++s Delhi
++++++++++720
++++++++++s Surat
++++++++++442
++++++++++s Lima
++++++++++21
++++++++++s Delhi
++++++++++630
++++++++++s Tehran
++++++++++836
++++++++++s Dhaka
++++++++++1042
++++++++++s Atlanta
++++++++++558
++++++++++s Khartoum
++++++++++300
++++++++++s Luanda
++++++++++1050
++++++++++s Lima
++++++++++445
++++++++++s Hong Kong
++++++++++213
++++++++++s Delhi
++++++++++318
++++++++++s Manila
++++++++++725
++++++++++s Dhaka
++++++++++1300
++++++++++s Tokyo
++++++++++1028
++++++++++s Lima
++++++++++23
++++++++++s Qingdao
++++++++++24
++++++++++s Ahmedabad
++++++++++542
++++++++++s Barcelona
++++++++++1274
++++++++++s Santiago
++++++++++7
++++++++++s Surat
++++++++++467
++++++++++s Chennai
++++++++++392
++++++++++s Fukuoka
++++++++++551
++++++++++s Fukuoka
++++++++++704
++++++++++s Fukuoka
++++++++++34
++++++++++s Fukuoka
++++++++++1131
++++++++++s Ahmedabad
++++++++++541
++++++++++s Philadelphia
++++++++++566
++++++++++s Surat
++++++++++506
++++++++++s Khartoum
++++++++++952
++++++++++s Guadalajara
++++++++++389
++++++++++s Tokyo
++++++++++1031
++++++++++s Baghdad
++++++++++24
++++++++++s Khartoum
++++++++++307
++++++++++s Lima
++++++++++370
++++++++++s Atlanta
++++++++++812
++++++++++s Sao Paulo
++++++++++1176
++++++++++s Manila
++++++++++1411
++++++++++s Khartoum
++++++++++294
++++++++++s Seoul
++++++++++1148
++++++++++s Guadalajara
++++++++++814
++++++++++s Khartoum
++++++++++314
++++++++++s Manila
++++++++++1410
++++++++++s Khartoum
++++++++++302
++++++++++s Philadelphia
++++++++++230
++++++++++s Lima
++++++++++728
++++++++++s Ahmedabad
++++++++++548
++++++++++s Fukuoka
++++++++++1121
++++++++++s Baghdad
++++++++++206
++++++++++s Ahmedabad
++++++++++1424
++++++++++s Santiago
++++++++++11
++++++++++s Lima
++++++++++364
++++++++++s Manila
++++++++++128
++++++++++s Tokyo
++++++++++460
++++++++++s Surat
++++++++++469
++++++++++s Barcelona
++++++++++1274
++++++++++s Guadalajara
++++++++++816
++++++++++s Guadalajara
++++++++++811
++++++++++s Luanda
++++++++++597
++++++++++s Atlanta
++++++++++852
++++++++++s Guadalajara
++++++++++811
++++++++++s Manila
++++++++++1409
++++++++++s Miami
++++++++++918
++++++++++s Luanda
++++++++++593
++++++++++s Barcelona
++++++++++1440
++++++++++s Dhaka
++++++++++132
++++++++++s Lima
++++++++++363
++++++++++s Ahmedabad
++++++++++1251
++++++++++s Los Angeles
++++++++++521
++++++++++s Fukuoka
++++++++++38
++++++++++s Beijing
++++++++++686
++++++++++s Fukuoka
++++++++++1126
++++++++++s Guadalajara
++++++++++196
++++++++++s Baghdad
++++++++++206
++++++++++s Los Angeles
++++++++++522
++++++++++s Ahmedabad
++++++++++553
++++++++++s Ahmedabad
++++++++++1416
++++++++++s Philadelphia
++++++++++113
++++++++++s Dar es Salaam
++++++++++217
++++++++++s Lima
++++++++++958
++++++++++s Tehran
++++++++++752
++++++++++s Washington
++++++++++680
++++++++++s Tehran
++++++++++756
++++++++++s Khartoum
++++++++++299
++++++++++s Dhaka
++++++++++1084
++++++++++s Manila
++++++++++878
++++++++++s Ahmedabad
++++++++++541
++++++++++s Ahmedabad
++++++++++119
++++++++++s Ahmedabad
++++++++++616
++++++++++s Tehran
++++++++++756
++++++++++s Tehran
++++++++++765
++++++++++s Philadelphia
++++++++++569
++++++++++s Ahmedabad
++++++++++283
++++++++++s Washington
++++++++++1387
++++++++++s Saint Petersburg
++++++++++274
++++++++++s Dhaka
++++++++++1037
++++++++++s Philadelphia
++++++++++506
++++++++++s Luanda
++++++++++593
++++++++++s Philadelphia
++++++++++232
++++++++++s Dhaka
++++++++++233
++++++++++s Baghdad
++++++++++1329
++++++++++s Chennai
++++++++++768
++++++++++s Barcelona
++++++++++546
++++++++++s Sao Paulo
++++++++++529
++++++++++s Jinan
++++++++++543
++++++++++s Philadelphia
++++++++++121
++++++++++s Tehran
++++++++++759
++++++++++s Lima
++++++++++964
++++++++++s Miami
++++++++++923
++++++++++s Los Angeles
++++++++++1195
++++++++++s Jinan
++++++++++200
++++++++++s Jinan
++++++++++224
++++++++++s Beijing
++++++++++1220
++++++++++s Lima
++++++++++368
++++++++++s Philadelphia
++++++++++1436
++++++++++s Tehran
++++++++++95
++++++++++s Miami
++++++++++928
++++++++++s Baghdad
++++++++++1326
++++++++++s Beijing
++++++++++483
++++++++++s Qingdao
++++++++++647
++++++++++s Fukuoka
++++++++++42
++++++++++s Los Angeles
++++++++++1033
++++++++++s Los Angeles
++++++++++836
++++++++++s Osaka
++++++++++1010
++++++++++s Manila
++++++++++865
++++++++++s Miami
++++++++++825
++++++++++s Barcelona
++++++++++553
++++++++++s Tehran
++++++++++757
++++++++++s Jinan
++++++++++88
++++++++++s Luanda
++++++++++1355
++++++++++s Saint Petersburg
++++++++++266
++++++++++s Surat
++++++++++459
++++++++++s Philadelphia
++++++++++576
++++++++++s Philadelphia
++++++++++1441
++++++++++s Paris
++++++++++709
++++++++++s Manila
++++++++++734
++++++++++s Toronto
++++++++++785
++++++++++s Manila
++++++++++135
++++++++++s Lima
++++++++++368
++++++++++s Lima
++++++++++967
++++++++++s Delhi
++++++++++731
++++++++++s Beijing
++++++++++403
++++++++++s Santiago
++++++++++692
++++++++++s Tehran
++++++++++1416
++++++++++s Dar es Salaam
++++++++++1358
++++++++++s Seoul
++++++++++1134
++++++++++s Philadelphia
++++++++++579
++++++++++s Guangzhou
++++++++++342
++++++++++s Osaka
++++++++++116
++++++++++s Guadalajara
++++++++++397
++++++++++s Dhaka
++++++++++1040
++++++++++s Toronto
++++++++++793
++++++++++s Qingdao
++++++++++25
++++++++++s Baghdad
++++++++++1332
++++++++++s Osaka
++++++++++1017
++++++++++s Los Angeles
++++++++++1338
++++++++++s Ahmedabad
++++++++++551
++++++++++s Guangzhou
++++++++++331
++++++++++s Tehran
++++++++++1420
++++++++++s Dar es Salaam
++++++++++215
++++++++++s Tokyo
++++++++++462
++++++++++s Atlanta
++++++++++859
++++++++++s Fukuoka
++++++++++554
++++++++++s Ahmedabad
++++++++++1423
++++++++++s Jinan
++++++++++229
++++++++++s Dhaka
++++++++++1294
++++++++++s Ahmedabad
++++++++++1250
++++++++++s Ahmedabad
++++++++++621
++++++++++s Delhi
++++++++++626
++++++++++s Manila
++++++++++129
++++++++++s Luanda
++++++++++204
++++++++++s Surat
++++++++++440
++++++++++s Atlanta
++++++++++22
++++++++++s Ahmedabad
++++++++++1251
++++++++++s Khartoum
++++++++++302
++++++++++s Surat
++++++++++73
++++++++++s Guadalajara
++++++++++209
++++++++++s Manila
++++++++++721
++++++++++s Toronto
++++++++++793
++++++++++s Dar es Salaam
++++++++++216
++++++++++s Manila
++++++++++785
++++++++++s Ahmedabad
++++++++++116
++++++++++s Barcelona
++++++++++548
++++++++++s Dhaka
++++++++++1041
++++++++++s Khartoum
++++++++++305
++++++++++s Los Angeles
++++++++++1208
++++++++++s Dhaka
++++++++++1079
++++++++++s Tokyo
++++++++++1422
++++++++++s Manila
++++++++++722
++++++++++s Osaka
++++++++++1298
++++++++++s Surat
++++++++++431
++++++++++s Khartoum
++++++++++294
++++++++++s Barcelona
++++++++++1445
++++++++++s Luanda
++++++++++589
++++++++++s Chennai
++++++++++645
++++++++++s Luanda
++++++++++835
++++++++++s Manila
++++++++++773
++++++++++s Fukuoka
++++++++++1256
++++++++++s Dhaka
++++++++++1300
++++++++++s Philadelphia
++++++++++230
++++++++++s Philadelphia
++++++++++571
++++++++++s Hong Kong
++++++++++209
++++++++++s Khartoum
++++++++++419
++++++++++s Paris
++++++++++706
++++++++++s Sao Paulo
++++++++++516
++++++++++s Tehran
++++++++++843
++++++++++s Khartoum
++++++++++429
++++++++++s Khartoum
++++++++++66
++++++++++s Guadalajara
++++++++++815
++++++++++s Khartoum
++++++++++63
++++++++++s Guadalajara
++++++++++397
++++++++++s Baghdad
++++++++++218
++++++++++s Saint Petersburg
++++++++++274
++++++++++s Dar es Salaam
++++++++++1359
++++++++++s Lima
++++++++++439
++++++++++s Khartoum
++++++++++312
++++++++++s Luanda
++++++++++1345
++++++++++s Seoul
++++++++++220
++++++++++s Tokyo
++++++++++1020
++++++++++s Atlanta
++++++++++25
++++++++++s Sao Paulo
++++++++++1179
++++++++++s Manila
++++++++++732
++++++++++s Philadelphia
++++++++++122
++++++++++s Manila
++++++++++723
++++++++++s Baghdad
++++++++++205
++++++++++s Osaka
++++++++++1018
++++++++++s Tehran
++++++++++762
++++++++++s Luanda
++++++++++1412
++++++++++s Toronto
++++++++++845
++++++++++s Qingdao
++++++++++24
++++++++++s Surat
++++++++++528
++++++++++s Chennai
++++++++++385
++++++++++s Ahmedabad
++++++++++542
++++++++++s Philadelphia
++++++++++1447
++++++++++s Lima
++++++++++733
++++++++++s Guadalajara
++++++++++205
++++++++++s Delhi
++++++++++326
++++++++++s Chennai
++++++++++754
++++++++++s Atlanta
++++++++++823
++++++++++s Manila
++++++++++377
++++++++++s Khartoum
++++++++++303
++++++++++s Delhi
++++++++++512
++++++++++s Surat
++++++++++498
++++++++++s Guadalajara
++++++++++165
++++++++++s Manila
++++++++++720
++++++++++s Washington
++++++++++170
++++++++++s Hyderabad
++++++++++280
++++++++++s Lima
++++++++++370
++++++++++s Tokyo
++++++++++98
++++++++++s Toronto
++++++++++854
++++++++++s Ahmedabad
++++++++++618
++++++++++s Toronto
++++++++++858
++++++++++s Tehran
++++++++++1421
++++++++++s Qingdao
++++++++++783
++++++++++s Barcelona
++++++++++784
++++++++++s Santiago
++++++++++690
++++++++++s Fukuoka
++++++++++1082
++++++++++s Jinan
++++++++++232
++++++++++s Chennai
++++++++++385
++++++++++s Paris
++++++++++710
++++++++++s Tokyo
++++++++++1427
++++++++++s Chennai
++++++++++754
++++++++++s Miami
++++++++++920
++++++++++s Toronto
++++++++++407
++++++++++s Guadalajara
++++++++++806
++++++++++s Miami
++++++++++923
++++++++++s Philadelphia
++++++++++226
++++++++++s Manila
++++++++++720
++++++++++s Manila
++++++++++133
++++++++++s Toronto
++++++++++852
++++++++++s Barcelona
++++++++++886
++++++++++s Sao Paulo
++++++++++68
++++++++++s Delhi
++++++++++630
++++++++++s Los Angeles
++++++++++428
++++++++++s Washington
++++++++++917
++++++++++s Atlanta
++++++++++322
++++++++++s Atlanta
++++++++++549
++++++++++s Manila
++++++++++137
++++++++++s Miami
++++++++++1135
++++++++++s Guadalajara
++++++++++399
++++++++++A Dar es Salaam
++++++++++a Qingdao
++++++++++1015 95
++++++++++u Toronto
++++++++++402
++++++++++A Lagos
++++++++++L
++++++++++a Qingdao
++++++++++910 139
++++++++++R Dar es Salaam
++++++++++r Washington
++++++++++917
++++++++++u Osaka
++++++++++103
++++++++++R Tokyo
++++++++++a Baghdad
++++++++++309 68
++++++++++L
++++++++++R Jinan
++++++++++L
++++++++++s Washington
++++++++++170
++++++++++L
++++++++++R Hyderabad
++++++++++r Lima
++++++++++727
++++++++++u Khartoum
++++++++++302
++++++++++A Nagoya
++++++++++u Los Angeles
++++++++++1329
++++++++++a Luanda
++++++++++1364 38
++++++++++r Philadelphia
++++++++++1436
++++++++++A Johannesburg
++++++++++A New York City
++++++++++a Los Angeles
++++++++++270 149
++++++++++A Los Angeles
++++++++++R Manila
++++++++++r Beijing
++++++++++473
++++++++++A Beijing
++++++++++r Tokyo
++++++++++1414
++++++++++a Lima
++++++++++1003 11
++++++++++r Dhaka
++++++++++227
++++++++++s Fukuoka
++++++++++38
++++++++++s Moscow
++++++++++499
++++++++++u Delhi
++++++++++508
++++++++++r Jinan
++++++++++220
++++++++++L
++++++++++a Qingdao
++++++++++314 81
++++++++++s Manila
++++++++++878
++++++++++a Sao Paulo
++++++++++457 134
++++++++++L
++++++++++R Hong Kong
++++++++++A Nagoya
++++++++++s Lima
++++++++++962
++++++++++u Baghdad
++++++++++1319
++++++++++L
++++++++++R Dhaka
++++++++++L
++++++++++u Lima
++++++++++432
++++++++++a Barcelona
++++++++++756 138
++++++++++s Toronto
++++++++++784
++++++++++u Dar es Salaam
++++++++++209
++++++++++R Miami
++++++++++u Washington
++++++++++1380
++++++++++s Manila
++++++++++784
++++++++++A London
++++++++++s Surat
++++++++++459
++++++++++L
++++++++++A Manila
++++++++++A Istanbul
++++++++++r Toronto
++++++++++782
++++++++++r Saint Petersburg
++++++++++1330
++++++++++s Guadalajara
++++++++++396
++++++++++A Tianjin
++++++++++r Tokyo
++++++++++98
++++++++++R Luanda
++++++++++r Dhaka
++++++++++122
++++++++++R Lagos
++++++++++u Fukuoka
++++++++++694
++++++++++r Jinan
++++++++++76
++++++++++u Sao Paulo
++++++++++457
++++++++++a Philadelphia
++++++++++455 175
++++++++++L
++++++++++u Delhi
++++++++++718
++++++++++r Osaka
++++++++++1005
++++++++++A Harbin
++++++++++u Luanda
++++++++++584
++++++++++r Los Angeles
++++++++++424
++++++++++L
++++++++++u Los Angeles
++++++++++824
++++++++++L
++++++++++R Khartoum
++++++++++r Barcelona
++++++++++545
++++++++++r Philadelphia
++++++++++502
++++++++++R Moscow
++++++++++r Hyderabad
++++++++++601
++++++++++u Los Angeles
++++++++++824
++++++++++A Nagoya
++++++++++R Washington, D.C.
++++++++++L
++++++++++L
++++++++++s Qingdao
++++++++++790
++++++++++R Sao Paulo
++++++++++A Shanghai
++++++++++A Paris
++++++++++u Beijing
++++++++++402
++++++++++r Philadelphia
++++++++++455
++++++++++s Luanda
++++++++++1053
++++++++++a Saint Petersburg
++++++++++322 141
++++++++++r Osaka
++++++++++103
++++++++++r Barcelona
++++++++++879
++++++++++a Baghdad
++++++++++732 76
++++++++++r Baghdad
++++++++++309
++++++++++a Tehran
++++++++++1213 65
++++++++++a Tehran
++++++++++270 7
++++++++++R Manila
++++++++++L
++++++++++A Nanjing
++++++++++r Luanda
++++++++++204
++++++++++L
++++++++++u Los Angeles
++++++++++824
++++++++++a Seoul
++++++++++161 99
++++++++++s Ahmedabad
++++++++++546
++++++++++a Atlanta
++++++++++920 91
++++++++++a Tianjin
++++++++++85 108
++++++++++a Lima
++++++++++1345 173
++++++++++r Manila
++++++++++865
++++++++++r Luanda
++++++++++584
++++++++++A Singapore
++++++++++L
++++++++++u Manila
++++++++++364
++++++++++L
++++++++++A Kolkata
++++++++++a Nanjing
++++++++++1014 161
++++++++++u Jinan
++++++++++1293
++++++++++u Miami
++++++++++918
++++++++++L
++++++++++R Johannesburg
++++++++++L
++++++++++L
++++++++++A Kuala Lumpur
++++++++++u Miami
++++++++++961
++++++++++R Atlanta
++++++++++A Ahmedabad
++++++++++A Istanbul
++++++++++u Baghdad
++++++++++732
++++++++++a New York City
++++++++++1256 182
++++++++++R Qingdao
++++++++++r Guadalajara
++++++++++385
++++++++++R Guadalajara
++++++++++s Surat
++++++++++463
++++++++++r Nanjing
++++++++++1014
++++++++++A Hangzhou
++++++++++A Lahore
++++++++++s Los Angeles
++++++++++1198
++++++++++R Seoul
++++++++++A Fukuoka
++++++++++A Foshan
++++++++++u Sao Paulo
++++++++++62
++++++++++L
++++++++++a Beijing
++++++++++9 165
++++++++++a Istanbul
++++++++++877 85
++++++++++R Kolkata
++++++++++R Foshan
++++++++++R Toronto
++++++++++a Barcelona
++++++++++1008 74
++++++++++s Sao Paulo
++++++++++1183
++++++++++A Shenzhen
++++++++++A Hong Kong
++++++++++A Shenzhen
++++++++++R Philadelphia
++++++++++u Toronto
++++++++++844
++++++++++R Nagoya
++++++++++a London
++++++++++599 14
++++++++++A Chengdu
++++++++++a Paris
++++++++++1063 129
++++++++++r Lima
++++++++++14
++++++++++L
++++++++++s Luanda
++++++++++1374
++++++++++a Tehran
++++++++++371 109
++++++++++r Miami
++++++++++918
++++++++++a New York City
++++++++++272 66
++++++++++L
++++++++++a Harbin
++++++++++633 24
++++++++++R Tehran
++++++++++A Khartoum
++++++++++a Shenzhen
++++++++++930 112
++++++++++a Istanbul
++++++++++1125 123
++++++++++u Qingdao
++++++++++782
++++++++++L
++++++++++R Shanghai
++++++++++s Osaka
++++++++++808
++++++++++a Baghdad
++++++++++658 29
++++++++++u Tianjin
++++++++++85
++++++++++r Atlanta
++++++++++321
++++++++++r Khartoum
++++++++++302
++++++++++A Los Angeles
++++++++++A Dhaka
++++++++++L
++++++++++s Qingdao
++++++++++660
++++++++++A Toronto
++++++++++u Luanda
++++++++++1041
++++++++++u Guadalajara
++++++++++195
++++++++++L
++++++++++a Hangzhou
++++++++++553 187
++++++++++s Fukuoka
++++++++++1256
++++++++++L
++++++++++L
++++++++++u Osaka
++++++++++799
+++++++++diff --git a/testMedium.txt b/testMedium.txt
+++++++++new file mode 100644
+++++++++index 0000000..3ddcea1
+++++++++--- /dev/null
++++++++++++ b/testMedium.txt
+++++++++@@ -0,0 +1,766 @@
++++++++++L
++++++++++A Manila
++++++++++A Jakarta
++++++++++A Saint Petersburg
++++++++++A Atlanta
++++++++++A Hong Kong
++++++++++A Philadelphia
++++++++++A Chicago
++++++++++A Foshan
++++++++++A Fukuoka
++++++++++A Chennai
++++++++++A Dallas
++++++++++A Guangzhou
++++++++++A Chengdu
++++++++++A Ho Chi Minh City
++++++++++A Bangkok
++++++++++A Nanjing
++++++++++A Moscow
++++++++++A Chengdu
++++++++++A Lahore
++++++++++A Philadelphia
++++++++++A Bogota
++++++++++A Pune
++++++++++A Suzhou
++++++++++A Dongguan
++++++++++A Paris
++++++++++A Chennai
++++++++++A Dongguan
++++++++++A Lima
++++++++++A Qingdao
++++++++++A Kolkata
++++++++++a Nanjing
++++++++++1262 198
++++++++++a Dongguan
++++++++++72 86
++++++++++a Foshan
++++++++++776 178
++++++++++a Bangkok
++++++++++1177 9
++++++++++a Saint Petersburg
++++++++++59 145
++++++++++a Pune
++++++++++925 113
++++++++++a Chicago
++++++++++155 192
++++++++++a Atlanta
++++++++++1400 4
++++++++++a Jakarta
++++++++++795 145
++++++++++a Atlanta
++++++++++1177 147
++++++++++a Suzhou
++++++++++93 109
++++++++++a Paris
++++++++++95 197
++++++++++a Nanjing
++++++++++916 142
++++++++++a Pune
++++++++++1133 134
++++++++++a Chennai
++++++++++307 49
++++++++++a Qingdao
++++++++++91 177
++++++++++a Dallas
++++++++++500 174
++++++++++a Atlanta
++++++++++457 94
++++++++++a Lima
++++++++++993 151
++++++++++a Chengdu
++++++++++1108 189
++++++++++a Fukuoka
++++++++++44 70
++++++++++a Paris
++++++++++1107 25
++++++++++a Lima
++++++++++1052 62
++++++++++a Guangzhou
++++++++++1410 160
++++++++++a Manila
++++++++++602 45
++++++++++a Nanjing
++++++++++1410 105
++++++++++a Guangzhou
++++++++++1211 170
++++++++++a Foshan
++++++++++1427 175
++++++++++a Fukuoka
++++++++++279 183
++++++++++a Philadelphia
++++++++++329 169
++++++++++a Moscow
++++++++++1385 5
++++++++++a Chennai
++++++++++1258 163
++++++++++a Chicago
++++++++++1304 114
++++++++++a Dongguan
++++++++++1221 26
++++++++++a Philadelphia
++++++++++182 26
++++++++++a Suzhou
++++++++++396 159
++++++++++a Chengdu
++++++++++524 33
++++++++++a Ho Chi Minh City
++++++++++869 63
++++++++++a Kolkata
++++++++++656 1
++++++++++a Atlanta
++++++++++246 41
++++++++++a Chengdu
++++++++++626 182
++++++++++a Saint Petersburg
++++++++++1133 134
++++++++++a Suzhou
++++++++++348 13
++++++++++a Chicago
++++++++++1337 18
++++++++++a Philadelphia
++++++++++1224 23
++++++++++a Fukuoka
++++++++++68 193
++++++++++a Philadelphia
++++++++++793 20
++++++++++a Saint Petersburg
++++++++++229 197
++++++++++a Bogota
++++++++++818 86
++++++++++a Chengdu
++++++++++826 46
++++++++++a Bangkok
++++++++++575 16
++++++++++a Paris
++++++++++101 180
++++++++++a Fukuoka
++++++++++406 174
++++++++++a Ho Chi Minh City
++++++++++1114 108
++++++++++a Lahore
++++++++++1163 131
++++++++++a Ho Chi Minh City
++++++++++118 111
++++++++++a Foshan
++++++++++333 156
++++++++++a Kolkata
++++++++++287 0
++++++++++a Lahore
++++++++++1263 28
++++++++++a Bogota
++++++++++980 116
++++++++++a Bogota
++++++++++1392 84
++++++++++a Suzhou
++++++++++111 84
++++++++++a Hong Kong
++++++++++726 56
++++++++++a Kolkata
++++++++++663 118
++++++++++a Saint Petersburg
++++++++++1369 41
++++++++++a Atlanta
++++++++++1138 89
++++++++++a Qingdao
++++++++++406 78
++++++++++a Lima
++++++++++1019 194
++++++++++a Kolkata
++++++++++1242 80
++++++++++a Foshan
++++++++++810 6
++++++++++a Atlanta
++++++++++936 36
++++++++++a Manila
++++++++++933 147
++++++++++a Ho Chi Minh City
++++++++++612 31
++++++++++a Bangkok
++++++++++1383 70
++++++++++a Kolkata
++++++++++324 94
++++++++++a Atlanta
++++++++++1318 62
++++++++++a Fukuoka
++++++++++1136 56
++++++++++a Atlanta
++++++++++348 41
++++++++++a Moscow
++++++++++1335 129
++++++++++a Manila
++++++++++1222 33
++++++++++a Chengdu
++++++++++1374 183
++++++++++a Foshan
++++++++++313 20
++++++++++a Philadelphia
++++++++++1211 143
++++++++++a Dongguan
++++++++++40 104
++++++++++a Atlanta
++++++++++539 85
++++++++++a Chicago
++++++++++756 22
++++++++++a Suzhou
++++++++++20 113
++++++++++a Kolkata
++++++++++172 34
++++++++++a Moscow
++++++++++1306 15
++++++++++a Qingdao
++++++++++465 13
++++++++++a Moscow
++++++++++921 144
++++++++++a Saint Petersburg
++++++++++1264 189
++++++++++a Bangkok
++++++++++965 179
++++++++++a Pune
++++++++++21 100
++++++++++a Saint Petersburg
++++++++++1227 183
++++++++++a Lahore
++++++++++752 15
++++++++++a Chicago
++++++++++643 117
++++++++++a Suzhou
++++++++++18 66
++++++++++a Guangzhou
++++++++++110 16
++++++++++a Dongguan
++++++++++1279 94
++++++++++s Jakarta
++++++++++802
++++++++++s Foshan
++++++++++787
++++++++++s Nanjing
++++++++++1263
++++++++++s Manila
++++++++++941
++++++++++s Lima
++++++++++1060
++++++++++s Chengdu
++++++++++1120
++++++++++s Qingdao
++++++++++99
++++++++++s Philadelphia
++++++++++329
++++++++++s Nanjing
++++++++++1266
++++++++++s Manila
++++++++++1235
++++++++++s Qingdao
++++++++++96
++++++++++s Atlanta
++++++++++257
++++++++++s Kolkata
++++++++++666
++++++++++s Kolkata
++++++++++663
++++++++++s Chengdu
++++++++++636
++++++++++s Ho Chi Minh City
++++++++++1120
++++++++++s Bogota
++++++++++1394
++++++++++s Lahore
++++++++++1171
++++++++++s Paris
++++++++++108
++++++++++s Ho Chi Minh City
++++++++++1120
++++++++++s Foshan
++++++++++342
++++++++++s Qingdao
++++++++++417
++++++++++s Chennai
++++++++++315
++++++++++s Foshan
++++++++++1431
++++++++++s Guangzhou
++++++++++1224
++++++++++s Nanjing
++++++++++928
++++++++++s Ho Chi Minh City
++++++++++1125
++++++++++s Kolkata
++++++++++338
++++++++++s Dongguan
++++++++++1281
++++++++++s Moscow
++++++++++1314
++++++++++s Foshan
++++++++++343
++++++++++s Dongguan
++++++++++1221
++++++++++s Paris
++++++++++1110
++++++++++s Bangkok
++++++++++1178
++++++++++s Manila
++++++++++1229
++++++++++s Ho Chi Minh City
++++++++++121
++++++++++s Paris
++++++++++109
++++++++++s Manila
++++++++++614
++++++++++s Foshan
++++++++++789
++++++++++s Ho Chi Minh City
++++++++++120
++++++++++s Jakarta
++++++++++803
++++++++++s Chicago
++++++++++770
++++++++++s Kolkata
++++++++++660
++++++++++s Moscow
++++++++++1335
++++++++++s Saint Petersburg
++++++++++1147
++++++++++s Philadelphia
++++++++++192
++++++++++s Nanjing
++++++++++916
++++++++++s Dallas
++++++++++514
++++++++++s Ho Chi Minh City
++++++++++626
++++++++++s Philadelphia
++++++++++1225
++++++++++s Saint Petersburg
++++++++++1377
++++++++++s Suzhou
++++++++++402
++++++++++s Bogota
++++++++++993
++++++++++s Chennai
++++++++++1271
++++++++++s Chennai
++++++++++307
++++++++++s Paris
++++++++++106
++++++++++s Moscow
++++++++++1318
++++++++++s Nanjing
++++++++++1267
++++++++++s Bogota
++++++++++991
++++++++++s Atlanta
++++++++++1139
++++++++++s Suzhou
++++++++++34
++++++++++s Paris
++++++++++104
++++++++++s Chennai
++++++++++1272
++++++++++s Ho Chi Minh City
++++++++++623
++++++++++s Dongguan
++++++++++1287
++++++++++s Saint Petersburg
++++++++++1372
++++++++++s Atlanta
++++++++++1142
++++++++++s Foshan
++++++++++320
++++++++++s Chicago
++++++++++1338
++++++++++s Jakarta
++++++++++803
++++++++++s Foshan
++++++++++816
++++++++++s Ho Chi Minh City
++++++++++122
++++++++++s Atlanta
++++++++++549
++++++++++s Dongguan
++++++++++83
++++++++++s Saint Petersburg
++++++++++70
++++++++++s Chengdu
++++++++++1384
++++++++++s Philadelphia
++++++++++796
++++++++++s Ho Chi Minh City
++++++++++1123
++++++++++s Atlanta
++++++++++248
++++++++++s Atlanta
++++++++++1147
++++++++++s Suzhou
++++++++++115
++++++++++s Dongguan
++++++++++72
++++++++++s Qingdao
++++++++++410
++++++++++s Chicago
++++++++++766
++++++++++s Philadelphia
++++++++++1221
++++++++++s Lima
++++++++++1005
++++++++++s Atlanta
++++++++++1146
++++++++++s Lima
++++++++++1003
++++++++++s Ho Chi Minh City
++++++++++1117
++++++++++s Paris
++++++++++109
++++++++++s Atlanta
++++++++++1190
++++++++++s Moscow
++++++++++1388
++++++++++s Kolkata
++++++++++666
++++++++++s Dallas
++++++++++506
++++++++++s Chennai
++++++++++314
++++++++++s Pune
++++++++++925
++++++++++s Lahore
++++++++++1274
++++++++++s Nanjing
++++++++++927
++++++++++s Philadelphia
++++++++++799
++++++++++s Dallas
++++++++++505
++++++++++s Hong Kong
++++++++++727
++++++++++s Moscow
++++++++++925
++++++++++s Qingdao
++++++++++417
++++++++++s Philadelphia
++++++++++336
++++++++++s Bangkok
++++++++++1178
++++++++++s Moscow
++++++++++1347
++++++++++s Atlanta
++++++++++540
++++++++++s Guangzhou
++++++++++122
++++++++++s Atlanta
++++++++++1323
++++++++++s Philadelphia
++++++++++1224
++++++++++s Fukuoka
++++++++++1140
++++++++++s Chicago
++++++++++167
++++++++++s Bogota
++++++++++1401
++++++++++s Foshan
++++++++++813
++++++++++s Bogota
++++++++++1403
++++++++++s Qingdao
++++++++++465
++++++++++s Atlanta
++++++++++469
++++++++++s Pune
++++++++++1133
++++++++++s Qingdao
++++++++++93
++++++++++s Moscow
++++++++++1316
++++++++++s Dongguan
++++++++++49
++++++++++s Suzhou
++++++++++23
++++++++++s Qingdao
++++++++++468
++++++++++s Kolkata
++++++++++335
++++++++++s Atlanta
++++++++++542
++++++++++s Kolkata
++++++++++666
++++++++++s Lima
++++++++++996
++++++++++s Foshan
++++++++++1441
++++++++++s Philadelphia
++++++++++184
++++++++++s Qingdao
++++++++++104
++++++++++s Atlanta
++++++++++1406
++++++++++s Foshan
++++++++++335
++++++++++s Atlanta
++++++++++256
++++++++++s Suzhou
++++++++++28
++++++++++s Lima
++++++++++1025
++++++++++s Saint Petersburg
++++++++++1277
++++++++++s Bogota
++++++++++987
++++++++++s Bogota
++++++++++981
++++++++++s Ho Chi Minh City
++++++++++623
++++++++++s Kolkata
++++++++++337
++++++++++s Bogota
++++++++++1398
++++++++++s Atlanta
++++++++++1145
++++++++++s Bangkok
++++++++++973
++++++++++s Manila
++++++++++940
++++++++++s Atlanta
++++++++++351
++++++++++s Ho Chi Minh City
++++++++++622
++++++++++s Kolkata
++++++++++667
++++++++++s Paris
++++++++++104
++++++++++s Chennai
++++++++++1265
++++++++++s Ho Chi Minh City
++++++++++881
++++++++++s Foshan
++++++++++1427
++++++++++s Guangzhou
++++++++++1225
++++++++++s Kolkata
++++++++++1251
++++++++++s Manila
++++++++++941
++++++++++s Jakarta
++++++++++808
++++++++++s Hong Kong
++++++++++736
++++++++++s Foshan
++++++++++1438
++++++++++s Dongguan
++++++++++1289
++++++++++s Saint Petersburg
++++++++++1370
++++++++++s Hong Kong
++++++++++737
++++++++++s Dongguan
++++++++++75
++++++++++s Philadelphia
++++++++++340
++++++++++s Suzhou
++++++++++118
++++++++++s Qingdao
++++++++++414
++++++++++s Bogota
++++++++++823
++++++++++s Chengdu
++++++++++828
++++++++++s Foshan
++++++++++317
++++++++++s Suzhou
++++++++++27
++++++++++s Saint Petersburg
++++++++++1379
++++++++++s Ho Chi Minh City
++++++++++618
++++++++++s Lahore
++++++++++766
++++++++++s Chicago
++++++++++1304
++++++++++s Bangkok
++++++++++1179
++++++++++s Manila
++++++++++609
++++++++++s Chengdu
++++++++++630
++++++++++s Paris
++++++++++1108
++++++++++s Kolkata
++++++++++662
++++++++++s Hong Kong
++++++++++732
++++++++++s Pune
++++++++++932
++++++++++s Chennai
++++++++++1258
++++++++++s Paris
++++++++++95
++++++++++s Pune
++++++++++938
++++++++++s Chengdu
++++++++++635
++++++++++s Paris
++++++++++1118
++++++++++s Ho Chi Minh City
++++++++++612
++++++++++s Ho Chi Minh City
++++++++++1117
++++++++++s Ho Chi Minh City
++++++++++612
++++++++++s Kolkata
++++++++++667
++++++++++s Chennai
++++++++++1266
++++++++++s Foshan
++++++++++782
++++++++++s Philadelphia
++++++++++330
++++++++++s Manila
++++++++++1227
++++++++++s Lahore
++++++++++1170
++++++++++s Guangzhou
++++++++++114
++++++++++s Foshan
++++++++++788
++++++++++s Guangzhou
++++++++++122
++++++++++s Atlanta
++++++++++544
++++++++++s Paris
++++++++++1113
++++++++++s Pune
++++++++++938
++++++++++s Dallas
++++++++++502
++++++++++A Jinan
++++++++++a Dallas
++++++++++368 9
++++++++++r Lahore
++++++++++1163
++++++++++A Guadalajara
++++++++++s Kolkata
++++++++++335
++++++++++R Saint Petersburg
++++++++++a Chicago
++++++++++1209 107
++++++++++L
++++++++++r Fukuoka
++++++++++44
++++++++++u Nanjing
++++++++++916
++++++++++R Hong Kong
++++++++++u Guangzhou
++++++++++1211
++++++++++s Atlanta
++++++++++946
++++++++++A Rio de Janeiro
++++++++++u Bangkok
++++++++++575
++++++++++s Saint Petersburg
++++++++++240
++++++++++a Paris
++++++++++47 91
++++++++++u Kolkata
++++++++++656
++++++++++a Rio de Janeiro
++++++++++344 21
++++++++++a Dongguan
++++++++++822 109
++++++++++a Jakarta
++++++++++301 168
++++++++++L
++++++++++R Kolkata
++++++++++L
++++++++++u Fukuoka
++++++++++406
++++++++++A Chennai
++++++++++r Jakarta
++++++++++301
++++++++++A Delhi
++++++++++L
++++++++++u Philadelphia
++++++++++329
++++++++++L
++++++++++a Suzhou
++++++++++410 59
++++++++++u Atlanta
++++++++++1177
++++++++++L
++++++++++a Suzhou
++++++++++1324 112
++++++++++R Jakarta
++++++++++R Chicago
++++++++++a Manila
++++++++++433 124
++++++++++a Bangkok
++++++++++1360 44
++++++++++A Dar es Salaam
++++++++++r Saint Petersburg
++++++++++1227
++++++++++u Dongguan
++++++++++40
++++++++++a Paris
++++++++++53 137
++++++++++a Dongguan
++++++++++477 27
++++++++++a Chennai
++++++++++1271 197
++++++++++R Qingdao
++++++++++r Bangkok
++++++++++1383
++++++++++a Chennai
++++++++++149 23
++++++++++L
++++++++++r Saint Petersburg
++++++++++229
++++++++++a Chennai
++++++++++283 168
++++++++++s Lima
++++++++++1021
++++++++++a Fukuoka
++++++++++273 11
++++++++++A Mexico City
++++++++++a Delhi
++++++++++1276 157
++++++++++a Ho Chi Minh City
++++++++++729 61
++++++++++u Suzhou
++++++++++20
++++++++++r Guangzhou
++++++++++1410
++++++++++L
++++++++++u Bogota
++++++++++980
++++++++++a Chengdu
++++++++++276 132
++++++++++a Rio de Janeiro
++++++++++590 30
++++++++++r Chicago
++++++++++1337
++++++++++s Saint Petersburg
++++++++++1369
++++++++++u Qingdao
++++++++++91
++++++++++u Ho Chi Minh City
++++++++++612
++++++++++R Pune
++++++++++s Dongguan
++++++++++484
++++++++++u Nanjing
++++++++++1410
++++++++++u Chengdu
++++++++++1108
++++++++++a Chennai
++++++++++341 192
++++++++++R Dallas
++++++++++s Dongguan
++++++++++75
++++++++++L
++++++++++a Ho Chi Minh City
++++++++++184 26
++++++++++r Ho Chi Minh City
++++++++++612
++++++++++r Ho Chi Minh City
++++++++++1114
++++++++++a Philadelphia
++++++++++1294 136
++++++++++L
++++++++++r Nanjing
++++++++++1262
+++++++++diff --git a/testSmall.txt b/testSmall.txt
+++++++++new file mode 100644
+++++++++index 0000000..f4ec80b
+++++++++--- /dev/null
++++++++++++ b/testSmall.txt
+++++++++@@ -0,0 +1,405 @@
++++++++++L
++++++++++A Barcelona
++++++++++A Surat
++++++++++A Hong Kong
++++++++++A Paris
++++++++++A Moscow
++++++++++A Chennai
++++++++++A Dalian
++++++++++A Dallas
++++++++++A Johannesburg
++++++++++A Santiago
++++++++++A Tehran
++++++++++A Country
++++++++++A Dalian
++++++++++A Madrid
++++++++++A Lima
++++++++++A Baghdad
++++++++++A London
++++++++++A Manila
++++++++++A Wuhan
++++++++++A Khartoum
++++++++++a Santiago
++++++++++1367 161
++++++++++a Hong Kong
++++++++++1264 40
++++++++++a Country
++++++++++689 165
++++++++++a Dalian
++++++++++1233 85
++++++++++a Surat
++++++++++852 188
++++++++++a Manila
++++++++++1204 151
++++++++++a Manila
++++++++++976 88
++++++++++a London
++++++++++52 159
++++++++++a London
++++++++++931 144
++++++++++a Baghdad
++++++++++971 50
++++++++++a Moscow
++++++++++391 42
++++++++++a Country
++++++++++404 93
++++++++++a Chennai
++++++++++277 87
++++++++++a Moscow
++++++++++877 194
++++++++++a Surat
++++++++++122 42
++++++++++a Baghdad
++++++++++1304 176
++++++++++a Baghdad
++++++++++291 159
++++++++++a Lima
++++++++++859 128
++++++++++a Manila
++++++++++1039 11
++++++++++a Wuhan
++++++++++1059 72
++++++++++a Dallas
++++++++++638 109
++++++++++a Lima
++++++++++1053 174
++++++++++a Dallas
++++++++++1344 172
++++++++++a Barcelona
++++++++++997 102
++++++++++a Moscow
++++++++++15 84
++++++++++a Moscow
++++++++++1256 57
++++++++++a Barcelona
++++++++++69 169
++++++++++a London
++++++++++848 77
++++++++++a Wuhan
++++++++++348 32
++++++++++a Surat
++++++++++146 190
++++++++++a Moscow
++++++++++374 85
++++++++++a Khartoum
++++++++++166 145
++++++++++a Manila
++++++++++1349 35
++++++++++a Country
++++++++++659 100
++++++++++a Dalian
++++++++++460 88
++++++++++a Dalian
++++++++++542 56
++++++++++a Paris
++++++++++298 48
++++++++++a Wuhan
++++++++++906 106
++++++++++a Chennai
++++++++++446 195
++++++++++a Khartoum
++++++++++755 86
++++++++++a Madrid
++++++++++255 162
++++++++++a Khartoum
++++++++++774 189
++++++++++a Manila
++++++++++753 82
++++++++++a Baghdad
++++++++++56 162
++++++++++a Dalian
++++++++++1259 196
++++++++++a Hong Kong
++++++++++97 2
++++++++++a Manila
++++++++++1084 43
++++++++++a Paris
++++++++++518 29
++++++++++a Moscow
++++++++++710 196
++++++++++a Tehran
++++++++++375 108
++++++++++a Chennai
++++++++++836 14
++++++++++a Santiago
++++++++++1186 103
++++++++++a Madrid
++++++++++815 186
++++++++++a Barcelona
++++++++++761 55
++++++++++a Paris
++++++++++1223 86
++++++++++a Hong Kong
++++++++++190 8
++++++++++a Manila
++++++++++1331 53
++++++++++a Country
++++++++++1277 0
++++++++++a Madrid
++++++++++269 7
++++++++++a Santiago
++++++++++94 189
++++++++++s Barcelona
++++++++++770
++++++++++s Wuhan
++++++++++1064
++++++++++s Santiago
++++++++++1375
++++++++++s Dalian
++++++++++1241
++++++++++s London
++++++++++851
++++++++++s Moscow
++++++++++718
++++++++++s London
++++++++++56
++++++++++s Hong Kong
++++++++++1273
++++++++++s Chennai
++++++++++841
++++++++++s Khartoum
++++++++++167
++++++++++s Surat
++++++++++853
++++++++++s Moscow
++++++++++1259
++++++++++s Baghdad
++++++++++984
++++++++++s Hong Kong
++++++++++102
++++++++++s Manila
++++++++++978
++++++++++s Madrid
++++++++++256
++++++++++s Barcelona
++++++++++1011
++++++++++s Dalian
++++++++++553
++++++++++s Dallas
++++++++++646
++++++++++s Wuhan
++++++++++354
++++++++++s London
++++++++++939
++++++++++s Barcelona
++++++++++769
++++++++++s Hong Kong
++++++++++1277
++++++++++s Santiago
++++++++++1187
++++++++++s Moscow
++++++++++393
++++++++++s Country
++++++++++661
++++++++++s Surat
++++++++++860
++++++++++s Manila
++++++++++1355
++++++++++s Country
++++++++++691
++++++++++s Moscow
++++++++++19
++++++++++s Country
++++++++++667
++++++++++s Manila
++++++++++977
++++++++++s Surat
++++++++++156
++++++++++s Barcelona
++++++++++1004
++++++++++s Dallas
++++++++++638
++++++++++s Moscow
++++++++++399
++++++++++s Dalian
++++++++++1264
++++++++++s Country
++++++++++1280
++++++++++s Wuhan
++++++++++907
++++++++++s Madrid
++++++++++828
++++++++++s Santiago
++++++++++1375
++++++++++s Paris
++++++++++311
++++++++++s Chennai
++++++++++456
++++++++++s Madrid
++++++++++825
++++++++++s Madrid
++++++++++823
++++++++++s Chennai
++++++++++460
++++++++++s London
++++++++++937
++++++++++s Baghdad
++++++++++1307
++++++++++s Wuhan
++++++++++349
++++++++++s Country
++++++++++691
++++++++++s Dalian
++++++++++550
++++++++++s Manila
++++++++++1353
++++++++++s Baghdad
++++++++++61
++++++++++s Moscow
++++++++++1256
++++++++++s Surat
++++++++++129
++++++++++s Khartoum
++++++++++172
++++++++++s Moscow
++++++++++882
++++++++++s Baghdad
++++++++++977
++++++++++s Surat
++++++++++134
++++++++++s Hong Kong
++++++++++1273
++++++++++s Country
++++++++++659
++++++++++s Khartoum
++++++++++777
++++++++++s Manila
++++++++++1040
++++++++++s Wuhan
++++++++++1059
++++++++++s Surat
++++++++++865
++++++++++s Country
++++++++++408
++++++++++s Baghdad
++++++++++973
++++++++++s Paris
++++++++++1226
++++++++++s Santiago
++++++++++100
++++++++++s Paris
++++++++++1227
++++++++++s London
++++++++++940
++++++++++s Moscow
++++++++++1269
++++++++++s Khartoum
++++++++++774
++++++++++s Barcelona
++++++++++69
++++++++++s Manila
++++++++++977
++++++++++s Wuhan
++++++++++354
++++++++++s London
++++++++++942
++++++++++s Barcelona
++++++++++763
++++++++++s Moscow
++++++++++18
++++++++++s Hong Kong
++++++++++204
++++++++++s Manila
++++++++++767
++++++++++s London
++++++++++56
++++++++++s Moscow
++++++++++386
++++++++++s Santiago
++++++++++108
++++++++++s Manila
++++++++++1339
++++++++++s Manila
++++++++++1040
++++++++++s Santiago
++++++++++1187
++++++++++s Country
++++++++++1288
++++++++++s Wuhan
++++++++++1062
++++++++++s Baghdad
++++++++++295
++++++++++s Madrid
++++++++++264
++++++++++s Chennai
++++++++++457
++++++++++s Surat
++++++++++866
++++++++++s Moscow
++++++++++378
++++++++++s Dalian
++++++++++1268
++++++++++s Manila
++++++++++1351
++++++++++s Dallas
++++++++++1354
++++++++++s Paris
++++++++++301
++++++++++s Manila
++++++++++976
++++++++++s Moscow
++++++++++398
++++++++++A Dongguan
++++++++++u Surat
++++++++++852
++++++++++R Barcelona
++++++++++A Osaka
++++++++++u Santiago
++++++++++1367
++++++++++s Dalian
++++++++++468
++++++++++r Baghdad
++++++++++56
++++++++++L
++++++++++a Madrid
++++++++++451 154
++++++++++A Country
++++++++++A Belo Horizonte
++++++++++r Baghdad
++++++++++291
++++++++++a Belo Horizonte
++++++++++1079 103
++++++++++L
++++++++++s Wuhan
++++++++++352
++++++++++r Baghdad
++++++++++1304
++++++++++r Surat
++++++++++146
++++++++++R Baghdad
++++++++++r Baghdad
++++++++++971
++++++++++s Manila
++++++++++989
++++++++++r Surat
++++++++++122
++++++++++u Dallas
++++++++++1344
++++++++++A Jakarta
++++++++++a Surat
++++++++++1137 83
++++++++++u Manila
++++++++++753
++++++++++s Lima
++++++++++865
++++++++++L
++++++++++s Dalian
++++++++++1241
++++++++++r Manila
++++++++++1204
++++++++++u Santiago
++++++++++1186
++++++++++A Dhaka
++++++++++L
++++++++++R Dongguan
++++++++++s Lima
++++++++++862
++++++++++s Moscow
++++++++++387
++++++++++L
++++++++++A London
++++++++++R Madrid
++++++++++a Jakarta
++++++++++261 84
++++++++++a Manila
++++++++++360 171
++++++++diff --git a/test.sh b/test.sh
++++++++index f8ecbf4..1753085 100755
++++++++--- a/test.sh
+++++++++++ b/test.sh
++++++++@@ -262,7 +262,7 @@ EOF
++++++++     echo "FAIL"
++++++++     [[ -n $VERBOSE ]] && echo "Your program produced:"
++++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++-    [[ -n $VERBOSE ]] && echo "$answers"    
+++++++++    [[ -n $VERBOSE ]] && echo "$answer"    
++++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++     [[ -n $VERBOSE ]] && echo "Output should have been:"
++++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++
+++++++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++ Date:   Mon Sep 28 22:04:59 2020 -0400
+++++++
++++++ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++ Date:   Thu Oct 1 18:48:16 2020 -0400
++++++
+++++ commit da6661f7aace13f7460f1854b7f421ec09bce194
+++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++ Date:   Thu Oct 1 20:00:10 2020 -0400
+++++
++++ commit 1fc06886442458df6df848e0f90ac6e155b1d853
++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++ Date:   Fri Oct 2 10:20:31 2020 -0400
++++
+++ commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
+++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++ Date:   Fri Oct 2 11:01:38 2020 -0400
+++
++ commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Fri Oct 2 15:36:11 2020 -0400
++
+ commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Fri Oct 2 16:23:51 2020 -0400
+
 commit 1493f977f82c9be3c010cec6e5cd7ae2e3fd4fb5
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Sun Oct 4 10:13:37 2020 -0400

commit 3703ab8ace9011a95daec4cc521f8a76a77233e7
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Sun Oct 4 11:41:16 2020 -0400

    working on fixing free for edge cases

diff --git a/assignment-3.c b/assignment-3.c
index bf54b5c..96aefa5 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -11,8 +11,8 @@
 
 // Limit constants
 #define MAX_CITY_NAME_LEN 20
-#define MAX_FLIGHTS_PER_CITY 3
-#define MAX_DEFAULT_SCHEDULES 2
+#define MAX_FLIGHTS_PER_CITY 5 //3
+#define MAX_DEFAULT_SCHEDULES 50 //2
 
 // Time definitions
 #define TIME_MIN 0
@@ -431,12 +431,44 @@ struct flight_schedule * flight_schedule_allocate(void){
 //flight schedule free
 //takes schedule off active list, resets it, then places the node back on free list
 void flight_schedule_free(struct flight_schedule *fs){
+
+
+
+if (fs->next != NULL && fs == flight_schedules_active) { // firtst node with others
+  flight_schedules_active = fs->next;
+  flight_schedules_active->prev = NULL;
+}
+if (fs == flight_schedules_active){   //only one node
+  flight_schedules_active == NULL;
+
+}
+if (fs->next == NULL){ // last
+  fs->prev->next == NULL;
+}
+else{
+  fs->prev->next = fs->next;
+  fs->next->prev = fs->prev;
+}
+flight_schedule_reset(fs);
+
+if (flight_schedules_free == NULL){
+  flight_schedules_free = fs;
+}
+else{
+  flight_schedules_free->prev = fs;
+  fs->next = flight_schedules_free;
+  flight_schedules_free = fs;
+  fs->prev = NULL;
+}
+
+
+/*
   flight_schedules_active = flight_schedules_active->next;
   flight_schedule_reset(fs);
   fs->next = flight_schedules_free;
   flight_schedules_free = fs;
   fs->next->prev = fs;
-
+*/
 
   /*int counter = 0;
   struct flight_schedule *temp = flight_schedules_active;
@@ -517,9 +549,10 @@ void flight_schedule_remove(city_t city){
    msg_city_bad(city);
   }
   else{
+    //printf("removed");
     flight_schedule_free(flight_schedule_find(city));
   }
-  
+  printf("removed");
 }
 
 
@@ -635,26 +668,28 @@ void flight_schedule_remove_flight(city_t city){
 
   int *t;
   time_get(t); //if 1 continue; else tell user
-   if(time_get(t) == 0) {
-     return;
-   }
-  int c =15;
-  flight_capacity_get(&c); 
-  if(flight_capacity_get(&c) == 0){
-      return;
+  int found = 0;
+  if (temp = NULL){
+    msg_city_bad(city);
   }
-  
-  struct flight *flights;
-  flights = temp->flights;
+  else{
+  struct flight *fl;
+  fl = temp->flights;
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
-    if(flights[i].time == *t){
-      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
-      flights[i].capacity = 0;  
-      flights[i].available = 0;
+    if(fl[i].time == *t){
+      fl[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
+      fl[i].capacity = 0;  
+      fl[i].available = 0;
+      found = 1;
       break;
     }
   }
+  if (found == 0){
+    msg_flight_bad_time();
+  }
+  }
+
 }
 
 
diff --git a/gitlog.txt b/gitlog.txt
index 5a29c1f..a0b8991 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4746 @@
+commit 1493f977f82c9be3c010cec6e5cd7ae2e3fd4fb5
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Sun Oct 4 10:13:37 2020 -0400
+
+    working on remove
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 8031b9d..bf54b5c 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -512,11 +512,14 @@ void flight_schedule_add(city_t city){ //should this call get city
+ 
+ 
+ void flight_schedule_remove(city_t city){
+-  struct flight_schedule *temp = flight_schedule_find(city);
+-  //if(temp == NULL){
+-   
+-  //}
+-  flight_schedule_free(temp);
++  //struct flight_schedule *temp = flight_schedule_find(city);
++  if(flight_schedule_find(city) == NULL){
++   msg_city_bad(city);
++  }
++  else{
++    flight_schedule_free(flight_schedule_find(city));
++  }
++  
+ }
+ 
+ 
+diff --git a/gitlog.txt b/gitlog.txt
+index 02b9e97..5a29c1f 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4707 @@
++commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Oct 2 16:23:51 2020 -0400
++
++    add_flight working properly
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 473a053..8031b9d 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -393,8 +393,11 @@ struct flight_schedule * flight_schedule_allocate(void){
++   struct flight_schedule *temp =  flight_schedules_free;
++   struct flight_schedule *fs;
++   if (flight_schedules_free != NULL){
++-    flight_schedules_free = temp->next;
++-    flight_schedules_free->prev = NULL;
+++    flight_schedules_free = temp->next; //make sure 
+++    if(temp->next != NULL) {
+++      flight_schedules_free->prev = NULL;
+++    }
+++    
++   }
++ 
++ 
++@@ -528,13 +531,31 @@ void flight_schedule_listAll(void){
++ }
++ 
++ void flight_schedule_list(city_t city){
++-  struct flight_schedule *temp = flight_schedules_active; 
+++  if(flight_schedule_find(city) == NULL){
+++    msg_city_bad(city);
+++    return;
+++  }
+++  struct flight_schedule *fs = flight_schedule_find(city);
+++  msg_city_flights(city);
+++  for(int j =0; j < MAX_FLIGHTS_PER_CITY; j++){
+++    if(fs->flights[j].time != -1){
+++      msg_flight_info(fs->flights[j].time, fs->flights[j].available, fs->flights[j].capacity);
+++    }
+++  }
+++  printf("\n");
+++
+++
+++
+++
+++  /*struct flight_schedule *temp = flight_schedules_active; 
+++  msg_city_flights(city);
++   while(temp != NULL){
++     if (strcmp(city,temp->destination) == 0){
++       printf("%s\n", temp->destination); //displaying memory address
++     }
++     temp = temp->next;
++   }
+++  */
++ }
++ 
++ void flight_schedule_add_flight(city_t city){
++@@ -557,16 +578,18 @@ void flight_schedule_add_flight(city_t city){
++     msg_city_max_flights_reached(city);
++   }
++   else{
++-    int c = (temp->flights[i].capacity); // look for value of c 
++-    
++-    flight_capacity_get(&c);
++-    printf("ADD_FLIGHT %d", c);
++-    flights[i].available = c; 
+++
++     int t = (flights[i].time);
++     
++     time_get(&t);
++-    printf("ADD FLIGHT 2 %d", t);
++-
+++    //printf("ADD FLIGHT time %d", t);
+++    temp->flights[i].time = t;
+++    int c = (temp->flights[i].capacity); // look for value of c 
+++    
+++    flight_capacity_get(&c);
+++    //printf("ADD_FLIGHT cap %d", c);
+++    temp->flights[i].available = c; 
+++    temp->flights[i].capacity = c;
++   }
++   /*
++   int *t;
++@@ -644,7 +667,7 @@ void flight_schedule_schedule_seat(city_t city) {
++      return;
++    }
++ 
++-  int nearest = 0;
+++  int nearest = 0; 
++   int position = 0;
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++diff --git a/gitlog.txt b/gitlog.txt
++index 9868705..02b9e97 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4606 @@
+++commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Oct 2 15:36:11 2020 -0400
+++
+++    debugging
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 09d6332..473a053 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -11,8 +11,8 @@
+++ 
+++ // Limit constants
+++ #define MAX_CITY_NAME_LEN 20
+++-#define MAX_FLIGHTS_PER_CITY 5
+++-#define MAX_DEFAULT_SCHEDULES 50
++++#define MAX_FLIGHTS_PER_CITY 3
++++#define MAX_DEFAULT_SCHEDULES 2
+++ 
+++ // Time definitions
+++ #define TIME_MIN 0
+++@@ -403,7 +403,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+++   if(flight_schedules_active != NULL){
+++     flight_schedules_active->prev = temp;
+++   }
+++-   flight_schedules_active = temp;
++++  flight_schedules_active = temp;
+++ 
+++   /*
+++   flight_schedules_free-> prev->next = flight_schedules_active;
+++@@ -422,7 +422,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+++   //flight_schedules_active = temp;
+++   temp = flight_schedules_active;
+++   */
+++-  return(temp); //return temp?
++++  return(temp); //return temp temp could be null resulting in error
+++ }
+++ 
+++ //flight schedule free
+++@@ -478,18 +478,18 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++ 
+++   while(temp != NULL){
+++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++-      break; //return(temp);
++++      return(temp);
+++     }
+++     temp = temp->next;
+++   }
+++-  return (temp); //this might return null 
++++ //this might return null 
+++ }
+++ 
+++ 
+++ void flight_schedule_add(city_t city){ //should this call get city
+++ 
+++   //first cheeck to see if city exists
+++-  if (flight_schedules_free ==NULL){
++++  if (flight_schedules_free == NULL){
+++     msg_schedule_no_free();
+++   }
+++ 
+++@@ -510,9 +510,9 @@ void flight_schedule_add(city_t city){ //should this call get city
+++ 
+++ void flight_schedule_remove(city_t city){
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++-  if(temp == NULL){
+++-
+++-  }
++++  //if(temp == NULL){
++++   
++++  //}
+++   flight_schedule_free(temp);
+++ }
+++ 
+++@@ -540,7 +540,35 @@ void flight_schedule_list(city_t city){
+++ void flight_schedule_add_flight(city_t city){
+++   //flight_schedule_add(city);
+++   struct flight_schedule *temp = flight_schedule_find(city);
++++  struct flight *flights;
++++  flights = temp->flights;
++++  int full = 0;
++++  int i =0;
++++
++++  while(temp->flights[i].time != -1){
++++    
++++    if (i == MAX_FLIGHTS_PER_CITY){
++++      full = 1;
++++      break;
++++    }
++++    i++;
++++  }
++++  if(full){
++++    msg_city_max_flights_reached(city);
++++  }
++++  else{
++++    int c = (temp->flights[i].capacity); // look for value of c 
++++    
++++    flight_capacity_get(&c);
++++    printf("ADD_FLIGHT %d", c);
++++    flights[i].available = c; 
++++    int t = (flights[i].time);
++++    
++++    time_get(&t);
++++    printf("ADD FLIGHT 2 %d", t);
+++ 
++++  }
++++  /*
+++   int *t;
+++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++   
+++@@ -557,8 +585,8 @@ void flight_schedule_add_flight(city_t city){
+++       return;
+++   }
+++ 
+++-  struct flight *flights;
+++-  flights = temp->flights;
++++  //struct flight *flights;
++++  //flights = temp->flights;
+++   //flights[i]
+++   //loop thru flights until open flight then add flight
+++ 
+++@@ -570,6 +598,7 @@ void flight_schedule_add_flight(city_t city){
+++     }
+++   }
+++   //else return that it failed
++++  */
+++ }
+++ 
+++ 
+++@@ -594,7 +623,7 @@ void flight_schedule_remove_flight(city_t city){
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++     if(flights[i].time == *t){
+++-      flights[i].time = -1;//was flights[i] will this change correct one?
++++      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
+++       flights[i].capacity = 0;  
+++       flights[i].available = 0;
+++       break;
+++diff --git a/gitlog.txt b/gitlog.txt
+++index 3fd9781..9868705 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -1,3 +1,4459 @@
++++commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Fri Oct 2 11:01:38 2020 -0400
++++
++++    working on debugging
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index dceff55..09d6332 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
++++   }
++++    flight_schedules_active = temp;
++++ 
++++-
++++-
++++-
++++-
++++-
++++   /*
++++   flight_schedules_free-> prev->next = flight_schedules_active;
++++   
++++@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++     }
++++     temp = temp->next;
++++   }
++++-  return (temp);
+++++  return (temp); //this might return null 
++++ }
++++ 
++++ 
++++ void flight_schedule_add(city_t city){ //should this call get city
++++ 
++++   //first cheeck to see if city exists
+++++  if (flight_schedules_free ==NULL){
+++++    msg_schedule_no_free();
+++++  }
+++++
++++   struct flight_schedule *fs = flight_schedule_find(city);
++++   if (fs != NULL)  {
++++     msg_city_exists(city);
++++@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
++++   
++++   if(time_get(t) == 0) { //or just t
++++     msg_flight_bad_time();      
++++-    return;
+++++    return; //maybe use go to end
++++    }
++++ 
++++-  int *c;
++++-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++++  int c = 15;
+++++  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
++++   
++++-  if (flight_capacity_get(c) == 0){ //show message plane is full
++++-      msg_flight_no_seats();
+++++  if (flight_capacity_get(&c) == 0){ //show message plane is full
+++++      //msg_flight_no_seats();
++++       return;
++++   }
++++ 
++++@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++     if(flights[i].time == -1){
++++       flights[i].time = *t;//was flights[i] will this change correct one?
++++-      flights[i].capacity = *c;
+++++      flights[i].capacity = c;
++++       break;
++++     }
++++   }
++++   //else return that it failed
+++++}
++++ 
++++ 
++++-}
++++ 
++++ void flight_schedule_remove_flight(city_t city){
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
++++    if(time_get(t) == 0) {
++++      return;
++++    }
++++-  int *c;
++++-  flight_capacity_get(c); 
++++-  if(flight_capacity_get(c) == 0){
+++++  int c =15;
+++++  flight_capacity_get(&c); 
+++++  if(flight_capacity_get(&c) == 0){
++++       return;
++++   }
++++   
++++@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
++++   int *t;
++++   time_get(t);
++++   if(time_get(t) == 0) {
+++++     msg_flight_bad_time();
++++      return;
++++    }
++++ 
++++diff --git a/gitlog.txt b/gitlog.txt
++++index 1364b9f..3fd9781 100644
++++--- a/gitlog.txt
+++++++ b/gitlog.txt
++++@@ -1,3 +1,4351 @@
+++++commit 1fc06886442458df6df848e0f90ac6e155b1d853
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Fri Oct 2 10:20:31 2020 -0400
+++++
+++++    working on add_flight
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index e50b45e..dceff55 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
+++++ 
+++++ void flight_schedule_remove(city_t city){
+++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++  if(temp == NULL){
++++++
++++++  }
+++++   flight_schedule_free(temp);
+++++ }
+++++ 
+++++@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
+++++ }
+++++ 
+++++ void flight_schedule_add_flight(city_t city){
+++++-  flight_schedule_add(city);
++++++  //flight_schedule_add(city);
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++ 
+++++-
+++++   int *t;
+++++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++++   
+++++   if(time_get(t) == 0) { //or just t
+++++-     return;
++++++    msg_flight_bad_time();      
++++++    return;
+++++    }
+++++ 
+++++   int *c;
+++++   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++++   
+++++-  if (flight_capacity_get(c) == 0){
++++++  if (flight_capacity_get(c) == 0){ //show message plane is full
++++++      msg_flight_no_seats();
+++++       return;
+++++   }
+++++ 
+++++@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
+++++   int *c;
+++++   flight_capacity_get(c); 
+++++   if(flight_capacity_get(c) == 0){
+++++-
++++++      return;
+++++   }
+++++   
+++++   struct flight *flights;
+++++diff --git a/gitlog.txt b/gitlog.txt
+++++index 29ef0ec..1364b9f 100644
+++++--- a/gitlog.txt
++++++++ b/gitlog.txt
+++++@@ -1,3 +1,4286 @@
++++++commit da6661f7aace13f7460f1854b7f421ec09bce194
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Thu Oct 1 20:00:10 2020 -0400
++++++
++++++    fixed aloocate, add and list
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 6644548..e50b45e 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
++++++ //returns pointer to updated flight schedule
++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++ 
++++++-  struct flight_schedule *temp;// =  flight_schedules_free;
+++++++  struct flight_schedule *temp =  flight_schedules_free;
+++++++  struct flight_schedule *fs;
+++++++  if (flight_schedules_free != NULL){
+++++++    flight_schedules_free = temp->next;
+++++++    flight_schedules_free->prev = NULL;
+++++++  }
+++++++
+++++++
+++++++  temp->next = flight_schedules_active;
+++++++  //if active not null set active prev to temp
+++++++  if(flight_schedules_active != NULL){
+++++++    flight_schedules_active->prev = temp;
+++++++  }
+++++++   flight_schedules_active = temp;
+++++++
+++++++
+++++++
+++++++
++++++ 
++++++ 
++++++-  flight_schedules_free = flight_schedules_free->next;
+++++++  /*
++++++   flight_schedules_free-> prev->next = flight_schedules_active;
++++++   
++++++   //temp->next = flight_schedules_active;
++++++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++++++ 
++++++   //flight_schedules_active = temp;
++++++   temp = flight_schedules_active;
+++++++  */
++++++   return(temp); //return temp?
++++++ }
++++++ 
++++++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++++ 
++++++   while(temp != NULL){
++++++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++++-      return(temp);
+++++++      break; //return(temp);
++++++     }
++++++     temp = temp->next;
++++++   }
+++++++  return (temp);
++++++ }
++++++ 
++++++ 
++++++ void flight_schedule_add(city_t city){ //should this call get city
+++++++
+++++++  //first cheeck to see if city exists
+++++++  struct flight_schedule *fs = flight_schedule_find(city);
+++++++  if (fs != NULL)  {
+++++++    msg_city_exists(city);
+++++++  }
+++++++
+++++++  if (fs == NULL){
++++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++-  
++++++-  //if (flight_schedule_find == city)  {
++++++-  //  msg_city_exists(city);
++++++- // } //
++++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++   
++++++   //p->destination = ch; 
++++++ 
+++++++  }
++++++ }
++++++ 
++++++ 
++++++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
++++++ 
++++++ 
++++++ void flight_schedule_listAll(void){
++++++-  struct flight_schedule *temp = flight_schedules_active;
+++++++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
++++++   while(temp != NULL){
++++++-    printf("%p", temp); // print temp is disaplying memory address
+++++++    printf("%s\n", temp->destination); // print temp is disaplying memory address
++++++     temp = temp->next;
++++++   }
++++++ 
++++++ }
++++++ 
++++++ void flight_schedule_list(city_t city){
++++++-  struct flight_schedule *temp = flight_schedules_active;
+++++++  struct flight_schedule *temp = flight_schedules_active; 
++++++   while(temp != NULL){
++++++     if (strcmp(city,temp->destination) == 0){
++++++-      printf("%p", *temp); //displaying memory address
+++++++      printf("%s\n", temp->destination); //displaying memory address
++++++     }
++++++     temp = temp->next;
++++++   }
++++++diff --git a/gitlog.txt b/gitlog.txt
++++++index c3e37f7..29ef0ec 100644
++++++--- a/gitlog.txt
+++++++++ b/gitlog.txt
++++++@@ -1,3 +1,4170 @@
+++++++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Thu Oct 1 18:48:16 2020 -0400
+++++++
+++++++    editing and debugging
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 881c536..6644548 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++++ 
+++++++   // Loop through the Array connecting them
+++++++   // as a linear doubly linked list
++++++++  if (n == 1) {
++++++++    flight_schedule_reset(&array[0]);
++++++++    array[0].next = NULL;
++++++++    array[0].prev = NULL;
++++++++    flight_schedules_free = &array[0];
++++++++    return;
++++++++  }
++++++++
++++++++  flight_schedule_reset(&array[0]);
++++++++  array[0].next = &array[1];
+++++++   array[0].prev = NULL;
+++++++-  for (int i=0; i<n-1; i++) {
++++++++
++++++++  for (int i=1; i<n-1; i++) {
+++++++     flight_schedule_reset(&array[i]);
+++++++     array[i].next = &array[i+1];
+++++++-    array[i+1].prev = &array[i];
++++++++    array[i].prev = &array[i-1];
+++++++   }
++++++++
+++++++   // Takes care of last node.  
+++++++   flight_schedule_reset(&array[n-1]); // reset clears all fields
+++++++   array[n-1].next = NULL;
+++++++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
+++++++ //returns pointer to updated flight schedule
+++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++ 
+++++++-  struct flight_schedule *temp =  flight_schedules_free;
++++++++  struct flight_schedule *temp;// =  flight_schedules_free;
++++++++
++++++++
+++++++   flight_schedules_free = flight_schedules_free->next;
++++++++  flight_schedules_free-> prev->next = flight_schedules_active;
++++++++  
++++++++  //temp->next = flight_schedules_active;
++++++++  flight_schedules_active = flight_schedules_free->prev;
+++++++   flight_schedules_free->prev = NULL;
+++++++-  temp->next = flight_schedules_active;
+++++++-
+++++++-  flight_schedules_active = temp;
+++++++-  flight_schedules_active->next->prev = flight_schedules_active;
++++++++  
+++++++   //temp->prev = NULL;
+++++++   //struct flight_schedule *temp2 = flight_schedules_active
+++++++-  
+++++++-  return(flight_schedules_active);
++++++++
++++++++  if(flight_schedules_active -> next != NULL){
++++++++    flight_schedules_active->next->prev = flight_schedules_active;
++++++++  }
++++++++
++++++++  //flight_schedules_active = temp;
++++++++  temp = flight_schedules_active;
++++++++  return(temp); //return temp?
+++++++ }
+++++++ 
+++++++ //flight schedule free
+++++++ //takes schedule off active list, resets it, then places the node back on free list
+++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++-  int counter = 0;
++++++++  flight_schedules_active = flight_schedules_active->next;
++++++++  flight_schedule_reset(fs);
++++++++  fs->next = flight_schedules_free;
++++++++  flight_schedules_free = fs;
++++++++  fs->next->prev = fs;
++++++++
++++++++
++++++++  /*int counter = 0;
+++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++   while(temp != NULL) {
+++++++     if(temp == fs){ //use flight schedule find instead
+++++++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     temp = temp->next;
+++++++     counter++;
+++++++   }
+++++++-  
+++++++   if (counter == 0){
+++++++     flight_schedules_active = temp->next;
+++++++     flight_schedules_active->prev = NULL;
+++++++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     //flight_schedule_reset(temp);
+++++++ 
+++++++   }
+++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++++++-    temp->prev->next = temp->next;
++++++++  else{ 
++++++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
+++++++     temp->next->prev = temp->prev;
+++++++     temp->next = NULL;
+++++++     temp->prev = NULL;
+++++++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     flight_schedules_free = temp;
+++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++   }
+++++++-  else{
+++++++-    temp->prev = NULL;
+++++++-    flight_schedules_active->prev->next = NULL;
+++++++-
+++++++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++++-
+++++++-    temp->next = flight_schedules_free;
+++++++-    flight_schedules_free = temp;
+++++++-    flight_schedules_free->next->prev = flight_schedules_free;
+++++++-    
+++++++-  }
++++++++}
++++++++*/
+++++++ }
+++++++ 
+++++++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++++++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++++++ void flight_schedule_add(city_t city){ //should this call get city
+++++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++++   
+++++++-  if (flight_schedule_find) {
+++++++-    msg_city_exists(city);
+++++++-  }
++++++++  //if (flight_schedule_find == city)  {
++++++++  //  msg_city_exists(city);
++++++++ // } //
+++++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++++   
+++++++   //p->destination = ch; 
+++++++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
+++++++ void flight_schedule_listAll(void){
+++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++   while(temp != NULL){
+++++++-    printf("%p", &temp);
++++++++    printf("%p", temp); // print temp is disaplying memory address
+++++++     temp = temp->next;
+++++++   }
+++++++ 
+++++++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
+++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++   while(temp != NULL){
+++++++     if (strcmp(city,temp->destination) == 0){
+++++++-      printf("%p", &temp);
++++++++      printf("%p", *temp); //displaying memory address
+++++++     }
+++++++     temp = temp->next;
+++++++   }
+++++++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
+++++++ 
+++++++   int *t;
+++++++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++++++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++++++   
+++++++-  if (time == 1 || capacity == 1 ){
+++++++-      return 1;
++++++++  if(time_get(t) == 0) { //or just t
++++++++     return;
++++++++   }
++++++++
++++++++  int *c;
++++++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++++++  
++++++++  if (flight_capacity_get(c) == 0){
++++++++      return;
+++++++   }
+++++++ 
+++++++   struct flight *flights;
+++++++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
+++++++ 
+++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++     if(flights[i].time == -1){
+++++++-      flights[i].time = time;//was flights[i] will this change correct one?
+++++++-      flights[i].capacity = capacity;
++++++++      flights[i].time = *t;//was flights[i] will this change correct one?
++++++++      flights[i].capacity = *c;
+++++++       break;
+++++++     }
+++++++   }
+++++++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
+++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++  //idk if this is the right time to call or even need too
+++++++ 
+++++++-
+++++++-
+++++++   int *t;
+++++++   time_get(t); //if 1 continue; else tell user
+++++++    if(time_get(t) == 0) {
+++++++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
+++++++    }
+++++++   int *c;
+++++++   flight_capacity_get(c); 
++++++++  if(flight_capacity_get(c) == 0){
++++++++
++++++++  }
+++++++   
+++++++   struct flight *flights;
+++++++   flights = temp->flights;
+++++++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
+++++++ 
+++++++   struct flight *flights;
+++++++   flights = temp->flights;
++++++++  int *t;
++++++++  time_get(t);
++++++++  if(time_get(t) == 0) {
++++++++     return;
++++++++   }
+++++++ 
+++++++-  int time = time_get();
+++++++   int nearest = 0;
+++++++   int position = 0;
+++++++ 
+++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++-    if(flights[i].time >= time){
+++++++-      if(flights[i].time - nearest <= nearest - time){
++++++++    if(flights[i].time >= *t){
++++++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
+++++++         nearest = flights[i].time;
+++++++         position = i;
+++++++       }
+++++++@@ -573,18 +602,21 @@ flights[position].available--;
+++++++   
+++++++ }
+++++++ 
+++++++-flight_schedule_unschedule_seat(city_t city){
++++++++ void flight_schedule_unschedule_seat(city_t city){
+++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++ 
+++++++   struct flight *flights;
+++++++   flights = temp->flights;
+++++++-
+++++++-  int time = time_get();
++++++++  int *t;
++++++++  time_get(t);
++++++++  if(time_get(t) == 0) {
++++++++     return;
++++++++   }
+++++++   int nearest = 0;
+++++++   int position = 0;
+++++++ 
+++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++-    if(flights[i].time == time){
++++++++    if(flights[i].time == *t){ //origrinally was time 
+++++++      flights[i].available--;
+++++++     }
+++++++   }
+++++++diff --git a/gitlog.txt b/gitlog.txt
+++++++index e69de29..c3e37f7 100644
+++++++--- a/gitlog.txt
++++++++++ b/gitlog.txt
+++++++@@ -0,0 +1,3895 @@
++++++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 22:04:59 2020 -0400
++++++++
++++++++    finshing up scheduling/unscheduling and debuggin
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 322ef6c..881c536 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
++++++++   flight_schedule_add(city);
++++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++++ 
++++++++-  time_t time = time_get();
++++++++-  int capacity = flight_capacity_get();
+++++++++
+++++++++  int *t;
+++++++++  time_get(t); //do this then check if t is 0 to see if valid or not 
+++++++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++++++   
++++++++   if (time == 1 || capacity == 1 ){
++++++++       return 1;
++++++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
++++++++ 
++++++++ 
++++++++ 
++++++++-  time_t time = time_get();
++++++++-  int capacity = flight_capacity_get(); 
+++++++++  int *t;
+++++++++  time_get(t); //if 1 continue; else tell user
+++++++++   if(time_get(t) == 0) {
+++++++++     return;
+++++++++   }
+++++++++  int *c;
+++++++++  flight_capacity_get(c); 
++++++++   
++++++++   struct flight *flights;
++++++++   flights = temp->flights;
++++++++ 
++++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++-    if(flights[i].time == time){
+++++++++    if(flights[i].time == *t){
++++++++       flights[i].time = -1;//was flights[i] will this change correct one?
++++++++       flights[i].capacity = 0;  
++++++++       flights[i].available = 0;
++++++++
++++++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 21:51:04 2020 -0400
++++++++
++++++++    schedule and unschedule seat
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 6db86b9..322ef6c 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
++++++++ 
++++++++ 
++++++++ void flight_schedule_schedule_seat(city_t city) {
+++++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++++
+++++++++  struct flight *flights;
+++++++++  flights = temp->flights;
+++++++++
+++++++++  int time = time_get();
+++++++++  int nearest = 0;
+++++++++  int position = 0;
+++++++++
+++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++++    if(flights[i].time >= time){
+++++++++      if(flights[i].time - nearest <= nearest - time){
+++++++++        nearest = flights[i].time;
+++++++++        position = i;
+++++++++      }
+++++++++    }
+++++++++  }
+++++++++flights[position].available--;
++++++++   
++++++++-}
++++++++\ No newline at end of file
+++++++++}
+++++++++
+++++++++flight_schedule_unschedule_seat(city_t city){
+++++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++++
+++++++++  struct flight *flights;
+++++++++  flights = temp->flights;
+++++++++
+++++++++  int time = time_get();
+++++++++  int nearest = 0;
+++++++++  int position = 0;
+++++++++
+++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++++    if(flights[i].time == time){
+++++++++     flights[i].available--;
+++++++++    }
+++++++++  }
+++++++++}
+++++++++
++++++++
++++++++commit 4490dcc205f2959c8fa299368be096d99f756e27
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 21:23:54 2020 -0400
++++++++
++++++++    continuing work on add and remove flights
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index d9c99ff..6db86b9 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
++++++++   flight_schedule_add(city);
++++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++++ 
++++++++-  int time = time_get();
+++++++++  time_t time = time_get();
++++++++   int capacity = flight_capacity_get();
++++++++   
++++++++   if (time == 1 || capacity == 1 ){
++++++++       return 1;
++++++++   }
++++++++ 
++++++++-  temp->flight->flights[];
+++++++++  struct flight *flights;
+++++++++  flights = temp->flights;
+++++++++  //flights[i]
+++++++++  //loop thru flights until open flight then add flight
++++++++ 
+++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++++    if(flights[i].time == -1){
+++++++++      flights[i].time = time;//was flights[i] will this change correct one?
+++++++++      flights[i].capacity = capacity;
+++++++++      break;
+++++++++    }
+++++++++  }
+++++++++  //else return that it failed
+++++++++
+++++++++
+++++++++}
+++++++++
+++++++++void flight_schedule_remove_flight(city_t city){
+++++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++++ //idk if this is the right time to call or even need too
++++++++ 
++++++++ 
+++++++++
+++++++++  time_t time = time_get();
+++++++++  int capacity = flight_capacity_get(); 
+++++++++  
+++++++++  struct flight *flights;
+++++++++  flights = temp->flights;
+++++++++
+++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++++    if(flights[i].time == time){
+++++++++      flights[i].time = -1;//was flights[i] will this change correct one?
+++++++++      flights[i].capacity = 0;  
+++++++++      flights[i].available = 0;
+++++++++      break;
+++++++++    }
+++++++++  }
++++++++ }
+++++++++
+++++++++
+++++++++void flight_schedule_schedule_seat(city_t city) {
+++++++++  
+++++++++}
++++++++\ No newline at end of file
++++++++
++++++++commit e41186f0b9058ea4390a8f0fda78296861580f31
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 20:05:28 2020 -0400
++++++++
++++++++    updates to add_flight
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index aae10c7..d9c99ff 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++   }
++++++++ }
++++++++ 
++++++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++++
++++++++   while(temp != NULL){
++++++++-    if (strcmp(city,temp->destination) == 0){
+++++++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++++++       return(temp);
++++++++     }
++++++++     temp = temp->next;
++++++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++++ }
++++++++ 
++++++++ 
+++++++++void flight_schedule_add(city_t city){ //should this call get city
+++++++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++++++  
+++++++++  if (flight_schedule_find) {
+++++++++    msg_city_exists(city);
+++++++++  }
+++++++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++++++  
+++++++++  //p->destination = ch; 
+++++++++
+++++++++}
+++++++++
+++++++++
+++++++++void flight_schedule_remove(city_t city){
+++++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++++  flight_schedule_free(temp);
+++++++++}
+++++++++
+++++++++
+++++++++
+++++++++void flight_schedule_listAll(void){
+++++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++++  while(temp != NULL){
+++++++++    printf("%p", &temp);
+++++++++    temp = temp->next;
+++++++++  }
+++++++++
+++++++++}
+++++++++
+++++++++void flight_schedule_list(city_t city){
+++++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++++  while(temp != NULL){
+++++++++    if (strcmp(city,temp->destination) == 0){
+++++++++      printf("%p", &temp);
+++++++++    }
+++++++++    temp = temp->next;
+++++++++  }
+++++++++}
+++++++++
+++++++++void flight_schedule_add_flight(city_t city){
+++++++++  flight_schedule_add(city);
+++++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++++
+++++++++  int time = time_get();
+++++++++  int capacity = flight_capacity_get();
+++++++++  
+++++++++  if (time == 1 || capacity == 1 ){
+++++++++      return 1;
+++++++++  }
+++++++++
+++++++++  temp->flight->flights[];
+++++++++
+++++++++
+++++++++
+++++++++}
++++++++
++++++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 18:35:40 2020 -0400
++++++++
++++++++    correction of free, working on find
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index a03a0af..aae10c7 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++   int counter = 0;
++++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++   while(temp != NULL) {
++++++++-    if(temp == fs){
+++++++++    if(temp == fs){ //use flight schedule find instead
++++++++       break;
++++++++     }
++++++++     temp = temp->next;
++++++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     flight_schedule_reset(temp);
++++++++ 
++++++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++++++-    flight_schedule_free = temp;
+++++++++    flight_schedules_free = temp;
++++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++++     //flight_schedule_reset(temp);
++++++++ 
++++++++   }
++++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++++++     temp->prev->next = temp->next;
++++++++     temp->next->prev = temp->prev;
++++++++     temp->next = NULL;
++++++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     flight_schedule_reset(temp);
++++++++ 
++++++++     temp->next = flight_schedules_free;
++++++++-    flight_schedule_free = temp;
+++++++++    flight_schedules_free = temp;
++++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++++   }
++++++++   else{
++++++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++++ 
++++++++     temp->next = flight_schedules_free;
++++++++-    flight_schedule_free = temp;
+++++++++    flight_schedules_free = temp;
++++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++++     
++++++++   }
++++++++-}
++++++++\ No newline at end of file
+++++++++}
+++++++++
+++++++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++++  while(temp != NULL){
+++++++++    if (strcmp(city,temp->destination) == 0){
+++++++++      return(temp);
+++++++++    }
+++++++++    temp = temp->next;
+++++++++  }
+++++++++}
+++++++++
+++++++++
++++++++
++++++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 15:08:53 2020 -0400
++++++++
++++++++    working on flight_schedule_free
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 1f30cd1..a03a0af 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
++++++++ //flight schedule free
++++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++++-  struct flight_schedule *temp = flight
+++++++++  int counter = 0;
+++++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++++  while(temp != NULL) {
+++++++++    if(temp == fs){
+++++++++      break;
+++++++++    }
+++++++++    temp = temp->next;
+++++++++    counter++;
+++++++++  }
+++++++++  
+++++++++  if (counter == 0){
+++++++++    flight_schedules_active = temp->next;
+++++++++    flight_schedules_active->prev = NULL;
+++++++++    temp->next = NULL;
+++++++++
+++++++++    flight_schedule_reset(temp);
+++++++++
+++++++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++++++    flight_schedule_free = temp;
+++++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++++    //flight_schedule_reset(temp);
+++++++++
+++++++++  }
+++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++++++    temp->prev->next = temp->next;
+++++++++    temp->next->prev = temp->prev;
+++++++++    temp->next = NULL;
+++++++++    temp->prev = NULL;
+++++++++
+++++++++    flight_schedule_reset(temp);
+++++++++
+++++++++    temp->next = flight_schedules_free;
+++++++++    flight_schedule_free = temp;
+++++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++++  }
+++++++++  else{
+++++++++    temp->prev = NULL;
+++++++++    flight_schedules_active->prev->next = NULL;
+++++++++
+++++++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++++++
+++++++++    temp->next = flight_schedules_free;
+++++++++    flight_schedule_free = temp;
+++++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++++    
+++++++++  }
++++++++ }
++++++++\ No newline at end of file
++++++++
++++++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Mon Sep 28 14:12:10 2020 -0400
++++++++
++++++++    correcting allocate
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index ec71f49..1f30cd1 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
++++++++ //returns pointer to updated flight schedule
++++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++++ 
++++++++-  struct flight_schedule temp = 
+++++++++  struct flight_schedule *temp =  flight_schedules_free;
+++++++++  flight_schedules_free = flight_schedules_free->next;
+++++++++  flight_schedules_free->prev = NULL;
+++++++++  temp->next = flight_schedules_active;
+++++++++
+++++++++  flight_schedules_active = temp;
+++++++++  flight_schedules_active->next->prev = flight_schedules_active;
+++++++++  //temp->prev = NULL;
+++++++++  //struct flight_schedule *temp2 = flight_schedules_active
++++++++   
++++++++-  
++++++++-  
++++++++-  *flight_schedules_active = *flight_schedules_free->free;
++++++++-
++++++++-  
++++++++-  //flight_schedules_active = flight_schedules_free;
++++++++-  *flight_schedules_free = *flight_schedules_free->next;
++++++++-  *flight_schedules_free->prev = NULL;
++++++++-  return(flight_schedules_active->flights[]);
+++++++++  return(flight_schedules_active);
++++++++ }
++++++++ 
++++++++ //flight schedule free
++++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++++-  
+++++++++  struct flight_schedule *temp = flight
++++++++ }
++++++++\ No newline at end of file
++++++++
++++++++commit 7c7197814c779e696458438563f16bc76b197fb2
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Fri Sep 25 18:25:04 2020 -0400
++++++++
++++++++    very confused, trying to use pointers to alt sched
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index ff89d23..ec71f49 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
++++++++   return (af->time - bf->time);
++++++++ }
++++++++ 
++++++++-WRITE SOME CODE!
+++++++++//WRITE SOME CODE!
++++++++ //flight schedule allocate
+++++++++//takes a schedule off the free list and places it on the active list
+++++++++//returns pointer to updated flight schedule
++++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++++-  *flight_schedules_active = *flight_schedules_free;
++++++++-  *flight_schedules_free = *flight_schedules_free.next;
++++++++-  return(flight_schedule);
++++++++-}
++++++++ 
+++++++++  struct flight_schedule temp = 
+++++++++  
+++++++++  
+++++++++  
+++++++++  *flight_schedules_active = *flight_schedules_free->free;
++++++++ 
+++++++++  
+++++++++  //flight_schedules_active = flight_schedules_free;
+++++++++  *flight_schedules_free = *flight_schedules_free->next;
+++++++++  *flight_schedules_free->prev = NULL;
+++++++++  return(flight_schedules_active->flights[]);
+++++++++}
++++++++ 
++++++++ //flight schedule free
++++++++-
+++++++++//takes schedule off active list, resets it, then places the node back on free list
++++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++++-  *flight_schedule_active = *flight_schedule_free;
++++++++-  *fs = 
+++++++++  
++++++++ }
++++++++\ No newline at end of file
++++++++
++++++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
++++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++++Date:   Fri Sep 25 12:05:56 2020 -0400
++++++++
++++++++    starting work on first 3 helper functions
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 31abde4..ff89d23 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
++++++++ }
++++++++ 
++++++++ WRITE SOME CODE!
+++++++++//flight schedule allocate
+++++++++struct flight_schedule * flight_schedule_allocate(void){
+++++++++  *flight_schedules_active = *flight_schedules_free;
+++++++++  *flight_schedules_free = *flight_schedules_free.next;
+++++++++  return(flight_schedule);
+++++++++}
+++++++++
+++++++++
+++++++++
+++++++++//flight schedule free
+++++++++
+++++++++void flight_schedule_free(struct flight_schedule *fs){
+++++++++  *flight_schedule_active = *flight_schedule_free;
+++++++++  *fs = 
+++++++++}
++++++++\ No newline at end of file
++++++++
++++++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
++++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++++++Date:   Thu Sep 24 18:32:49 2020 -0400
++++++++
++++++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
++++++++
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++index 2f5c360..31abde4 100644
++++++++--- a/assignment-3.c
+++++++++++ b/assignment-3.c
++++++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++++++ // Structure to hold all the information for a single flight
++++++++ //   A city's schedule has an array of these
++++++++ struct flight {
++++++++-  int time;       // departure time of the flight
+++++++++  time_t time;       // departure time of the flight
++++++++   int available;  // number of seats currently available on the flight
++++++++   int capacity;   // maximum seat capacity of the flight
++++++++ };
++++++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++++     array[i+1].prev = &array[i];
++++++++   }
++++++++   // Takes care of last node.  
++++++++-  // Its prev pointer will be set in the loop,
++++++++-  // we just have to set its next to NULL.
+++++++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
++++++++   array[n-1].next = NULL;
+++++++++  array[n-1].prev = &array[n-2];
++++++++   flight_schedules_free = &array[0];
++++++++ }
++++++++ 
++++++++diff --git a/reference b/reference
++++++++index ee9132a..b11f6c6 100755
++++++++Binary files a/reference and b/reference differ
++++++++
++++++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
++++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++++++Date:   Mon Sep 21 21:02:39 2020 -0400
++++++++
++++++++    Initial Commit to seed assignment 3. Have fun!
++++++++
++++++++diff --git a/.gitignore b/.gitignore
++++++++new file mode 100644
++++++++index 0000000..8ff04a2
++++++++--- /dev/null
+++++++++++ b/.gitignore
++++++++@@ -0,0 +1,4 @@
+++++++++*
+++++++++!assignment-3.c
+++++++++!gitlog.txt
+++++++++
++++++++diff --git a/.vscode/launch.json b/.vscode/launch.json
++++++++new file mode 100644
++++++++index 0000000..5f223b9
++++++++--- /dev/null
+++++++++++ b/.vscode/launch.json
++++++++@@ -0,0 +1,30 @@
+++++++++{
+++++++++    // Use IntelliSense to learn about possible attributes.
+++++++++    // Hover to view descriptions of existing attributes.
+++++++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+++++++++    "version": "0.2.0",
+++++++++    "configurations": [
+++++++++    
+++++++++
+++++++++        {
+++++++++            "name": "(gdb) Launch",
+++++++++            "type": "cppdbg",
+++++++++            "request": "launch",
+++++++++            "program": "${workspaceFolder}/assignment-3",
+++++++++            "args": [],
+++++++++            "stopAtEntry": true,
+++++++++            "cwd": "${workspaceFolder}",
+++++++++            "environment": [],
+++++++++            "externalConsole": false,
+++++++++            "MIMode": "gdb",
+++++++++            "setupCommands": [
+++++++++                {
+++++++++                    "description": "Enable pretty-printing for gdb",
+++++++++                    "text": "-enable-pretty-printing",
+++++++++                    "ignoreFailures": true
+++++++++                }
+++++++++            ],
+++++++++            "preLaunchTask": "Build"
+++++++++        }
+++++++++    ]
+++++++++}
++++++++diff --git a/.vscode/settings.json b/.vscode/settings.json
++++++++new file mode 100644
++++++++index 0000000..495436f
++++++++--- /dev/null
+++++++++++ b/.vscode/settings.json
++++++++@@ -0,0 +1,21 @@
+++++++++{
+++++++++    "git.ignoreLegacyWarning": true,
+++++++++    "files.autoSave": "afterDelay",
+++++++++    "files.exclude": {
+++++++++        ".vscode": true,
+++++++++        "**/*.o": true,
+++++++++        "reference": true,
+++++++++        "assignment-3": true,
+++++++++        "test.sh":true,
+++++++++        "gitlog.txt":true,
+++++++++        ".gitignore":true
+++++++++    },
+++++++++    "editor.renderControlCharacters": true,
+++++++++    "C_Cpp.default.cStandard": "c99",
+++++++++    "C_Cpp.default.cppStandard": "gnu++11",
+++++++++    "C_Cpp.default.defines": [],
+++++++++    "C_Cpp.intelliSenseEngine": "Disabled",
+++++++++    "C_Cpp.workspaceParsingPriority": "low",
+++++++++    "C_Cpp.intelliSenseCacheSize": 100,
+++++++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
+++++++++}
++++++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
++++++++new file mode 100644
++++++++index 0000000..d02618f
++++++++--- /dev/null
+++++++++++ b/.vscode/tasks.json
++++++++@@ -0,0 +1,28 @@
+++++++++{
+++++++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
+++++++++    // for the documentation about the tasks.json format
+++++++++    "version": "2.0.0",
+++++++++    "tasks": [
+++++++++        {
+++++++++            "label": "Build",
+++++++++            "type": "shell",
+++++++++            "command": "make",
+++++++++            "options": {
+++++++++                "cwd": "${workspaceFolder}"
+++++++++            },
+++++++++            "group": {
+++++++++                "kind": "build",
+++++++++                "isDefault": true
+++++++++            },
+++++++++            "presentation": {
+++++++++                "reveal": "always",
+++++++++                "panel": "shared"
+++++++++            },
+++++++++            "problemMatcher": {
+++++++++                "base": "$gcc",
+++++++++                "fileLocation": ["relative", "${workspaceRoot}/"]
+++++++++            }
+++++++++        }
+++++++++        
+++++++++    ]
+++++++++}
++++++++diff --git a/Makefile b/Makefile
++++++++new file mode 100644
++++++++index 0000000..1c3a3d1
++++++++--- /dev/null
+++++++++++ b/Makefile
++++++++@@ -0,0 +1,69 @@
+++++++++.PHONY: all clean test gitlog
+++++++++
+++++++++all: assignment-3
+++++++++
+++++++++assignment-3: assignment-3.c
+++++++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
+++++++++
+++++++++test: assignment-3 gitlog
+++++++++	./test.sh
+++++++++
+++++++++test1: assignment-3
+++++++++	./test.sh 1
+++++++++
+++++++++test2: assignment-3
+++++++++	./test.sh 2
+++++++++
+++++++++test3: assignment-3
+++++++++	./test.sh 3
+++++++++
+++++++++test4: assignment-3
+++++++++	./test.sh 4
+++++++++
+++++++++test5: assignment-3
+++++++++	./test.sh 5
+++++++++
+++++++++test6: assignment-3
+++++++++	./test.sh 6
+++++++++
+++++++++test7: assignment-3
+++++++++	./test.sh 7
+++++++++
+++++++++test8: assignment-3
+++++++++	./test.sh 8
+++++++++
+++++++++test9: assignment-3
+++++++++	./test.sh 9
+++++++++
+++++++++test10: assignment-3
+++++++++	./test.sh 10
+++++++++
+++++++++test11: assignment-3
+++++++++	./test.sh 11
+++++++++
+++++++++test12: assignment-3
+++++++++	./test.sh 12
+++++++++
+++++++++test13: assignment-3
+++++++++	./test.sh 13
+++++++++
+++++++++test14: assignment-3
+++++++++	./test.sh 14
+++++++++
+++++++++test15: assignment-3
+++++++++	./test.sh 15
+++++++++
+++++++++test16: assignment-3
+++++++++	./test.sh 16
+++++++++
+++++++++bonus1: assignment-3
+++++++++	./test.sh 1 bonus
+++++++++
+++++++++bonus2: assignment-3
+++++++++	./test.sh 2 bonus
+++++++++
+++++++++gitlog:
+++++++++	git log -p > gitlog.txt
+++++++++
+++++++++clean:
+++++++++	-${RM} assignment-3
++++++++diff --git a/assignment-3.c b/assignment-3.c
++++++++new file mode 100644
++++++++index 0000000..2f5c360
++++++++--- /dev/null
+++++++++++ b/assignment-3.c
++++++++@@ -0,0 +1,375 @@
+++++++++/**
+++++++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
+++++++++ *  Let's use our knowledge to write a simple flight management system!
+++++++++ **/
+++++++++
+++++++++#include <stdio.h>
+++++++++#include <string.h>
+++++++++#include <stdlib.h>
+++++++++#include <stdbool.h>
+++++++++#include <assert.h>
+++++++++
+++++++++// Limit constants
+++++++++#define MAX_CITY_NAME_LEN 20
+++++++++#define MAX_FLIGHTS_PER_CITY 5
+++++++++#define MAX_DEFAULT_SCHEDULES 50
+++++++++
+++++++++// Time definitions
+++++++++#define TIME_MIN 0
+++++++++#define TIME_MAX ((60 * 24)-1)
+++++++++#define TIME_NULL -1
+++++++++
+++++++++
+++++++++/******************************************************************************
+++++++++ * Structure and Type definitions                                             *
+++++++++ ******************************************************************************/
+++++++++typedef int time_t;                        // integers used for time values
+++++++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++++++ 
+++++++++// Structure to hold all the information for a single flight
+++++++++//   A city's schedule has an array of these
+++++++++struct flight {
+++++++++  int time;       // departure time of the flight
+++++++++  int available;  // number of seats currently available on the flight
+++++++++  int capacity;   // maximum seat capacity of the flight
+++++++++};
+++++++++
+++++++++// Structure for an individual flight schedule
+++++++++// The main data structure of the program is an Array of these structures
+++++++++// Each structure will be placed on one of two linked lists:
+++++++++//                free or active
+++++++++// Initially the active list will be empty and all the schedules
+++++++++// will be on the free list.  Adding a schedule is finding the first
+++++++++// free schedule on the free list, removing it from the free list,
+++++++++// setting its destination city and putting it on the active list
+++++++++struct flight_schedule {
+++++++++  city_t destination;                          // destination city name
+++++++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
+++++++++  struct flight_schedule *next;                // link list next pointer
+++++++++  struct flight_schedule *prev;                // link list prev pointer
+++++++++};
+++++++++
+++++++++/******************************************************************************
+++++++++ * Global / External variables                                                *
+++++++++ ******************************************************************************/
+++++++++// This program uses two global linked lists of Schedules.  See comments
+++++++++// of struct flight_schedule above for details
+++++++++struct flight_schedule *flight_schedules_free = NULL;
+++++++++struct flight_schedule *flight_schedules_active = NULL;
+++++++++
+++++++++
+++++++++/******************************************************************************
+++++++++ * Function Prototypes                                                        *
+++++++++ ******************************************************************************/
+++++++++// Misc utility io functions
+++++++++int city_read(city_t city);           
+++++++++bool time_get(time_t *time_ptr);      
+++++++++bool flight_capacity_get(int *capacity_ptr);
+++++++++void print_command_help(void);
+++++++++
+++++++++// Core functions of the program
+++++++++void flight_schedule_initialize(struct flight_schedule array[], int n);
+++++++++struct flight_schedule * flight_schedule_find(city_t city);
+++++++++struct flight_schedule * flight_schedule_allocate(void);
+++++++++void flight_schedule_free(struct flight_schedule *fs);
+++++++++void flight_schedule_add(city_t city);
+++++++++void flight_schedule_listAll(void);
+++++++++void flight_schedule_list(city_t city);
+++++++++void flight_schedule_add_flight(city_t city);
+++++++++void flight_schedule_remove_flight(city_t city);
+++++++++void flight_schedule_schedule_seat(city_t city);
+++++++++void flight_schedule_unschedule_seat(city_t city);
+++++++++void flight_schedule_remove(city_t city);
+++++++++
+++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
+++++++++int  flight_compare_time(const void *a, const void *b);
+++++++++
+++++++++
+++++++++int main(int argc, char *argv[]) 
+++++++++{
+++++++++  long n = MAX_DEFAULT_SCHEDULES;
+++++++++  char command;
+++++++++  city_t city;
+++++++++
+++++++++  if (argc > 1) {
+++++++++    // If the program was passed an argument then try and convert the first
+++++++++    // argument in the a number that will override the default max number
+++++++++    // of schedule we will support
+++++++++    char *end;
+++++++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
+++++++++    if (n==0) {
+++++++++      printf("ERROR: Bad number of default max scedules specified.\n");
+++++++++      exit(EXIT_FAILURE);
+++++++++    }
+++++++++  }
+++++++++
+++++++++  // C99 lets us allocate an array of a fixed length as a local 
+++++++++  // variable.  Since we are doing this in main and a call to main will be 
+++++++++  // active for the entire time of the program's execution this
+++++++++  // array will be alive for the entire time -- its memory and values
+++++++++  // will be stable for the entire program execution.
+++++++++  struct flight_schedule flight_schedules[n];
+++++++++ 
+++++++++  // Initialize our global lists of free and active schedules using
+++++++++  // the elements of the flight_schedules array
+++++++++  flight_schedule_initialize(flight_schedules, n);
+++++++++
+++++++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
+++++++++  //  When possible, if we know that some particular thing should have happened
+++++++++  //  we think of that as an assertion and write code to test them.
+++++++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
+++++++++  // the free list to a non-null value and the the active list is a null value.
+++++++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
+++++++++
+++++++++  // Print the instruction in the beginning
+++++++++  print_command_help();
+++++++++
+++++++++  // Command processing loop
+++++++++  while (scanf(" %c", &command) == 1) {
+++++++++    switch (command) {
+++++++++    case 'A': 
+++++++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_add(city);
+++++++++
+++++++++      break;
+++++++++    case 'L':
+++++++++      // List all active flight schedules eg. "L\n"
+++++++++      flight_schedule_listAll();
+++++++++      break;
+++++++++    case 'l': 
+++++++++      // List the flights for a particular city eg. "l\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_list(city);
+++++++++      break;
+++++++++    case 'a':
+++++++++      // Adds a flight for a particular city "a Toronto\n
+++++++++      //                                      360 100\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_add_flight(city);
+++++++++      break;
+++++++++    case 'r':
+++++++++      // Remove a flight for a particular city "r Toronto\n
+++++++++      //                                        360\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_remove_flight(city);
+++++++++	break;
+++++++++    case 's':
+++++++++      // schedule a seat on a flight for a particular city "s Toronto\n
+++++++++      //                                                    300\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_schedule_seat(city);
+++++++++      break;
+++++++++    case 'u':
+++++++++      // unschedule a seat on a flight for a particular city "u Toronto\n
+++++++++      //                                                      360\n"
+++++++++        city_read(city);
+++++++++        flight_schedule_unschedule_seat(city);
+++++++++        break;
+++++++++    case 'R':
+++++++++      // remove the schedule for a particular city "R Toronto\n"
+++++++++      city_read(city);
+++++++++      flight_schedule_remove(city);  
+++++++++      break;
+++++++++    case 'h':
+++++++++        print_command_help();
+++++++++        break;
+++++++++    case 'q':
+++++++++      goto done;
+++++++++    default:
+++++++++      printf("Bad command. Use h to see help.\n");
+++++++++    }
+++++++++  }
+++++++++ done:
+++++++++  return EXIT_SUCCESS;
+++++++++}
+++++++++
+++++++++/**********************************************************************
+++++++++ * city_read: Takes in and processes a given city following a command *
+++++++++ *********************************************************************/
+++++++++int city_read(city_t city) {
+++++++++  int ch, i=0;
+++++++++
+++++++++  // skip leading non letter characters
+++++++++  while (true) {
+++++++++    ch = getchar();
+++++++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
+++++++++      city[i++] = ch;
+++++++++      break;
+++++++++    }
+++++++++  }
+++++++++  while ((ch = getchar()) != '\n') {
+++++++++    if (i < MAX_CITY_NAME_LEN) {
+++++++++      city[i++] = ch;
+++++++++    }
+++++++++  }
+++++++++  city[i] = '\0';
+++++++++  return i;
+++++++++}
+++++++++
+++++++++
+++++++++/****************************************************************
+++++++++ * Message functions so that your messages match what we expect *
+++++++++ ****************************************************************/
+++++++++void msg_city_bad(char *city) {
+++++++++  printf("No schedule for %s\n", city);
+++++++++}
+++++++++
+++++++++void msg_city_exists(char *city) {
+++++++++  printf("There is a schedule of %s already.\n", city);
+++++++++}
+++++++++
+++++++++void msg_schedule_no_free(void) {
+++++++++  printf("Sorry no more free schedules.\n");
+++++++++}
+++++++++
+++++++++void msg_city_flights(char *city) {
+++++++++  printf("The flights for %s are:", city);
+++++++++}
+++++++++
+++++++++void msg_flight_info(int time, int avail, int capacity) {
+++++++++  printf(" (%d, %d, %d)", time, avail, capacity);
+++++++++}
+++++++++
+++++++++void msg_city_max_flights_reached(char *city) {
+++++++++  printf("Sorry we cannot add more flights on this city.\n");
+++++++++}
+++++++++
+++++++++void msg_flight_bad_time(void) {
+++++++++  printf("Sorry there's no flight scheduled on this time.\n");
+++++++++}
+++++++++
+++++++++void msg_flight_no_seats(void) {
+++++++++    printf("Sorry there's no more seats available!\n");
+++++++++}
+++++++++
+++++++++void msg_flight_all_seats_empty(void) {
+++++++++  printf("All the seats on this flights are empty!\n");
+++++++++}
+++++++++
+++++++++void msg_time_bad() {
+++++++++  printf("Invalid time value\n");
+++++++++}
+++++++++
+++++++++void msg_capacity_bad() {
+++++++++  printf("Invalid capacity value\n");
+++++++++}
+++++++++
+++++++++void print_command_help()
+++++++++{
+++++++++  printf("Here are the possible commands:\n"
+++++++++	 "A <city name>     - Add an active empty flight schedule for\n"
+++++++++	 "                    <city name>\n"
+++++++++	 "L                 - List cities which have an active schedule\n"
+++++++++	 "l <city name>     - List the flights for <city name>\n"
+++++++++	 "a <city name>\n"
+++++++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
+++++++++	 "                    with <capacity> seats\n"  
+++++++++	 "r <city name>\n"
+++++++++         "<time>            - Remove a flight form <city name> whose time is\n"
+++++++++	 "                    <time>\n"
+++++++++	 "s <city name>\n"
+++++++++	 "<time>            - Attempt to schedule seat on flight to \n"
+++++++++	 "                    <city name> at <time> or next closest time on\n"
+++++++++	 "                    which their is an available seat\n"
+++++++++	 "u <city name>\n"
+++++++++	 "<time>            - unschedule a seat from flight to <city name>\n"
+++++++++	 "                    at <time>\n"
+++++++++	 "R <city name>     - Remove schedule for <city name>\n"
+++++++++	 "h                 - print this help message\n"
+++++++++	 "q                 - quit\n"
+++++++++);
+++++++++}
+++++++++
+++++++++
+++++++++/****************************************************************
+++++++++ * Resets a flight schedule                                     *
+++++++++ ****************************************************************/
+++++++++void flight_schedule_reset(struct flight_schedule *fs) {
+++++++++    fs->destination[0] = 0;
+++++++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
+++++++++      fs->flights[i].time = TIME_NULL;
+++++++++      fs->flights[i].available = 0;
+++++++++      fs->flights[i].capacity = 0;
+++++++++    }
+++++++++    fs->next = NULL;
+++++++++    fs->prev = NULL;
+++++++++}
+++++++++
+++++++++/******************************************************************
+++++++++* Initializes the flight_schedule array that will hold any flight *
+++++++++* schedules created by the user. This is called in main for you.  *
+++++++++ *****************************************************************/
+++++++++
+++++++++void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++++++{
+++++++++  flight_schedules_active = NULL;
+++++++++  flight_schedules_free = NULL;
+++++++++
+++++++++  // takes care of empty array case
+++++++++  if (n==0) return;
+++++++++
+++++++++  // Loop through the Array connecting them
+++++++++  // as a linear doubly linked list
+++++++++  array[0].prev = NULL;
+++++++++  for (int i=0; i<n-1; i++) {
+++++++++    flight_schedule_reset(&array[i]);
+++++++++    array[i].next = &array[i+1];
+++++++++    array[i+1].prev = &array[i];
+++++++++  }
+++++++++  // Takes care of last node.  
+++++++++  // Its prev pointer will be set in the loop,
+++++++++  // we just have to set its next to NULL.
+++++++++  array[n-1].next = NULL;
+++++++++  flight_schedules_free = &array[0];
+++++++++}
+++++++++
+++++++++/***********************************************************
+++++++++ * time_get: read a time from the user
+++++++++   Time in this program is a minute number 0-((24*60)-1)=1439
+++++++++   -1 is used to indicate the NULL empty time 
+++++++++   This function should read in a time value and check its 
+++++++++   validity.  If it is not valid eg. not -1 or not 0-1439
+++++++++   It should print "Invalid Time" and return false.
+++++++++   othewise it should return the value in the integer pointed
+++++++++   to by time_ptr.
+++++++++ ***********************************************************/
+++++++++bool time_get(int *time_ptr) {
+++++++++  if (scanf("%d", time_ptr)==1) {
+++++++++    return (TIME_NULL == *time_ptr || 
+++++++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
+++++++++  } 
+++++++++  msg_time_bad();
+++++++++  return false;
+++++++++}
+++++++++
+++++++++/***********************************************************
+++++++++ * flight_capacity_get: read the capacity of a flight from the user
+++++++++   This function should read in a capacity value and check its 
+++++++++   validity.  If it is not greater than 0, it should print 
+++++++++   "Invalid capacity value" and return false. Othewise it should 
+++++++++   return the value in the integer pointed to by cap_ptr.
+++++++++ ***********************************************************/
+++++++++bool flight_capacity_get(int *cap_ptr) {
+++++++++  if (scanf("%d", cap_ptr)==1) {
+++++++++    return *cap_ptr > 0;
+++++++++  }
+++++++++  msg_capacity_bad();
+++++++++  return false;
+++++++++}
+++++++++
+++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
+++++++++{
+++++++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
+++++++++	flight_compare_time);
+++++++++}
+++++++++
+++++++++int flight_compare_time(const void *a, const void *b) 
+++++++++{
+++++++++  const struct flight *af = a;
+++++++++  const struct flight *bf = b;
+++++++++  
+++++++++  return (af->time - bf->time);
+++++++++}
+++++++++
+++++++++WRITE SOME CODE!
++++++++diff --git a/gitlog.txt b/gitlog.txt
++++++++new file mode 100644
++++++++index 0000000..e69de29
++++++++diff --git a/reference b/reference
++++++++new file mode 100755
++++++++index 0000000..ee9132a
++++++++Binary files /dev/null and b/reference differ
++++++++diff --git a/test.sh b/test.sh
++++++++new file mode 100755
++++++++index 0000000..f8ecbf4
++++++++--- /dev/null
+++++++++++ b/test.sh
++++++++@@ -0,0 +1,328 @@
+++++++++#!/bin/bash
+++++++++#set -x
+++++++++
+++++++++REFERENCE=./reference
+++++++++PGM=./assignment-3
+++++++++
+++++++++# To add a test you can add an element the REQUIRED arrays 
+++++++++# or BONUS Arrays
+++++++++# Each test can have a descripttion, input and optionally a num
+++++++++# num is passed as the argument on the command line to set
+++++++++# the default max schedule size
+++++++++
+++++++++# Required tests
+++++++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
+++++++++REQUIRED_INPUT[0]="L
+++++++++A Toronto
+++++++++L"
+++++++++
+++++++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
+++++++++REQUIRED_INPUT[1]="L
+++++++++A Toronto
+++++++++l Toronto
+++++++++a Toronto
+++++++++1000 5
+++++++++l Toronto"
+++++++++
+++++++++REQUIRED_NUM[2]="2"
+++++++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
+++++++++REQUIRED_INPUT[2]="L
+++++++++A City1
+++++++++A City2
+++++++++L
+++++++++A City3
+++++++++L"
+++++++++
+++++++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
+++++++++REQUIRED_INPUT[3]="A Naples
+++++++++A Addis Ababa
+++++++++L
+++++++++R Naples
+++++++++L"
+++++++++
+++++++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
+++++++++REQUIRED_INPUT[4]="A San Jose
+++++++++a San Jose
+++++++++360 100
+++++++++l San Jose
+++++++++r San Jose
+++++++++360
+++++++++l San Jose"
+++++++++
+++++++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
+++++++++REQUIRED_INPUT[5]="A Hanoi
+++++++++r Hanoi
+++++++++100"
+++++++++
+++++++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
+++++++++REQUIRED_INPUT[6]="A Cartagena
+++++++++a Cartagena
+++++++++720 100
+++++++++a Cartagena
+++++++++840 120
+++++++++s Cartagena
+++++++++480
+++++++++l Cartagena"
+++++++++
+++++++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
+++++++++REQUIRED_INPUT[7]="L
+++++++++A Abu Dhabi
+++++++++a Abu Dhabi
+++++++++360 50
+++++++++a Abu Dhabi
+++++++++840 100
+++++++++s Abu Dhabi
+++++++++700
+++++++++l Abu Dhabi
+++++++++u Abu Dhabi
+++++++++840
+++++++++l Abu Dhabi"
+++++++++
+++++++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
+++++++++REQUIRED_INPUT[8]="L
+++++++++A Belgrade
+++++++++a Belgrade
+++++++++400 1
+++++++++s Belgrade
+++++++++400
+++++++++l Belgrade
+++++++++s Belgrade
+++++++++400
+++++++++l Belgrade"
+++++++++
+++++++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
+++++++++REQUIRED_INPUT[9]="L
+++++++++A Kyoto
+++++++++a Kyoto
+++++++++300 5
+++++++++l Kyoto
+++++++++u Kyoto
+++++++++300
+++++++++l Kyoto"
+++++++++
+++++++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
+++++++++REQUIRED_INPUT[10]="L
+++++++++A Mumbai
+++++++++a Mumbai
+++++++++900 3
+++++++++l Mumbai
+++++++++u Mumbai
+++++++++300
+++++++++l Mumbai"
+++++++++
+++++++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
+++++++++REQUIRED_INPUT[11]="L
+++++++++A Prague
+++++++++a Prague
+++++++++360 5
+++++++++a Prague
+++++++++720 100
+++++++++l Prague
+++++++++s Prague
+++++++++900
+++++++++l Prague"
+++++++++
+++++++++REQUIRED_NUM[12]="2"
+++++++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
+++++++++REQUIRED_INPUT[12]="L
+++++++++A City1
+++++++++L
+++++++++A City2
+++++++++L
+++++++++A City3
+++++++++L
+++++++++R City1
+++++++++L
+++++++++R City2
+++++++++L
+++++++++R City3
+++++++++L
+++++++++A City1
+++++++++L"
+++++++++
+++++++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
+++++++++REQUIRED_INPUT[13]="L
+++++++++A City1
+++++++++a City1
+++++++++60 5
+++++++++l City1
+++++++++a City1
+++++++++120 5
+++++++++l City1
+++++++++a City1
+++++++++180 5
+++++++++l City1
+++++++++a City1
+++++++++240 5
+++++++++l City1
+++++++++a City1
+++++++++300 5
+++++++++l City1
+++++++++a City1
+++++++++360 5
+++++++++l City1
+++++++++r City1
+++++++++360
+++++++++l City1
+++++++++r City1
+++++++++300
+++++++++l City1
+++++++++r City1
+++++++++240
+++++++++l City1
+++++++++r City1
+++++++++180
+++++++++l City1
+++++++++r City1
+++++++++120
+++++++++l City1
+++++++++r City1
+++++++++60
+++++++++l City1
+++++++++a City1
+++++++++60 5
+++++++++l City1"
+++++++++
+++++++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
+++++++++REQUIRED_INPUT[14]="L
+++++++++A City1
+++++++++a City1
+++++++++60 3
+++++++++l City1
+++++++++s City1
+++++++++60
+++++++++l City1
+++++++++s City1
+++++++++60
+++++++++l City1
+++++++++s City1
+++++++++60
+++++++++l City1
+++++++++s City1
+++++++++60
+++++++++l City1
+++++++++u City1
+++++++++60
+++++++++l City1
+++++++++u City1
+++++++++60
+++++++++l City1
+++++++++u City1
+++++++++60
+++++++++l City1
+++++++++u City1
+++++++++60
+++++++++l City1"
+++++++++
+++++++++REQUIRED_DESC[15]="Required 16: A bigger test "
+++++++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
+++++++++REQUIRED_VALUE[15]=5
+++++++++
+++++++++
+++++++++# Bonus tests
+++++++++BONUS_DESC[0]="Bonus 1: Medium sized test"
+++++++++BONUS_INPUT[0]="$(cat testMedium.txt)"
+++++++++BONUS_VALUE[0]=3
+++++++++
+++++++++BONUS_DESC[1]="Bonus 2: Large sized test"
+++++++++BONUS_INPUT[1]="$(cat testBig.txt)"
+++++++++BONUS_VALUE[1]=5
+++++++++
+++++++++
+++++++++function run_test()
+++++++++{
+++++++++   description="$1"
+++++++++   input="$2"
+++++++++   num="$3"
+++++++++
+++++++++   echo -n "$description : "
+++++++++   [[ -n $VERBOSE ]] &&  echo "Input:"
+++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++++++   [[ -n $VERBOSE ]] &&  echo "$input"
+++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++++++
+++++++++   solution=$($REFERENCE $num <<EOF
+++++++++$input
+++++++++EOF
+++++++++)
+++++++++
+++++++++   answer=$($PGM $num<<EOF
+++++++++$input
+++++++++EOF
+++++++++)
+++++++++
+++++++++  if [[ -n $DEBUG ]]; then
+++++++++      echo "$solution"
+++++++++  else
+++++++++    if [[ "$answer" == "$solution" ]]; then
+++++++++       echo "PASS"
+++++++++       return 0
+++++++++    fi
+++++++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
+++++++++    echo "FAIL"
+++++++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
+++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++++    [[ -n $VERBOSE ]] && echo "$answers"    
+++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
+++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++++    [[ -n $VERBOSE ]] && echo "$solution"
+++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++++    [[ -n $VERBOSE ]] && echo ""
+++++++++  fi
+++++++++  return 1
+++++++++}
+++++++++
+++++++++testnum=$1
+++++++++type=$2
+++++++++
+++++++++total=0
+++++++++correct=0
+++++++++
+++++++++if [[ -z $testnum ]]; then
+++++++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
+++++++++	value="${REQUIRED_VALUE[$i]}"
+++++++++	[[ -z $value ]] && value=1
+++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++++++	    (( correct += $value ))
+++++++++	fi
+++++++++	(( total += value ))
+++++++++    done
+++++++++    
+++++++++    
+++++++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
+++++++++	value="${BONUS_VALUE[$i]}"
+++++++++	[[ -z $value ]] && value=1
+++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++++++	    (( correct += $value ))
+++++++++	fi
+++++++++    done
+++++++++else
+++++++++    VERBOSE=1
+++++++++    (( i=$testnum - 1 ))
+++++++++    if [[ -z "$type" ]]; then
+++++++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
+++++++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
+++++++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
+++++++++	    exit -1
+++++++++	fi
+++++++++	value="${REQUIRED_VALUE[$i]}"
+++++++++	[[ -z $value ]] && value=1
+++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++++++	    (( correct += $value ))
+++++++++	fi
+++++++++	(( total += value ))
+++++++++    else
+++++++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
+++++++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
+++++++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
+++++++++	    exit -1
+++++++++	fi	
+++++++++	value="${BONUS_VALUE[$i]}"
+++++++++	[[ -z $value ]] && value=1
+++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++++++         (( correct += $value ))
+++++++++	fi
+++++++++    fi
+++++++++fi
+++++++++echo "score: ${correct}/${total}"
++++++++diff --git a/testBig.txt b/testBig.txt
++++++++new file mode 100644
++++++++index 0000000..90170d5
++++++++--- /dev/null
+++++++++++ b/testBig.txt
++++++++@@ -0,0 +1,1251 @@
+++++++++L
+++++++++A Qingdao
+++++++++A Paris
+++++++++A Lima
+++++++++A Los Angeles
+++++++++A Khartoum
+++++++++A Barcelona
+++++++++A Santiago
+++++++++A Tokyo
+++++++++A Delhi
+++++++++A Guangzhou
+++++++++A Johannesburg
+++++++++A Paris
+++++++++A Dhaka
+++++++++A Chennai
+++++++++A Jinan
+++++++++A Luanda
+++++++++A Surat
+++++++++A Hyderabad
+++++++++A Beijing
+++++++++A Atlanta
+++++++++A Chennai
+++++++++A Dar es Salaam
+++++++++A Osaka
+++++++++A Hong Kong
+++++++++A Toronto
+++++++++A Saint Petersburg
+++++++++A Manila
+++++++++A Washington, D.C.
+++++++++A Tehran
+++++++++A Miami
+++++++++A Khartoum
+++++++++A Seoul
+++++++++A Dar es Salaam
+++++++++A Sao Paulo
+++++++++A Baghdad
+++++++++A Guadalajara
+++++++++A Ahmedabad
+++++++++A Moscow
+++++++++A Philadelphia
+++++++++A Fukuoka
+++++++++a Tokyo
+++++++++1414 113
+++++++++a Guadalajara
+++++++++385 170
+++++++++a Qingdao
+++++++++782 37
+++++++++a Ahmedabad
+++++++++1411 50
+++++++++a Los Angeles
+++++++++517 84
+++++++++a Tehran
+++++++++86 61
+++++++++a Osaka
+++++++++1289 162
+++++++++a Barcelona
+++++++++1261 158
+++++++++a Fukuoka
+++++++++550 191
+++++++++a Seoul
+++++++++207 1
+++++++++a Manila
+++++++++364 96
+++++++++a Khartoum
+++++++++56 194
+++++++++a Tokyo
+++++++++98 1
+++++++++a Saint Petersburg
+++++++++1330 107
+++++++++a Baghdad
+++++++++15 15
+++++++++a Chennai
+++++++++1169 127
+++++++++a Beijing
+++++++++807 97
+++++++++a Seoul
+++++++++1134 34
+++++++++a Jinan
+++++++++220 102
+++++++++a Dhaka
+++++++++122 101
+++++++++a Luanda
+++++++++1342 71
+++++++++a Guadalajara
+++++++++195 35
+++++++++a Fukuoka
+++++++++28 37
+++++++++a Beijing
+++++++++678 83
+++++++++a Khartoum
+++++++++947 39
+++++++++a Hyderabad
+++++++++490 104
+++++++++a Sao Paulo
+++++++++62 83
+++++++++a Baghdad
+++++++++1319 24
+++++++++a Delhi
+++++++++718 115
+++++++++a Baghdad
+++++++++204 114
+++++++++a Surat
+++++++++430 74
+++++++++a Miami
+++++++++918 87
+++++++++a Surat
+++++++++455 95
+++++++++a Fukuoka
+++++++++1077 131
+++++++++a Luanda
+++++++++311 21
+++++++++a Seoul
+++++++++1132 155
+++++++++a Lima
+++++++++432 177
+++++++++a Surat
+++++++++494 102
+++++++++a Washington, D.C.
+++++++++667 12
+++++++++a Hong Kong
+++++++++200 55
+++++++++a Los Angeles
+++++++++1195 4
+++++++++a Ahmedabad
+++++++++610 161
+++++++++a Delhi
+++++++++508 110
+++++++++a Atlanta
+++++++++17 21
+++++++++a Washington, D.C.
+++++++++162 23
+++++++++a Luanda
+++++++++1216 15
+++++++++a Tokyo
+++++++++1095 117
+++++++++a Philadelphia
+++++++++1436 117
+++++++++a Atlanta
+++++++++277 164
+++++++++a Manila
+++++++++720 147
+++++++++a Tokyo
+++++++++1017 25
+++++++++a Jinan
+++++++++76 66
+++++++++a Toronto
+++++++++844 84
+++++++++a Santiago
+++++++++7 115
+++++++++a Surat
+++++++++388 55
+++++++++a Tehran
+++++++++836 174
+++++++++a Paris
+++++++++371 110
+++++++++a Sao Paulo
+++++++++516 113
+++++++++a Luanda
+++++++++1041 174
+++++++++a Dhaka
+++++++++1076 34
+++++++++a Guadalajara
+++++++++162 144
+++++++++a Los Angeles
+++++++++424 33
+++++++++a Philadelphia
+++++++++565 167
+++++++++a Luanda
+++++++++1411 44
+++++++++a Osaka
+++++++++1005 82
+++++++++a Fukuoka
+++++++++1253 194
+++++++++a Atlanta
+++++++++141 102
+++++++++a Fukuoka
+++++++++1119 112
+++++++++a Toronto
+++++++++782 150
+++++++++a Dhaka
+++++++++1006 96
+++++++++a Miami
+++++++++961 126
+++++++++a Lima
+++++++++360 41
+++++++++a Lima
+++++++++14 50
+++++++++a Dhaka
+++++++++1028 191
+++++++++a Philadelphia
+++++++++502 115
+++++++++a Washington, D.C.
+++++++++1380 59
+++++++++a Atlanta
+++++++++548 113
+++++++++a Fukuoka
+++++++++694 183
+++++++++a Saint Petersburg
+++++++++261 26
+++++++++a Jinan
+++++++++196 53
+++++++++a Delhi
+++++++++315 78
+++++++++a Delhi
+++++++++625 92
+++++++++a Ahmedabad
+++++++++105 98
+++++++++a Philadelphia
+++++++++111 15
+++++++++a Atlanta
+++++++++321 31
+++++++++a Ahmedabad
+++++++++1244 59
+++++++++a Osaka
+++++++++799 173
+++++++++a Khartoum
+++++++++302 7
+++++++++a Luanda
+++++++++823 190
+++++++++a Chennai
+++++++++754 139
+++++++++a Los Angeles
+++++++++1028 78
+++++++++a Miami
+++++++++1123 183
+++++++++a Dar es Salaam
+++++++++1353 102
+++++++++a Beijing
+++++++++473 88
+++++++++a Paris
+++++++++698 95
+++++++++a Barcelona
+++++++++545 170
+++++++++a Chennai
+++++++++382 85
+++++++++a Miami
+++++++++821 114
+++++++++a Luanda
+++++++++584 161
+++++++++a Fukuoka
+++++++++38 26
+++++++++a Jinan
+++++++++536 148
+++++++++a Manila
+++++++++1403 133
+++++++++a Washington, D.C.
+++++++++917 130
+++++++++a Sao Paulo
+++++++++1169 81
+++++++++a Santiago
+++++++++689 42
+++++++++a Ahmedabad
+++++++++279 30
+++++++++a Los Angeles
+++++++++881 35
+++++++++a Jinan
+++++++++1293 148
+++++++++a Guangzhou
+++++++++1366 38
+++++++++a Santiago
+++++++++317 123
+++++++++a Tokyo
+++++++++454 104
+++++++++a Atlanta
+++++++++626 177
+++++++++a Surat
+++++++++69 135
+++++++++a Luanda
+++++++++1426 19
+++++++++a Barcelona
+++++++++879 46
+++++++++a Los Angeles
+++++++++1329 90
+++++++++a Beijing
+++++++++402 60
+++++++++a Lima
+++++++++727 161
+++++++++a Hyderabad
+++++++++601 186
+++++++++a Khartoum
+++++++++294 183
+++++++++a Hyderabad
+++++++++267 131
+++++++++a Manila
+++++++++771 102
+++++++++a Osaka
+++++++++103 68
+++++++++a Atlanta
+++++++++848 147
+++++++++a Atlanta
+++++++++811 179
+++++++++a Toronto
+++++++++402 131
+++++++++a Guadalajara
+++++++++804 28
+++++++++a Qingdao
+++++++++16 114
+++++++++a Beijing
+++++++++1218 14
+++++++++a Moscow
+++++++++498 195
+++++++++a Surat
+++++++++528 48
+++++++++a Manila
+++++++++865 4
+++++++++a Guangzhou
+++++++++328 24
+++++++++a Dhaka
+++++++++227 50
+++++++++a Manila
+++++++++124 91
+++++++++a Philadelphia
+++++++++218 104
+++++++++a Dar es Salaam
+++++++++209 34
+++++++++a Chennai
+++++++++641 179
+++++++++a Barcelona
+++++++++1433 171
+++++++++a Lima
+++++++++957 60
+++++++++a Dhaka
+++++++++1292 111
+++++++++a Qingdao
+++++++++647 40
+++++++++a Khartoum
+++++++++417 3
+++++++++a Tehran
+++++++++751 180
+++++++++a Barcelona
+++++++++778 118
+++++++++a Luanda
+++++++++204 59
+++++++++a Ahmedabad
+++++++++541 34
+++++++++a Ahmedabad
+++++++++539 33
+++++++++a Los Angeles
+++++++++824 193
+++++++++a Tehran
+++++++++1412 39
+++++++++s Luanda
+++++++++1418
+++++++++s Toronto
+++++++++857
+++++++++s Lima
+++++++++22
+++++++++s Tehran
+++++++++100
+++++++++s Washington
+++++++++175
+++++++++s Dhaka
+++++++++132
+++++++++s Jinan
+++++++++90
+++++++++s Beijing
+++++++++812
+++++++++s Barcelona
+++++++++1268
+++++++++s Dhaka
+++++++++228
+++++++++s Dhaka
+++++++++229
+++++++++s Osaka
+++++++++1295
+++++++++s Los Angeles
+++++++++527
+++++++++s Ahmedabad
+++++++++620
+++++++++s Tokyo
+++++++++461
+++++++++s Luanda
+++++++++588
+++++++++s Tehran
+++++++++1420
+++++++++s Jinan
+++++++++228
+++++++++s Hyderabad
+++++++++497
+++++++++s Manila
+++++++++879
+++++++++s Delhi
+++++++++720
+++++++++s Surat
+++++++++442
+++++++++s Lima
+++++++++21
+++++++++s Delhi
+++++++++630
+++++++++s Tehran
+++++++++836
+++++++++s Dhaka
+++++++++1042
+++++++++s Atlanta
+++++++++558
+++++++++s Khartoum
+++++++++300
+++++++++s Luanda
+++++++++1050
+++++++++s Lima
+++++++++445
+++++++++s Hong Kong
+++++++++213
+++++++++s Delhi
+++++++++318
+++++++++s Manila
+++++++++725
+++++++++s Dhaka
+++++++++1300
+++++++++s Tokyo
+++++++++1028
+++++++++s Lima
+++++++++23
+++++++++s Qingdao
+++++++++24
+++++++++s Ahmedabad
+++++++++542
+++++++++s Barcelona
+++++++++1274
+++++++++s Santiago
+++++++++7
+++++++++s Surat
+++++++++467
+++++++++s Chennai
+++++++++392
+++++++++s Fukuoka
+++++++++551
+++++++++s Fukuoka
+++++++++704
+++++++++s Fukuoka
+++++++++34
+++++++++s Fukuoka
+++++++++1131
+++++++++s Ahmedabad
+++++++++541
+++++++++s Philadelphia
+++++++++566
+++++++++s Surat
+++++++++506
+++++++++s Khartoum
+++++++++952
+++++++++s Guadalajara
+++++++++389
+++++++++s Tokyo
+++++++++1031
+++++++++s Baghdad
+++++++++24
+++++++++s Khartoum
+++++++++307
+++++++++s Lima
+++++++++370
+++++++++s Atlanta
+++++++++812
+++++++++s Sao Paulo
+++++++++1176
+++++++++s Manila
+++++++++1411
+++++++++s Khartoum
+++++++++294
+++++++++s Seoul
+++++++++1148
+++++++++s Guadalajara
+++++++++814
+++++++++s Khartoum
+++++++++314
+++++++++s Manila
+++++++++1410
+++++++++s Khartoum
+++++++++302
+++++++++s Philadelphia
+++++++++230
+++++++++s Lima
+++++++++728
+++++++++s Ahmedabad
+++++++++548
+++++++++s Fukuoka
+++++++++1121
+++++++++s Baghdad
+++++++++206
+++++++++s Ahmedabad
+++++++++1424
+++++++++s Santiago
+++++++++11
+++++++++s Lima
+++++++++364
+++++++++s Manila
+++++++++128
+++++++++s Tokyo
+++++++++460
+++++++++s Surat
+++++++++469
+++++++++s Barcelona
+++++++++1274
+++++++++s Guadalajara
+++++++++816
+++++++++s Guadalajara
+++++++++811
+++++++++s Luanda
+++++++++597
+++++++++s Atlanta
+++++++++852
+++++++++s Guadalajara
+++++++++811
+++++++++s Manila
+++++++++1409
+++++++++s Miami
+++++++++918
+++++++++s Luanda
+++++++++593
+++++++++s Barcelona
+++++++++1440
+++++++++s Dhaka
+++++++++132
+++++++++s Lima
+++++++++363
+++++++++s Ahmedabad
+++++++++1251
+++++++++s Los Angeles
+++++++++521
+++++++++s Fukuoka
+++++++++38
+++++++++s Beijing
+++++++++686
+++++++++s Fukuoka
+++++++++1126
+++++++++s Guadalajara
+++++++++196
+++++++++s Baghdad
+++++++++206
+++++++++s Los Angeles
+++++++++522
+++++++++s Ahmedabad
+++++++++553
+++++++++s Ahmedabad
+++++++++1416
+++++++++s Philadelphia
+++++++++113
+++++++++s Dar es Salaam
+++++++++217
+++++++++s Lima
+++++++++958
+++++++++s Tehran
+++++++++752
+++++++++s Washington
+++++++++680
+++++++++s Tehran
+++++++++756
+++++++++s Khartoum
+++++++++299
+++++++++s Dhaka
+++++++++1084
+++++++++s Manila
+++++++++878
+++++++++s Ahmedabad
+++++++++541
+++++++++s Ahmedabad
+++++++++119
+++++++++s Ahmedabad
+++++++++616
+++++++++s Tehran
+++++++++756
+++++++++s Tehran
+++++++++765
+++++++++s Philadelphia
+++++++++569
+++++++++s Ahmedabad
+++++++++283
+++++++++s Washington
+++++++++1387
+++++++++s Saint Petersburg
+++++++++274
+++++++++s Dhaka
+++++++++1037
+++++++++s Philadelphia
+++++++++506
+++++++++s Luanda
+++++++++593
+++++++++s Philadelphia
+++++++++232
+++++++++s Dhaka
+++++++++233
+++++++++s Baghdad
+++++++++1329
+++++++++s Chennai
+++++++++768
+++++++++s Barcelona
+++++++++546
+++++++++s Sao Paulo
+++++++++529
+++++++++s Jinan
+++++++++543
+++++++++s Philadelphia
+++++++++121
+++++++++s Tehran
+++++++++759
+++++++++s Lima
+++++++++964
+++++++++s Miami
+++++++++923
+++++++++s Los Angeles
+++++++++1195
+++++++++s Jinan
+++++++++200
+++++++++s Jinan
+++++++++224
+++++++++s Beijing
+++++++++1220
+++++++++s Lima
+++++++++368
+++++++++s Philadelphia
+++++++++1436
+++++++++s Tehran
+++++++++95
+++++++++s Miami
+++++++++928
+++++++++s Baghdad
+++++++++1326
+++++++++s Beijing
+++++++++483
+++++++++s Qingdao
+++++++++647
+++++++++s Fukuoka
+++++++++42
+++++++++s Los Angeles
+++++++++1033
+++++++++s Los Angeles
+++++++++836
+++++++++s Osaka
+++++++++1010
+++++++++s Manila
+++++++++865
+++++++++s Miami
+++++++++825
+++++++++s Barcelona
+++++++++553
+++++++++s Tehran
+++++++++757
+++++++++s Jinan
+++++++++88
+++++++++s Luanda
+++++++++1355
+++++++++s Saint Petersburg
+++++++++266
+++++++++s Surat
+++++++++459
+++++++++s Philadelphia
+++++++++576
+++++++++s Philadelphia
+++++++++1441
+++++++++s Paris
+++++++++709
+++++++++s Manila
+++++++++734
+++++++++s Toronto
+++++++++785
+++++++++s Manila
+++++++++135
+++++++++s Lima
+++++++++368
+++++++++s Lima
+++++++++967
+++++++++s Delhi
+++++++++731
+++++++++s Beijing
+++++++++403
+++++++++s Santiago
+++++++++692
+++++++++s Tehran
+++++++++1416
+++++++++s Dar es Salaam
+++++++++1358
+++++++++s Seoul
+++++++++1134
+++++++++s Philadelphia
+++++++++579
+++++++++s Guangzhou
+++++++++342
+++++++++s Osaka
+++++++++116
+++++++++s Guadalajara
+++++++++397
+++++++++s Dhaka
+++++++++1040
+++++++++s Toronto
+++++++++793
+++++++++s Qingdao
+++++++++25
+++++++++s Baghdad
+++++++++1332
+++++++++s Osaka
+++++++++1017
+++++++++s Los Angeles
+++++++++1338
+++++++++s Ahmedabad
+++++++++551
+++++++++s Guangzhou
+++++++++331
+++++++++s Tehran
+++++++++1420
+++++++++s Dar es Salaam
+++++++++215
+++++++++s Tokyo
+++++++++462
+++++++++s Atlanta
+++++++++859
+++++++++s Fukuoka
+++++++++554
+++++++++s Ahmedabad
+++++++++1423
+++++++++s Jinan
+++++++++229
+++++++++s Dhaka
+++++++++1294
+++++++++s Ahmedabad
+++++++++1250
+++++++++s Ahmedabad
+++++++++621
+++++++++s Delhi
+++++++++626
+++++++++s Manila
+++++++++129
+++++++++s Luanda
+++++++++204
+++++++++s Surat
+++++++++440
+++++++++s Atlanta
+++++++++22
+++++++++s Ahmedabad
+++++++++1251
+++++++++s Khartoum
+++++++++302
+++++++++s Surat
+++++++++73
+++++++++s Guadalajara
+++++++++209
+++++++++s Manila
+++++++++721
+++++++++s Toronto
+++++++++793
+++++++++s Dar es Salaam
+++++++++216
+++++++++s Manila
+++++++++785
+++++++++s Ahmedabad
+++++++++116
+++++++++s Barcelona
+++++++++548
+++++++++s Dhaka
+++++++++1041
+++++++++s Khartoum
+++++++++305
+++++++++s Los Angeles
+++++++++1208
+++++++++s Dhaka
+++++++++1079
+++++++++s Tokyo
+++++++++1422
+++++++++s Manila
+++++++++722
+++++++++s Osaka
+++++++++1298
+++++++++s Surat
+++++++++431
+++++++++s Khartoum
+++++++++294
+++++++++s Barcelona
+++++++++1445
+++++++++s Luanda
+++++++++589
+++++++++s Chennai
+++++++++645
+++++++++s Luanda
+++++++++835
+++++++++s Manila
+++++++++773
+++++++++s Fukuoka
+++++++++1256
+++++++++s Dhaka
+++++++++1300
+++++++++s Philadelphia
+++++++++230
+++++++++s Philadelphia
+++++++++571
+++++++++s Hong Kong
+++++++++209
+++++++++s Khartoum
+++++++++419
+++++++++s Paris
+++++++++706
+++++++++s Sao Paulo
+++++++++516
+++++++++s Tehran
+++++++++843
+++++++++s Khartoum
+++++++++429
+++++++++s Khartoum
+++++++++66
+++++++++s Guadalajara
+++++++++815
+++++++++s Khartoum
+++++++++63
+++++++++s Guadalajara
+++++++++397
+++++++++s Baghdad
+++++++++218
+++++++++s Saint Petersburg
+++++++++274
+++++++++s Dar es Salaam
+++++++++1359
+++++++++s Lima
+++++++++439
+++++++++s Khartoum
+++++++++312
+++++++++s Luanda
+++++++++1345
+++++++++s Seoul
+++++++++220
+++++++++s Tokyo
+++++++++1020
+++++++++s Atlanta
+++++++++25
+++++++++s Sao Paulo
+++++++++1179
+++++++++s Manila
+++++++++732
+++++++++s Philadelphia
+++++++++122
+++++++++s Manila
+++++++++723
+++++++++s Baghdad
+++++++++205
+++++++++s Osaka
+++++++++1018
+++++++++s Tehran
+++++++++762
+++++++++s Luanda
+++++++++1412
+++++++++s Toronto
+++++++++845
+++++++++s Qingdao
+++++++++24
+++++++++s Surat
+++++++++528
+++++++++s Chennai
+++++++++385
+++++++++s Ahmedabad
+++++++++542
+++++++++s Philadelphia
+++++++++1447
+++++++++s Lima
+++++++++733
+++++++++s Guadalajara
+++++++++205
+++++++++s Delhi
+++++++++326
+++++++++s Chennai
+++++++++754
+++++++++s Atlanta
+++++++++823
+++++++++s Manila
+++++++++377
+++++++++s Khartoum
+++++++++303
+++++++++s Delhi
+++++++++512
+++++++++s Surat
+++++++++498
+++++++++s Guadalajara
+++++++++165
+++++++++s Manila
+++++++++720
+++++++++s Washington
+++++++++170
+++++++++s Hyderabad
+++++++++280
+++++++++s Lima
+++++++++370
+++++++++s Tokyo
+++++++++98
+++++++++s Toronto
+++++++++854
+++++++++s Ahmedabad
+++++++++618
+++++++++s Toronto
+++++++++858
+++++++++s Tehran
+++++++++1421
+++++++++s Qingdao
+++++++++783
+++++++++s Barcelona
+++++++++784
+++++++++s Santiago
+++++++++690
+++++++++s Fukuoka
+++++++++1082
+++++++++s Jinan
+++++++++232
+++++++++s Chennai
+++++++++385
+++++++++s Paris
+++++++++710
+++++++++s Tokyo
+++++++++1427
+++++++++s Chennai
+++++++++754
+++++++++s Miami
+++++++++920
+++++++++s Toronto
+++++++++407
+++++++++s Guadalajara
+++++++++806
+++++++++s Miami
+++++++++923
+++++++++s Philadelphia
+++++++++226
+++++++++s Manila
+++++++++720
+++++++++s Manila
+++++++++133
+++++++++s Toronto
+++++++++852
+++++++++s Barcelona
+++++++++886
+++++++++s Sao Paulo
+++++++++68
+++++++++s Delhi
+++++++++630
+++++++++s Los Angeles
+++++++++428
+++++++++s Washington
+++++++++917
+++++++++s Atlanta
+++++++++322
+++++++++s Atlanta
+++++++++549
+++++++++s Manila
+++++++++137
+++++++++s Miami
+++++++++1135
+++++++++s Guadalajara
+++++++++399
+++++++++A Dar es Salaam
+++++++++a Qingdao
+++++++++1015 95
+++++++++u Toronto
+++++++++402
+++++++++A Lagos
+++++++++L
+++++++++a Qingdao
+++++++++910 139
+++++++++R Dar es Salaam
+++++++++r Washington
+++++++++917
+++++++++u Osaka
+++++++++103
+++++++++R Tokyo
+++++++++a Baghdad
+++++++++309 68
+++++++++L
+++++++++R Jinan
+++++++++L
+++++++++s Washington
+++++++++170
+++++++++L
+++++++++R Hyderabad
+++++++++r Lima
+++++++++727
+++++++++u Khartoum
+++++++++302
+++++++++A Nagoya
+++++++++u Los Angeles
+++++++++1329
+++++++++a Luanda
+++++++++1364 38
+++++++++r Philadelphia
+++++++++1436
+++++++++A Johannesburg
+++++++++A New York City
+++++++++a Los Angeles
+++++++++270 149
+++++++++A Los Angeles
+++++++++R Manila
+++++++++r Beijing
+++++++++473
+++++++++A Beijing
+++++++++r Tokyo
+++++++++1414
+++++++++a Lima
+++++++++1003 11
+++++++++r Dhaka
+++++++++227
+++++++++s Fukuoka
+++++++++38
+++++++++s Moscow
+++++++++499
+++++++++u Delhi
+++++++++508
+++++++++r Jinan
+++++++++220
+++++++++L
+++++++++a Qingdao
+++++++++314 81
+++++++++s Manila
+++++++++878
+++++++++a Sao Paulo
+++++++++457 134
+++++++++L
+++++++++R Hong Kong
+++++++++A Nagoya
+++++++++s Lima
+++++++++962
+++++++++u Baghdad
+++++++++1319
+++++++++L
+++++++++R Dhaka
+++++++++L
+++++++++u Lima
+++++++++432
+++++++++a Barcelona
+++++++++756 138
+++++++++s Toronto
+++++++++784
+++++++++u Dar es Salaam
+++++++++209
+++++++++R Miami
+++++++++u Washington
+++++++++1380
+++++++++s Manila
+++++++++784
+++++++++A London
+++++++++s Surat
+++++++++459
+++++++++L
+++++++++A Manila
+++++++++A Istanbul
+++++++++r Toronto
+++++++++782
+++++++++r Saint Petersburg
+++++++++1330
+++++++++s Guadalajara
+++++++++396
+++++++++A Tianjin
+++++++++r Tokyo
+++++++++98
+++++++++R Luanda
+++++++++r Dhaka
+++++++++122
+++++++++R Lagos
+++++++++u Fukuoka
+++++++++694
+++++++++r Jinan
+++++++++76
+++++++++u Sao Paulo
+++++++++457
+++++++++a Philadelphia
+++++++++455 175
+++++++++L
+++++++++u Delhi
+++++++++718
+++++++++r Osaka
+++++++++1005
+++++++++A Harbin
+++++++++u Luanda
+++++++++584
+++++++++r Los Angeles
+++++++++424
+++++++++L
+++++++++u Los Angeles
+++++++++824
+++++++++L
+++++++++R Khartoum
+++++++++r Barcelona
+++++++++545
+++++++++r Philadelphia
+++++++++502
+++++++++R Moscow
+++++++++r Hyderabad
+++++++++601
+++++++++u Los Angeles
+++++++++824
+++++++++A Nagoya
+++++++++R Washington, D.C.
+++++++++L
+++++++++L
+++++++++s Qingdao
+++++++++790
+++++++++R Sao Paulo
+++++++++A Shanghai
+++++++++A Paris
+++++++++u Beijing
+++++++++402
+++++++++r Philadelphia
+++++++++455
+++++++++s Luanda
+++++++++1053
+++++++++a Saint Petersburg
+++++++++322 141
+++++++++r Osaka
+++++++++103
+++++++++r Barcelona
+++++++++879
+++++++++a Baghdad
+++++++++732 76
+++++++++r Baghdad
+++++++++309
+++++++++a Tehran
+++++++++1213 65
+++++++++a Tehran
+++++++++270 7
+++++++++R Manila
+++++++++L
+++++++++A Nanjing
+++++++++r Luanda
+++++++++204
+++++++++L
+++++++++u Los Angeles
+++++++++824
+++++++++a Seoul
+++++++++161 99
+++++++++s Ahmedabad
+++++++++546
+++++++++a Atlanta
+++++++++920 91
+++++++++a Tianjin
+++++++++85 108
+++++++++a Lima
+++++++++1345 173
+++++++++r Manila
+++++++++865
+++++++++r Luanda
+++++++++584
+++++++++A Singapore
+++++++++L
+++++++++u Manila
+++++++++364
+++++++++L
+++++++++A Kolkata
+++++++++a Nanjing
+++++++++1014 161
+++++++++u Jinan
+++++++++1293
+++++++++u Miami
+++++++++918
+++++++++L
+++++++++R Johannesburg
+++++++++L
+++++++++L
+++++++++A Kuala Lumpur
+++++++++u Miami
+++++++++961
+++++++++R Atlanta
+++++++++A Ahmedabad
+++++++++A Istanbul
+++++++++u Baghdad
+++++++++732
+++++++++a New York City
+++++++++1256 182
+++++++++R Qingdao
+++++++++r Guadalajara
+++++++++385
+++++++++R Guadalajara
+++++++++s Surat
+++++++++463
+++++++++r Nanjing
+++++++++1014
+++++++++A Hangzhou
+++++++++A Lahore
+++++++++s Los Angeles
+++++++++1198
+++++++++R Seoul
+++++++++A Fukuoka
+++++++++A Foshan
+++++++++u Sao Paulo
+++++++++62
+++++++++L
+++++++++a Beijing
+++++++++9 165
+++++++++a Istanbul
+++++++++877 85
+++++++++R Kolkata
+++++++++R Foshan
+++++++++R Toronto
+++++++++a Barcelona
+++++++++1008 74
+++++++++s Sao Paulo
+++++++++1183
+++++++++A Shenzhen
+++++++++A Hong Kong
+++++++++A Shenzhen
+++++++++R Philadelphia
+++++++++u Toronto
+++++++++844
+++++++++R Nagoya
+++++++++a London
+++++++++599 14
+++++++++A Chengdu
+++++++++a Paris
+++++++++1063 129
+++++++++r Lima
+++++++++14
+++++++++L
+++++++++s Luanda
+++++++++1374
+++++++++a Tehran
+++++++++371 109
+++++++++r Miami
+++++++++918
+++++++++a New York City
+++++++++272 66
+++++++++L
+++++++++a Harbin
+++++++++633 24
+++++++++R Tehran
+++++++++A Khartoum
+++++++++a Shenzhen
+++++++++930 112
+++++++++a Istanbul
+++++++++1125 123
+++++++++u Qingdao
+++++++++782
+++++++++L
+++++++++R Shanghai
+++++++++s Osaka
+++++++++808
+++++++++a Baghdad
+++++++++658 29
+++++++++u Tianjin
+++++++++85
+++++++++r Atlanta
+++++++++321
+++++++++r Khartoum
+++++++++302
+++++++++A Los Angeles
+++++++++A Dhaka
+++++++++L
+++++++++s Qingdao
+++++++++660
+++++++++A Toronto
+++++++++u Luanda
+++++++++1041
+++++++++u Guadalajara
+++++++++195
+++++++++L
+++++++++a Hangzhou
+++++++++553 187
+++++++++s Fukuoka
+++++++++1256
+++++++++L
+++++++++L
+++++++++u Osaka
+++++++++799
++++++++diff --git a/testMedium.txt b/testMedium.txt
++++++++new file mode 100644
++++++++index 0000000..3ddcea1
++++++++--- /dev/null
+++++++++++ b/testMedium.txt
++++++++@@ -0,0 +1,766 @@
+++++++++L
+++++++++A Manila
+++++++++A Jakarta
+++++++++A Saint Petersburg
+++++++++A Atlanta
+++++++++A Hong Kong
+++++++++A Philadelphia
+++++++++A Chicago
+++++++++A Foshan
+++++++++A Fukuoka
+++++++++A Chennai
+++++++++A Dallas
+++++++++A Guangzhou
+++++++++A Chengdu
+++++++++A Ho Chi Minh City
+++++++++A Bangkok
+++++++++A Nanjing
+++++++++A Moscow
+++++++++A Chengdu
+++++++++A Lahore
+++++++++A Philadelphia
+++++++++A Bogota
+++++++++A Pune
+++++++++A Suzhou
+++++++++A Dongguan
+++++++++A Paris
+++++++++A Chennai
+++++++++A Dongguan
+++++++++A Lima
+++++++++A Qingdao
+++++++++A Kolkata
+++++++++a Nanjing
+++++++++1262 198
+++++++++a Dongguan
+++++++++72 86
+++++++++a Foshan
+++++++++776 178
+++++++++a Bangkok
+++++++++1177 9
+++++++++a Saint Petersburg
+++++++++59 145
+++++++++a Pune
+++++++++925 113
+++++++++a Chicago
+++++++++155 192
+++++++++a Atlanta
+++++++++1400 4
+++++++++a Jakarta
+++++++++795 145
+++++++++a Atlanta
+++++++++1177 147
+++++++++a Suzhou
+++++++++93 109
+++++++++a Paris
+++++++++95 197
+++++++++a Nanjing
+++++++++916 142
+++++++++a Pune
+++++++++1133 134
+++++++++a Chennai
+++++++++307 49
+++++++++a Qingdao
+++++++++91 177
+++++++++a Dallas
+++++++++500 174
+++++++++a Atlanta
+++++++++457 94
+++++++++a Lima
+++++++++993 151
+++++++++a Chengdu
+++++++++1108 189
+++++++++a Fukuoka
+++++++++44 70
+++++++++a Paris
+++++++++1107 25
+++++++++a Lima
+++++++++1052 62
+++++++++a Guangzhou
+++++++++1410 160
+++++++++a Manila
+++++++++602 45
+++++++++a Nanjing
+++++++++1410 105
+++++++++a Guangzhou
+++++++++1211 170
+++++++++a Foshan
+++++++++1427 175
+++++++++a Fukuoka
+++++++++279 183
+++++++++a Philadelphia
+++++++++329 169
+++++++++a Moscow
+++++++++1385 5
+++++++++a Chennai
+++++++++1258 163
+++++++++a Chicago
+++++++++1304 114
+++++++++a Dongguan
+++++++++1221 26
+++++++++a Philadelphia
+++++++++182 26
+++++++++a Suzhou
+++++++++396 159
+++++++++a Chengdu
+++++++++524 33
+++++++++a Ho Chi Minh City
+++++++++869 63
+++++++++a Kolkata
+++++++++656 1
+++++++++a Atlanta
+++++++++246 41
+++++++++a Chengdu
+++++++++626 182
+++++++++a Saint Petersburg
+++++++++1133 134
+++++++++a Suzhou
+++++++++348 13
+++++++++a Chicago
+++++++++1337 18
+++++++++a Philadelphia
+++++++++1224 23
+++++++++a Fukuoka
+++++++++68 193
+++++++++a Philadelphia
+++++++++793 20
+++++++++a Saint Petersburg
+++++++++229 197
+++++++++a Bogota
+++++++++818 86
+++++++++a Chengdu
+++++++++826 46
+++++++++a Bangkok
+++++++++575 16
+++++++++a Paris
+++++++++101 180
+++++++++a Fukuoka
+++++++++406 174
+++++++++a Ho Chi Minh City
+++++++++1114 108
+++++++++a Lahore
+++++++++1163 131
+++++++++a Ho Chi Minh City
+++++++++118 111
+++++++++a Foshan
+++++++++333 156
+++++++++a Kolkata
+++++++++287 0
+++++++++a Lahore
+++++++++1263 28
+++++++++a Bogota
+++++++++980 116
+++++++++a Bogota
+++++++++1392 84
+++++++++a Suzhou
+++++++++111 84
+++++++++a Hong Kong
+++++++++726 56
+++++++++a Kolkata
+++++++++663 118
+++++++++a Saint Petersburg
+++++++++1369 41
+++++++++a Atlanta
+++++++++1138 89
+++++++++a Qingdao
+++++++++406 78
+++++++++a Lima
+++++++++1019 194
+++++++++a Kolkata
+++++++++1242 80
+++++++++a Foshan
+++++++++810 6
+++++++++a Atlanta
+++++++++936 36
+++++++++a Manila
+++++++++933 147
+++++++++a Ho Chi Minh City
+++++++++612 31
+++++++++a Bangkok
+++++++++1383 70
+++++++++a Kolkata
+++++++++324 94
+++++++++a Atlanta
+++++++++1318 62
+++++++++a Fukuoka
+++++++++1136 56
+++++++++a Atlanta
+++++++++348 41
+++++++++a Moscow
+++++++++1335 129
+++++++++a Manila
+++++++++1222 33
+++++++++a Chengdu
+++++++++1374 183
+++++++++a Foshan
+++++++++313 20
+++++++++a Philadelphia
+++++++++1211 143
+++++++++a Dongguan
+++++++++40 104
+++++++++a Atlanta
+++++++++539 85
+++++++++a Chicago
+++++++++756 22
+++++++++a Suzhou
+++++++++20 113
+++++++++a Kolkata
+++++++++172 34
+++++++++a Moscow
+++++++++1306 15
+++++++++a Qingdao
+++++++++465 13
+++++++++a Moscow
+++++++++921 144
+++++++++a Saint Petersburg
+++++++++1264 189
+++++++++a Bangkok
+++++++++965 179
+++++++++a Pune
+++++++++21 100
+++++++++a Saint Petersburg
+++++++++1227 183
+++++++++a Lahore
+++++++++752 15
+++++++++a Chicago
+++++++++643 117
+++++++++a Suzhou
+++++++++18 66
+++++++++a Guangzhou
+++++++++110 16
+++++++++a Dongguan
+++++++++1279 94
+++++++++s Jakarta
+++++++++802
+++++++++s Foshan
+++++++++787
+++++++++s Nanjing
+++++++++1263
+++++++++s Manila
+++++++++941
+++++++++s Lima
+++++++++1060
+++++++++s Chengdu
+++++++++1120
+++++++++s Qingdao
+++++++++99
+++++++++s Philadelphia
+++++++++329
+++++++++s Nanjing
+++++++++1266
+++++++++s Manila
+++++++++1235
+++++++++s Qingdao
+++++++++96
+++++++++s Atlanta
+++++++++257
+++++++++s Kolkata
+++++++++666
+++++++++s Kolkata
+++++++++663
+++++++++s Chengdu
+++++++++636
+++++++++s Ho Chi Minh City
+++++++++1120
+++++++++s Bogota
+++++++++1394
+++++++++s Lahore
+++++++++1171
+++++++++s Paris
+++++++++108
+++++++++s Ho Chi Minh City
+++++++++1120
+++++++++s Foshan
+++++++++342
+++++++++s Qingdao
+++++++++417
+++++++++s Chennai
+++++++++315
+++++++++s Foshan
+++++++++1431
+++++++++s Guangzhou
+++++++++1224
+++++++++s Nanjing
+++++++++928
+++++++++s Ho Chi Minh City
+++++++++1125
+++++++++s Kolkata
+++++++++338
+++++++++s Dongguan
+++++++++1281
+++++++++s Moscow
+++++++++1314
+++++++++s Foshan
+++++++++343
+++++++++s Dongguan
+++++++++1221
+++++++++s Paris
+++++++++1110
+++++++++s Bangkok
+++++++++1178
+++++++++s Manila
+++++++++1229
+++++++++s Ho Chi Minh City
+++++++++121
+++++++++s Paris
+++++++++109
+++++++++s Manila
+++++++++614
+++++++++s Foshan
+++++++++789
+++++++++s Ho Chi Minh City
+++++++++120
+++++++++s Jakarta
+++++++++803
+++++++++s Chicago
+++++++++770
+++++++++s Kolkata
+++++++++660
+++++++++s Moscow
+++++++++1335
+++++++++s Saint Petersburg
+++++++++1147
+++++++++s Philadelphia
+++++++++192
+++++++++s Nanjing
+++++++++916
+++++++++s Dallas
+++++++++514
+++++++++s Ho Chi Minh City
+++++++++626
+++++++++s Philadelphia
+++++++++1225
+++++++++s Saint Petersburg
+++++++++1377
+++++++++s Suzhou
+++++++++402
+++++++++s Bogota
+++++++++993
+++++++++s Chennai
+++++++++1271
+++++++++s Chennai
+++++++++307
+++++++++s Paris
+++++++++106
+++++++++s Moscow
+++++++++1318
+++++++++s Nanjing
+++++++++1267
+++++++++s Bogota
+++++++++991
+++++++++s Atlanta
+++++++++1139
+++++++++s Suzhou
+++++++++34
+++++++++s Paris
+++++++++104
+++++++++s Chennai
+++++++++1272
+++++++++s Ho Chi Minh City
+++++++++623
+++++++++s Dongguan
+++++++++1287
+++++++++s Saint Petersburg
+++++++++1372
+++++++++s Atlanta
+++++++++1142
+++++++++s Foshan
+++++++++320
+++++++++s Chicago
+++++++++1338
+++++++++s Jakarta
+++++++++803
+++++++++s Foshan
+++++++++816
+++++++++s Ho Chi Minh City
+++++++++122
+++++++++s Atlanta
+++++++++549
+++++++++s Dongguan
+++++++++83
+++++++++s Saint Petersburg
+++++++++70
+++++++++s Chengdu
+++++++++1384
+++++++++s Philadelphia
+++++++++796
+++++++++s Ho Chi Minh City
+++++++++1123
+++++++++s Atlanta
+++++++++248
+++++++++s Atlanta
+++++++++1147
+++++++++s Suzhou
+++++++++115
+++++++++s Dongguan
+++++++++72
+++++++++s Qingdao
+++++++++410
+++++++++s Chicago
+++++++++766
+++++++++s Philadelphia
+++++++++1221
+++++++++s Lima
+++++++++1005
+++++++++s Atlanta
+++++++++1146
+++++++++s Lima
+++++++++1003
+++++++++s Ho Chi Minh City
+++++++++1117
+++++++++s Paris
+++++++++109
+++++++++s Atlanta
+++++++++1190
+++++++++s Moscow
+++++++++1388
+++++++++s Kolkata
+++++++++666
+++++++++s Dallas
+++++++++506
+++++++++s Chennai
+++++++++314
+++++++++s Pune
+++++++++925
+++++++++s Lahore
+++++++++1274
+++++++++s Nanjing
+++++++++927
+++++++++s Philadelphia
+++++++++799
+++++++++s Dallas
+++++++++505
+++++++++s Hong Kong
+++++++++727
+++++++++s Moscow
+++++++++925
+++++++++s Qingdao
+++++++++417
+++++++++s Philadelphia
+++++++++336
+++++++++s Bangkok
+++++++++1178
+++++++++s Moscow
+++++++++1347
+++++++++s Atlanta
+++++++++540
+++++++++s Guangzhou
+++++++++122
+++++++++s Atlanta
+++++++++1323
+++++++++s Philadelphia
+++++++++1224
+++++++++s Fukuoka
+++++++++1140
+++++++++s Chicago
+++++++++167
+++++++++s Bogota
+++++++++1401
+++++++++s Foshan
+++++++++813
+++++++++s Bogota
+++++++++1403
+++++++++s Qingdao
+++++++++465
+++++++++s Atlanta
+++++++++469
+++++++++s Pune
+++++++++1133
+++++++++s Qingdao
+++++++++93
+++++++++s Moscow
+++++++++1316
+++++++++s Dongguan
+++++++++49
+++++++++s Suzhou
+++++++++23
+++++++++s Qingdao
+++++++++468
+++++++++s Kolkata
+++++++++335
+++++++++s Atlanta
+++++++++542
+++++++++s Kolkata
+++++++++666
+++++++++s Lima
+++++++++996
+++++++++s Foshan
+++++++++1441
+++++++++s Philadelphia
+++++++++184
+++++++++s Qingdao
+++++++++104
+++++++++s Atlanta
+++++++++1406
+++++++++s Foshan
+++++++++335
+++++++++s Atlanta
+++++++++256
+++++++++s Suzhou
+++++++++28
+++++++++s Lima
+++++++++1025
+++++++++s Saint Petersburg
+++++++++1277
+++++++++s Bogota
+++++++++987
+++++++++s Bogota
+++++++++981
+++++++++s Ho Chi Minh City
+++++++++623
+++++++++s Kolkata
+++++++++337
+++++++++s Bogota
+++++++++1398
+++++++++s Atlanta
+++++++++1145
+++++++++s Bangkok
+++++++++973
+++++++++s Manila
+++++++++940
+++++++++s Atlanta
+++++++++351
+++++++++s Ho Chi Minh City
+++++++++622
+++++++++s Kolkata
+++++++++667
+++++++++s Paris
+++++++++104
+++++++++s Chennai
+++++++++1265
+++++++++s Ho Chi Minh City
+++++++++881
+++++++++s Foshan
+++++++++1427
+++++++++s Guangzhou
+++++++++1225
+++++++++s Kolkata
+++++++++1251
+++++++++s Manila
+++++++++941
+++++++++s Jakarta
+++++++++808
+++++++++s Hong Kong
+++++++++736
+++++++++s Foshan
+++++++++1438
+++++++++s Dongguan
+++++++++1289
+++++++++s Saint Petersburg
+++++++++1370
+++++++++s Hong Kong
+++++++++737
+++++++++s Dongguan
+++++++++75
+++++++++s Philadelphia
+++++++++340
+++++++++s Suzhou
+++++++++118
+++++++++s Qingdao
+++++++++414
+++++++++s Bogota
+++++++++823
+++++++++s Chengdu
+++++++++828
+++++++++s Foshan
+++++++++317
+++++++++s Suzhou
+++++++++27
+++++++++s Saint Petersburg
+++++++++1379
+++++++++s Ho Chi Minh City
+++++++++618
+++++++++s Lahore
+++++++++766
+++++++++s Chicago
+++++++++1304
+++++++++s Bangkok
+++++++++1179
+++++++++s Manila
+++++++++609
+++++++++s Chengdu
+++++++++630
+++++++++s Paris
+++++++++1108
+++++++++s Kolkata
+++++++++662
+++++++++s Hong Kong
+++++++++732
+++++++++s Pune
+++++++++932
+++++++++s Chennai
+++++++++1258
+++++++++s Paris
+++++++++95
+++++++++s Pune
+++++++++938
+++++++++s Chengdu
+++++++++635
+++++++++s Paris
+++++++++1118
+++++++++s Ho Chi Minh City
+++++++++612
+++++++++s Ho Chi Minh City
+++++++++1117
+++++++++s Ho Chi Minh City
+++++++++612
+++++++++s Kolkata
+++++++++667
+++++++++s Chennai
+++++++++1266
+++++++++s Foshan
+++++++++782
+++++++++s Philadelphia
+++++++++330
+++++++++s Manila
+++++++++1227
+++++++++s Lahore
+++++++++1170
+++++++++s Guangzhou
+++++++++114
+++++++++s Foshan
+++++++++788
+++++++++s Guangzhou
+++++++++122
+++++++++s Atlanta
+++++++++544
+++++++++s Paris
+++++++++1113
+++++++++s Pune
+++++++++938
+++++++++s Dallas
+++++++++502
+++++++++A Jinan
+++++++++a Dallas
+++++++++368 9
+++++++++r Lahore
+++++++++1163
+++++++++A Guadalajara
+++++++++s Kolkata
+++++++++335
+++++++++R Saint Petersburg
+++++++++a Chicago
+++++++++1209 107
+++++++++L
+++++++++r Fukuoka
+++++++++44
+++++++++u Nanjing
+++++++++916
+++++++++R Hong Kong
+++++++++u Guangzhou
+++++++++1211
+++++++++s Atlanta
+++++++++946
+++++++++A Rio de Janeiro
+++++++++u Bangkok
+++++++++575
+++++++++s Saint Petersburg
+++++++++240
+++++++++a Paris
+++++++++47 91
+++++++++u Kolkata
+++++++++656
+++++++++a Rio de Janeiro
+++++++++344 21
+++++++++a Dongguan
+++++++++822 109
+++++++++a Jakarta
+++++++++301 168
+++++++++L
+++++++++R Kolkata
+++++++++L
+++++++++u Fukuoka
+++++++++406
+++++++++A Chennai
+++++++++r Jakarta
+++++++++301
+++++++++A Delhi
+++++++++L
+++++++++u Philadelphia
+++++++++329
+++++++++L
+++++++++a Suzhou
+++++++++410 59
+++++++++u Atlanta
+++++++++1177
+++++++++L
+++++++++a Suzhou
+++++++++1324 112
+++++++++R Jakarta
+++++++++R Chicago
+++++++++a Manila
+++++++++433 124
+++++++++a Bangkok
+++++++++1360 44
+++++++++A Dar es Salaam
+++++++++r Saint Petersburg
+++++++++1227
+++++++++u Dongguan
+++++++++40
+++++++++a Paris
+++++++++53 137
+++++++++a Dongguan
+++++++++477 27
+++++++++a Chennai
+++++++++1271 197
+++++++++R Qingdao
+++++++++r Bangkok
+++++++++1383
+++++++++a Chennai
+++++++++149 23
+++++++++L
+++++++++r Saint Petersburg
+++++++++229
+++++++++a Chennai
+++++++++283 168
+++++++++s Lima
+++++++++1021
+++++++++a Fukuoka
+++++++++273 11
+++++++++A Mexico City
+++++++++a Delhi
+++++++++1276 157
+++++++++a Ho Chi Minh City
+++++++++729 61
+++++++++u Suzhou
+++++++++20
+++++++++r Guangzhou
+++++++++1410
+++++++++L
+++++++++u Bogota
+++++++++980
+++++++++a Chengdu
+++++++++276 132
+++++++++a Rio de Janeiro
+++++++++590 30
+++++++++r Chicago
+++++++++1337
+++++++++s Saint Petersburg
+++++++++1369
+++++++++u Qingdao
+++++++++91
+++++++++u Ho Chi Minh City
+++++++++612
+++++++++R Pune
+++++++++s Dongguan
+++++++++484
+++++++++u Nanjing
+++++++++1410
+++++++++u Chengdu
+++++++++1108
+++++++++a Chennai
+++++++++341 192
+++++++++R Dallas
+++++++++s Dongguan
+++++++++75
+++++++++L
+++++++++a Ho Chi Minh City
+++++++++184 26
+++++++++r Ho Chi Minh City
+++++++++612
+++++++++r Ho Chi Minh City
+++++++++1114
+++++++++a Philadelphia
+++++++++1294 136
+++++++++L
+++++++++r Nanjing
+++++++++1262
++++++++diff --git a/testSmall.txt b/testSmall.txt
++++++++new file mode 100644
++++++++index 0000000..f4ec80b
++++++++--- /dev/null
+++++++++++ b/testSmall.txt
++++++++@@ -0,0 +1,405 @@
+++++++++L
+++++++++A Barcelona
+++++++++A Surat
+++++++++A Hong Kong
+++++++++A Paris
+++++++++A Moscow
+++++++++A Chennai
+++++++++A Dalian
+++++++++A Dallas
+++++++++A Johannesburg
+++++++++A Santiago
+++++++++A Tehran
+++++++++A Country
+++++++++A Dalian
+++++++++A Madrid
+++++++++A Lima
+++++++++A Baghdad
+++++++++A London
+++++++++A Manila
+++++++++A Wuhan
+++++++++A Khartoum
+++++++++a Santiago
+++++++++1367 161
+++++++++a Hong Kong
+++++++++1264 40
+++++++++a Country
+++++++++689 165
+++++++++a Dalian
+++++++++1233 85
+++++++++a Surat
+++++++++852 188
+++++++++a Manila
+++++++++1204 151
+++++++++a Manila
+++++++++976 88
+++++++++a London
+++++++++52 159
+++++++++a London
+++++++++931 144
+++++++++a Baghdad
+++++++++971 50
+++++++++a Moscow
+++++++++391 42
+++++++++a Country
+++++++++404 93
+++++++++a Chennai
+++++++++277 87
+++++++++a Moscow
+++++++++877 194
+++++++++a Surat
+++++++++122 42
+++++++++a Baghdad
+++++++++1304 176
+++++++++a Baghdad
+++++++++291 159
+++++++++a Lima
+++++++++859 128
+++++++++a Manila
+++++++++1039 11
+++++++++a Wuhan
+++++++++1059 72
+++++++++a Dallas
+++++++++638 109
+++++++++a Lima
+++++++++1053 174
+++++++++a Dallas
+++++++++1344 172
+++++++++a Barcelona
+++++++++997 102
+++++++++a Moscow
+++++++++15 84
+++++++++a Moscow
+++++++++1256 57
+++++++++a Barcelona
+++++++++69 169
+++++++++a London
+++++++++848 77
+++++++++a Wuhan
+++++++++348 32
+++++++++a Surat
+++++++++146 190
+++++++++a Moscow
+++++++++374 85
+++++++++a Khartoum
+++++++++166 145
+++++++++a Manila
+++++++++1349 35
+++++++++a Country
+++++++++659 100
+++++++++a Dalian
+++++++++460 88
+++++++++a Dalian
+++++++++542 56
+++++++++a Paris
+++++++++298 48
+++++++++a Wuhan
+++++++++906 106
+++++++++a Chennai
+++++++++446 195
+++++++++a Khartoum
+++++++++755 86
+++++++++a Madrid
+++++++++255 162
+++++++++a Khartoum
+++++++++774 189
+++++++++a Manila
+++++++++753 82
+++++++++a Baghdad
+++++++++56 162
+++++++++a Dalian
+++++++++1259 196
+++++++++a Hong Kong
+++++++++97 2
+++++++++a Manila
+++++++++1084 43
+++++++++a Paris
+++++++++518 29
+++++++++a Moscow
+++++++++710 196
+++++++++a Tehran
+++++++++375 108
+++++++++a Chennai
+++++++++836 14
+++++++++a Santiago
+++++++++1186 103
+++++++++a Madrid
+++++++++815 186
+++++++++a Barcelona
+++++++++761 55
+++++++++a Paris
+++++++++1223 86
+++++++++a Hong Kong
+++++++++190 8
+++++++++a Manila
+++++++++1331 53
+++++++++a Country
+++++++++1277 0
+++++++++a Madrid
+++++++++269 7
+++++++++a Santiago
+++++++++94 189
+++++++++s Barcelona
+++++++++770
+++++++++s Wuhan
+++++++++1064
+++++++++s Santiago
+++++++++1375
+++++++++s Dalian
+++++++++1241
+++++++++s London
+++++++++851
+++++++++s Moscow
+++++++++718
+++++++++s London
+++++++++56
+++++++++s Hong Kong
+++++++++1273
+++++++++s Chennai
+++++++++841
+++++++++s Khartoum
+++++++++167
+++++++++s Surat
+++++++++853
+++++++++s Moscow
+++++++++1259
+++++++++s Baghdad
+++++++++984
+++++++++s Hong Kong
+++++++++102
+++++++++s Manila
+++++++++978
+++++++++s Madrid
+++++++++256
+++++++++s Barcelona
+++++++++1011
+++++++++s Dalian
+++++++++553
+++++++++s Dallas
+++++++++646
+++++++++s Wuhan
+++++++++354
+++++++++s London
+++++++++939
+++++++++s Barcelona
+++++++++769
+++++++++s Hong Kong
+++++++++1277
+++++++++s Santiago
+++++++++1187
+++++++++s Moscow
+++++++++393
+++++++++s Country
+++++++++661
+++++++++s Surat
+++++++++860
+++++++++s Manila
+++++++++1355
+++++++++s Country
+++++++++691
+++++++++s Moscow
+++++++++19
+++++++++s Country
+++++++++667
+++++++++s Manila
+++++++++977
+++++++++s Surat
+++++++++156
+++++++++s Barcelona
+++++++++1004
+++++++++s Dallas
+++++++++638
+++++++++s Moscow
+++++++++399
+++++++++s Dalian
+++++++++1264
+++++++++s Country
+++++++++1280
+++++++++s Wuhan
+++++++++907
+++++++++s Madrid
+++++++++828
+++++++++s Santiago
+++++++++1375
+++++++++s Paris
+++++++++311
+++++++++s Chennai
+++++++++456
+++++++++s Madrid
+++++++++825
+++++++++s Madrid
+++++++++823
+++++++++s Chennai
+++++++++460
+++++++++s London
+++++++++937
+++++++++s Baghdad
+++++++++1307
+++++++++s Wuhan
+++++++++349
+++++++++s Country
+++++++++691
+++++++++s Dalian
+++++++++550
+++++++++s Manila
+++++++++1353
+++++++++s Baghdad
+++++++++61
+++++++++s Moscow
+++++++++1256
+++++++++s Surat
+++++++++129
+++++++++s Khartoum
+++++++++172
+++++++++s Moscow
+++++++++882
+++++++++s Baghdad
+++++++++977
+++++++++s Surat
+++++++++134
+++++++++s Hong Kong
+++++++++1273
+++++++++s Country
+++++++++659
+++++++++s Khartoum
+++++++++777
+++++++++s Manila
+++++++++1040
+++++++++s Wuhan
+++++++++1059
+++++++++s Surat
+++++++++865
+++++++++s Country
+++++++++408
+++++++++s Baghdad
+++++++++973
+++++++++s Paris
+++++++++1226
+++++++++s Santiago
+++++++++100
+++++++++s Paris
+++++++++1227
+++++++++s London
+++++++++940
+++++++++s Moscow
+++++++++1269
+++++++++s Khartoum
+++++++++774
+++++++++s Barcelona
+++++++++69
+++++++++s Manila
+++++++++977
+++++++++s Wuhan
+++++++++354
+++++++++s London
+++++++++942
+++++++++s Barcelona
+++++++++763
+++++++++s Moscow
+++++++++18
+++++++++s Hong Kong
+++++++++204
+++++++++s Manila
+++++++++767
+++++++++s London
+++++++++56
+++++++++s Moscow
+++++++++386
+++++++++s Santiago
+++++++++108
+++++++++s Manila
+++++++++1339
+++++++++s Manila
+++++++++1040
+++++++++s Santiago
+++++++++1187
+++++++++s Country
+++++++++1288
+++++++++s Wuhan
+++++++++1062
+++++++++s Baghdad
+++++++++295
+++++++++s Madrid
+++++++++264
+++++++++s Chennai
+++++++++457
+++++++++s Surat
+++++++++866
+++++++++s Moscow
+++++++++378
+++++++++s Dalian
+++++++++1268
+++++++++s Manila
+++++++++1351
+++++++++s Dallas
+++++++++1354
+++++++++s Paris
+++++++++301
+++++++++s Manila
+++++++++976
+++++++++s Moscow
+++++++++398
+++++++++A Dongguan
+++++++++u Surat
+++++++++852
+++++++++R Barcelona
+++++++++A Osaka
+++++++++u Santiago
+++++++++1367
+++++++++s Dalian
+++++++++468
+++++++++r Baghdad
+++++++++56
+++++++++L
+++++++++a Madrid
+++++++++451 154
+++++++++A Country
+++++++++A Belo Horizonte
+++++++++r Baghdad
+++++++++291
+++++++++a Belo Horizonte
+++++++++1079 103
+++++++++L
+++++++++s Wuhan
+++++++++352
+++++++++r Baghdad
+++++++++1304
+++++++++r Surat
+++++++++146
+++++++++R Baghdad
+++++++++r Baghdad
+++++++++971
+++++++++s Manila
+++++++++989
+++++++++r Surat
+++++++++122
+++++++++u Dallas
+++++++++1344
+++++++++A Jakarta
+++++++++a Surat
+++++++++1137 83
+++++++++u Manila
+++++++++753
+++++++++s Lima
+++++++++865
+++++++++L
+++++++++s Dalian
+++++++++1241
+++++++++r Manila
+++++++++1204
+++++++++u Santiago
+++++++++1186
+++++++++A Dhaka
+++++++++L
+++++++++R Dongguan
+++++++++s Lima
+++++++++862
+++++++++s Moscow
+++++++++387
+++++++++L
+++++++++A London
+++++++++R Madrid
+++++++++a Jakarta
+++++++++261 84
+++++++++a Manila
+++++++++360 171
+++++++diff --git a/test.sh b/test.sh
+++++++index f8ecbf4..1753085 100755
+++++++--- a/test.sh
++++++++++ b/test.sh
+++++++@@ -262,7 +262,7 @@ EOF
+++++++     echo "FAIL"
+++++++     [[ -n $VERBOSE ]] && echo "Your program produced:"
+++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++-    [[ -n $VERBOSE ]] && echo "$answers"    
++++++++    [[ -n $VERBOSE ]] && echo "$answer"    
+++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++     [[ -n $VERBOSE ]] && echo "Output should have been:"
+++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++
++++++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++ Date:   Mon Sep 28 22:04:59 2020 -0400
++++++
+++++ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++ Date:   Thu Oct 1 18:48:16 2020 -0400
+++++
++++ commit da6661f7aace13f7460f1854b7f421ec09bce194
++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++ Date:   Thu Oct 1 20:00:10 2020 -0400
++++
+++ commit 1fc06886442458df6df848e0f90ac6e155b1d853
+++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++ Date:   Fri Oct 2 10:20:31 2020 -0400
+++
++ commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Fri Oct 2 11:01:38 2020 -0400
++
+ commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Fri Oct 2 15:36:11 2020 -0400
+
 commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Fri Oct 2 16:23:51 2020 -0400

commit 1493f977f82c9be3c010cec6e5cd7ae2e3fd4fb5
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Sun Oct 4 10:13:37 2020 -0400

    working on remove

diff --git a/assignment-3.c b/assignment-3.c
index 8031b9d..bf54b5c 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -512,11 +512,14 @@ void flight_schedule_add(city_t city){ //should this call get city
 
 
 void flight_schedule_remove(city_t city){
-  struct flight_schedule *temp = flight_schedule_find(city);
-  //if(temp == NULL){
-   
-  //}
-  flight_schedule_free(temp);
+  //struct flight_schedule *temp = flight_schedule_find(city);
+  if(flight_schedule_find(city) == NULL){
+   msg_city_bad(city);
+  }
+  else{
+    flight_schedule_free(flight_schedule_find(city));
+  }
+  
 }
 
 
diff --git a/gitlog.txt b/gitlog.txt
index 02b9e97..5a29c1f 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4707 @@
+commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Oct 2 16:23:51 2020 -0400
+
+    add_flight working properly
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 473a053..8031b9d 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -393,8 +393,11 @@ struct flight_schedule * flight_schedule_allocate(void){
+   struct flight_schedule *temp =  flight_schedules_free;
+   struct flight_schedule *fs;
+   if (flight_schedules_free != NULL){
+-    flight_schedules_free = temp->next;
+-    flight_schedules_free->prev = NULL;
++    flight_schedules_free = temp->next; //make sure 
++    if(temp->next != NULL) {
++      flight_schedules_free->prev = NULL;
++    }
++    
+   }
+ 
+ 
+@@ -528,13 +531,31 @@ void flight_schedule_listAll(void){
+ }
+ 
+ void flight_schedule_list(city_t city){
+-  struct flight_schedule *temp = flight_schedules_active; 
++  if(flight_schedule_find(city) == NULL){
++    msg_city_bad(city);
++    return;
++  }
++  struct flight_schedule *fs = flight_schedule_find(city);
++  msg_city_flights(city);
++  for(int j =0; j < MAX_FLIGHTS_PER_CITY; j++){
++    if(fs->flights[j].time != -1){
++      msg_flight_info(fs->flights[j].time, fs->flights[j].available, fs->flights[j].capacity);
++    }
++  }
++  printf("\n");
++
++
++
++
++  /*struct flight_schedule *temp = flight_schedules_active; 
++  msg_city_flights(city);
+   while(temp != NULL){
+     if (strcmp(city,temp->destination) == 0){
+       printf("%s\n", temp->destination); //displaying memory address
+     }
+     temp = temp->next;
+   }
++  */
+ }
+ 
+ void flight_schedule_add_flight(city_t city){
+@@ -557,16 +578,18 @@ void flight_schedule_add_flight(city_t city){
+     msg_city_max_flights_reached(city);
+   }
+   else{
+-    int c = (temp->flights[i].capacity); // look for value of c 
+-    
+-    flight_capacity_get(&c);
+-    printf("ADD_FLIGHT %d", c);
+-    flights[i].available = c; 
++
+     int t = (flights[i].time);
+     
+     time_get(&t);
+-    printf("ADD FLIGHT 2 %d", t);
+-
++    //printf("ADD FLIGHT time %d", t);
++    temp->flights[i].time = t;
++    int c = (temp->flights[i].capacity); // look for value of c 
++    
++    flight_capacity_get(&c);
++    //printf("ADD_FLIGHT cap %d", c);
++    temp->flights[i].available = c; 
++    temp->flights[i].capacity = c;
+   }
+   /*
+   int *t;
+@@ -644,7 +667,7 @@ void flight_schedule_schedule_seat(city_t city) {
+      return;
+    }
+ 
+-  int nearest = 0;
++  int nearest = 0; 
+   int position = 0;
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+diff --git a/gitlog.txt b/gitlog.txt
+index 9868705..02b9e97 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4606 @@
++commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Oct 2 15:36:11 2020 -0400
++
++    debugging
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 09d6332..473a053 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -11,8 +11,8 @@
++ 
++ // Limit constants
++ #define MAX_CITY_NAME_LEN 20
++-#define MAX_FLIGHTS_PER_CITY 5
++-#define MAX_DEFAULT_SCHEDULES 50
+++#define MAX_FLIGHTS_PER_CITY 3
+++#define MAX_DEFAULT_SCHEDULES 2
++ 
++ // Time definitions
++ #define TIME_MIN 0
++@@ -403,7 +403,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++   if(flight_schedules_active != NULL){
++     flight_schedules_active->prev = temp;
++   }
++-   flight_schedules_active = temp;
+++  flight_schedules_active = temp;
++ 
++   /*
++   flight_schedules_free-> prev->next = flight_schedules_active;
++@@ -422,7 +422,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++   //flight_schedules_active = temp;
++   temp = flight_schedules_active;
++   */
++-  return(temp); //return temp?
+++  return(temp); //return temp temp could be null resulting in error
++ }
++ 
++ //flight schedule free
++@@ -478,18 +478,18 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++ 
++   while(temp != NULL){
++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++-      break; //return(temp);
+++      return(temp);
++     }
++     temp = temp->next;
++   }
++-  return (temp); //this might return null 
+++ //this might return null 
++ }
++ 
++ 
++ void flight_schedule_add(city_t city){ //should this call get city
++ 
++   //first cheeck to see if city exists
++-  if (flight_schedules_free ==NULL){
+++  if (flight_schedules_free == NULL){
++     msg_schedule_no_free();
++   }
++ 
++@@ -510,9 +510,9 @@ void flight_schedule_add(city_t city){ //should this call get city
++ 
++ void flight_schedule_remove(city_t city){
++   struct flight_schedule *temp = flight_schedule_find(city);
++-  if(temp == NULL){
++-
++-  }
+++  //if(temp == NULL){
+++   
+++  //}
++   flight_schedule_free(temp);
++ }
++ 
++@@ -540,7 +540,35 @@ void flight_schedule_list(city_t city){
++ void flight_schedule_add_flight(city_t city){
++   //flight_schedule_add(city);
++   struct flight_schedule *temp = flight_schedule_find(city);
+++  struct flight *flights;
+++  flights = temp->flights;
+++  int full = 0;
+++  int i =0;
+++
+++  while(temp->flights[i].time != -1){
+++    
+++    if (i == MAX_FLIGHTS_PER_CITY){
+++      full = 1;
+++      break;
+++    }
+++    i++;
+++  }
+++  if(full){
+++    msg_city_max_flights_reached(city);
+++  }
+++  else{
+++    int c = (temp->flights[i].capacity); // look for value of c 
+++    
+++    flight_capacity_get(&c);
+++    printf("ADD_FLIGHT %d", c);
+++    flights[i].available = c; 
+++    int t = (flights[i].time);
+++    
+++    time_get(&t);
+++    printf("ADD FLIGHT 2 %d", t);
++ 
+++  }
+++  /*
++   int *t;
++   time_get(t); //do this then check if t is 0 to see if valid or not 
++   
++@@ -557,8 +585,8 @@ void flight_schedule_add_flight(city_t city){
++       return;
++   }
++ 
++-  struct flight *flights;
++-  flights = temp->flights;
+++  //struct flight *flights;
+++  //flights = temp->flights;
++   //flights[i]
++   //loop thru flights until open flight then add flight
++ 
++@@ -570,6 +598,7 @@ void flight_schedule_add_flight(city_t city){
++     }
++   }
++   //else return that it failed
+++  */
++ }
++ 
++ 
++@@ -594,7 +623,7 @@ void flight_schedule_remove_flight(city_t city){
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++     if(flights[i].time == *t){
++-      flights[i].time = -1;//was flights[i] will this change correct one?
+++      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
++       flights[i].capacity = 0;  
++       flights[i].available = 0;
++       break;
++diff --git a/gitlog.txt b/gitlog.txt
++index 3fd9781..9868705 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4459 @@
+++commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Oct 2 11:01:38 2020 -0400
+++
+++    working on debugging
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index dceff55..09d6332 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
+++   }
+++    flight_schedules_active = temp;
+++ 
+++-
+++-
+++-
+++-
+++-
+++   /*
+++   flight_schedules_free-> prev->next = flight_schedules_active;
+++   
+++@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++     }
+++     temp = temp->next;
+++   }
+++-  return (temp);
++++  return (temp); //this might return null 
+++ }
+++ 
+++ 
+++ void flight_schedule_add(city_t city){ //should this call get city
+++ 
+++   //first cheeck to see if city exists
++++  if (flight_schedules_free ==NULL){
++++    msg_schedule_no_free();
++++  }
++++
+++   struct flight_schedule *fs = flight_schedule_find(city);
+++   if (fs != NULL)  {
+++     msg_city_exists(city);
+++@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
+++   
+++   if(time_get(t) == 0) { //or just t
+++     msg_flight_bad_time();      
+++-    return;
++++    return; //maybe use go to end
+++    }
+++ 
+++-  int *c;
+++-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++  int c = 15;
++++  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
+++   
+++-  if (flight_capacity_get(c) == 0){ //show message plane is full
+++-      msg_flight_no_seats();
++++  if (flight_capacity_get(&c) == 0){ //show message plane is full
++++      //msg_flight_no_seats();
+++       return;
+++   }
+++ 
+++@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++     if(flights[i].time == -1){
+++       flights[i].time = *t;//was flights[i] will this change correct one?
+++-      flights[i].capacity = *c;
++++      flights[i].capacity = c;
+++       break;
+++     }
+++   }
+++   //else return that it failed
++++}
+++ 
+++ 
+++-}
+++ 
+++ void flight_schedule_remove_flight(city_t city){
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
+++    if(time_get(t) == 0) {
+++      return;
+++    }
+++-  int *c;
+++-  flight_capacity_get(c); 
+++-  if(flight_capacity_get(c) == 0){
++++  int c =15;
++++  flight_capacity_get(&c); 
++++  if(flight_capacity_get(&c) == 0){
+++       return;
+++   }
+++   
+++@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
+++   int *t;
+++   time_get(t);
+++   if(time_get(t) == 0) {
++++     msg_flight_bad_time();
+++      return;
+++    }
+++ 
+++diff --git a/gitlog.txt b/gitlog.txt
+++index 1364b9f..3fd9781 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -1,3 +1,4351 @@
++++commit 1fc06886442458df6df848e0f90ac6e155b1d853
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Fri Oct 2 10:20:31 2020 -0400
++++
++++    working on add_flight
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index e50b45e..dceff55 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
++++ 
++++ void flight_schedule_remove(city_t city){
++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++  if(temp == NULL){
+++++
+++++  }
++++   flight_schedule_free(temp);
++++ }
++++ 
++++@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
++++ }
++++ 
++++ void flight_schedule_add_flight(city_t city){
++++-  flight_schedule_add(city);
+++++  //flight_schedule_add(city);
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++ 
++++-
++++   int *t;
++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++   
++++   if(time_get(t) == 0) { //or just t
++++-     return;
+++++    msg_flight_bad_time();      
+++++    return;
++++    }
++++ 
++++   int *c;
++++   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++   
++++-  if (flight_capacity_get(c) == 0){
+++++  if (flight_capacity_get(c) == 0){ //show message plane is full
+++++      msg_flight_no_seats();
++++       return;
++++   }
++++ 
++++@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
++++   int *c;
++++   flight_capacity_get(c); 
++++   if(flight_capacity_get(c) == 0){
++++-
+++++      return;
++++   }
++++   
++++   struct flight *flights;
++++diff --git a/gitlog.txt b/gitlog.txt
++++index 29ef0ec..1364b9f 100644
++++--- a/gitlog.txt
+++++++ b/gitlog.txt
++++@@ -1,3 +1,4286 @@
+++++commit da6661f7aace13f7460f1854b7f421ec09bce194
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Thu Oct 1 20:00:10 2020 -0400
+++++
+++++    fixed aloocate, add and list
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 6644548..e50b45e 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
+++++ //returns pointer to updated flight schedule
+++++ struct flight_schedule * flight_schedule_allocate(void){
+++++ 
+++++-  struct flight_schedule *temp;// =  flight_schedules_free;
++++++  struct flight_schedule *temp =  flight_schedules_free;
++++++  struct flight_schedule *fs;
++++++  if (flight_schedules_free != NULL){
++++++    flight_schedules_free = temp->next;
++++++    flight_schedules_free->prev = NULL;
++++++  }
++++++
++++++
++++++  temp->next = flight_schedules_active;
++++++  //if active not null set active prev to temp
++++++  if(flight_schedules_active != NULL){
++++++    flight_schedules_active->prev = temp;
++++++  }
++++++   flight_schedules_active = temp;
++++++
++++++
++++++
++++++
+++++ 
+++++ 
+++++-  flight_schedules_free = flight_schedules_free->next;
++++++  /*
+++++   flight_schedules_free-> prev->next = flight_schedules_active;
+++++   
+++++   //temp->next = flight_schedules_active;
+++++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++ 
+++++   //flight_schedules_active = temp;
+++++   temp = flight_schedules_active;
++++++  */
+++++   return(temp); //return temp?
+++++ }
+++++ 
+++++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++++ 
+++++   while(temp != NULL){
+++++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++++-      return(temp);
++++++      break; //return(temp);
+++++     }
+++++     temp = temp->next;
+++++   }
++++++  return (temp);
+++++ }
+++++ 
+++++ 
+++++ void flight_schedule_add(city_t city){ //should this call get city
++++++
++++++  //first cheeck to see if city exists
++++++  struct flight_schedule *fs = flight_schedule_find(city);
++++++  if (fs != NULL)  {
++++++    msg_city_exists(city);
++++++  }
++++++
++++++  if (fs == NULL){
+++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++-  
+++++-  //if (flight_schedule_find == city)  {
+++++-  //  msg_city_exists(city);
+++++- // } //
+++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++   
+++++   //p->destination = ch; 
+++++ 
++++++  }
+++++ }
+++++ 
+++++ 
+++++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
+++++ 
+++++ 
+++++ void flight_schedule_listAll(void){
+++++-  struct flight_schedule *temp = flight_schedules_active;
++++++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
+++++   while(temp != NULL){
+++++-    printf("%p", temp); // print temp is disaplying memory address
++++++    printf("%s\n", temp->destination); // print temp is disaplying memory address
+++++     temp = temp->next;
+++++   }
+++++ 
+++++ }
+++++ 
+++++ void flight_schedule_list(city_t city){
+++++-  struct flight_schedule *temp = flight_schedules_active;
++++++  struct flight_schedule *temp = flight_schedules_active; 
+++++   while(temp != NULL){
+++++     if (strcmp(city,temp->destination) == 0){
+++++-      printf("%p", *temp); //displaying memory address
++++++      printf("%s\n", temp->destination); //displaying memory address
+++++     }
+++++     temp = temp->next;
+++++   }
+++++diff --git a/gitlog.txt b/gitlog.txt
+++++index c3e37f7..29ef0ec 100644
+++++--- a/gitlog.txt
++++++++ b/gitlog.txt
+++++@@ -1,3 +1,4170 @@
++++++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Thu Oct 1 18:48:16 2020 -0400
++++++
++++++    editing and debugging
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 881c536..6644548 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++ 
++++++   // Loop through the Array connecting them
++++++   // as a linear doubly linked list
+++++++  if (n == 1) {
+++++++    flight_schedule_reset(&array[0]);
+++++++    array[0].next = NULL;
+++++++    array[0].prev = NULL;
+++++++    flight_schedules_free = &array[0];
+++++++    return;
+++++++  }
+++++++
+++++++  flight_schedule_reset(&array[0]);
+++++++  array[0].next = &array[1];
++++++   array[0].prev = NULL;
++++++-  for (int i=0; i<n-1; i++) {
+++++++
+++++++  for (int i=1; i<n-1; i++) {
++++++     flight_schedule_reset(&array[i]);
++++++     array[i].next = &array[i+1];
++++++-    array[i+1].prev = &array[i];
+++++++    array[i].prev = &array[i-1];
++++++   }
+++++++
++++++   // Takes care of last node.  
++++++   flight_schedule_reset(&array[n-1]); // reset clears all fields
++++++   array[n-1].next = NULL;
++++++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
++++++ //returns pointer to updated flight schedule
++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++ 
++++++-  struct flight_schedule *temp =  flight_schedules_free;
+++++++  struct flight_schedule *temp;// =  flight_schedules_free;
+++++++
+++++++
++++++   flight_schedules_free = flight_schedules_free->next;
+++++++  flight_schedules_free-> prev->next = flight_schedules_active;
+++++++  
+++++++  //temp->next = flight_schedules_active;
+++++++  flight_schedules_active = flight_schedules_free->prev;
++++++   flight_schedules_free->prev = NULL;
++++++-  temp->next = flight_schedules_active;
++++++-
++++++-  flight_schedules_active = temp;
++++++-  flight_schedules_active->next->prev = flight_schedules_active;
+++++++  
++++++   //temp->prev = NULL;
++++++   //struct flight_schedule *temp2 = flight_schedules_active
++++++-  
++++++-  return(flight_schedules_active);
+++++++
+++++++  if(flight_schedules_active -> next != NULL){
+++++++    flight_schedules_active->next->prev = flight_schedules_active;
+++++++  }
+++++++
+++++++  //flight_schedules_active = temp;
+++++++  temp = flight_schedules_active;
+++++++  return(temp); //return temp?
++++++ }
++++++ 
++++++ //flight schedule free
++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++-  int counter = 0;
+++++++  flight_schedules_active = flight_schedules_active->next;
+++++++  flight_schedule_reset(fs);
+++++++  fs->next = flight_schedules_free;
+++++++  flight_schedules_free = fs;
+++++++  fs->next->prev = fs;
+++++++
+++++++
+++++++  /*int counter = 0;
++++++   struct flight_schedule *temp = flight_schedules_active;
++++++   while(temp != NULL) {
++++++     if(temp == fs){ //use flight schedule find instead
++++++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     temp = temp->next;
++++++     counter++;
++++++   }
++++++-  
++++++   if (counter == 0){
++++++     flight_schedules_active = temp->next;
++++++     flight_schedules_active->prev = NULL;
++++++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     //flight_schedule_reset(temp);
++++++ 
++++++   }
++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++++-    temp->prev->next = temp->next;
+++++++  else{ 
+++++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
++++++     temp->next->prev = temp->prev;
++++++     temp->next = NULL;
++++++     temp->prev = NULL;
++++++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     flight_schedules_free = temp;
++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++   }
++++++-  else{
++++++-    temp->prev = NULL;
++++++-    flight_schedules_active->prev->next = NULL;
++++++-
++++++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++-
++++++-    temp->next = flight_schedules_free;
++++++-    flight_schedules_free = temp;
++++++-    flight_schedules_free->next->prev = flight_schedules_free;
++++++-    
++++++-  }
+++++++}
+++++++*/
++++++ }
++++++ 
++++++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++++ void flight_schedule_add(city_t city){ //should this call get city
++++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++   
++++++-  if (flight_schedule_find) {
++++++-    msg_city_exists(city);
++++++-  }
+++++++  //if (flight_schedule_find == city)  {
+++++++  //  msg_city_exists(city);
+++++++ // } //
++++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++   
++++++   //p->destination = ch; 
++++++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
++++++ void flight_schedule_listAll(void){
++++++   struct flight_schedule *temp = flight_schedules_active;
++++++   while(temp != NULL){
++++++-    printf("%p", &temp);
+++++++    printf("%p", temp); // print temp is disaplying memory address
++++++     temp = temp->next;
++++++   }
++++++ 
++++++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
++++++   struct flight_schedule *temp = flight_schedules_active;
++++++   while(temp != NULL){
++++++     if (strcmp(city,temp->destination) == 0){
++++++-      printf("%p", &temp);
+++++++      printf("%p", *temp); //displaying memory address
++++++     }
++++++     temp = temp->next;
++++++   }
++++++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
++++++ 
++++++   int *t;
++++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++++   
++++++-  if (time == 1 || capacity == 1 ){
++++++-      return 1;
+++++++  if(time_get(t) == 0) { //or just t
+++++++     return;
+++++++   }
+++++++
+++++++  int *c;
+++++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++++++  
+++++++  if (flight_capacity_get(c) == 0){
+++++++      return;
++++++   }
++++++ 
++++++   struct flight *flights;
++++++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
++++++ 
++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++     if(flights[i].time == -1){
++++++-      flights[i].time = time;//was flights[i] will this change correct one?
++++++-      flights[i].capacity = capacity;
+++++++      flights[i].time = *t;//was flights[i] will this change correct one?
+++++++      flights[i].capacity = *c;
++++++       break;
++++++     }
++++++   }
++++++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++  //idk if this is the right time to call or even need too
++++++ 
++++++-
++++++-
++++++   int *t;
++++++   time_get(t); //if 1 continue; else tell user
++++++    if(time_get(t) == 0) {
++++++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
++++++    }
++++++   int *c;
++++++   flight_capacity_get(c); 
+++++++  if(flight_capacity_get(c) == 0){
+++++++
+++++++  }
++++++   
++++++   struct flight *flights;
++++++   flights = temp->flights;
++++++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
++++++ 
++++++   struct flight *flights;
++++++   flights = temp->flights;
+++++++  int *t;
+++++++  time_get(t);
+++++++  if(time_get(t) == 0) {
+++++++     return;
+++++++   }
++++++ 
++++++-  int time = time_get();
++++++   int nearest = 0;
++++++   int position = 0;
++++++ 
++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++-    if(flights[i].time >= time){
++++++-      if(flights[i].time - nearest <= nearest - time){
+++++++    if(flights[i].time >= *t){
+++++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
++++++         nearest = flights[i].time;
++++++         position = i;
++++++       }
++++++@@ -573,18 +602,21 @@ flights[position].available--;
++++++   
++++++ }
++++++ 
++++++-flight_schedule_unschedule_seat(city_t city){
+++++++ void flight_schedule_unschedule_seat(city_t city){
++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++ 
++++++   struct flight *flights;
++++++   flights = temp->flights;
++++++-
++++++-  int time = time_get();
+++++++  int *t;
+++++++  time_get(t);
+++++++  if(time_get(t) == 0) {
+++++++     return;
+++++++   }
++++++   int nearest = 0;
++++++   int position = 0;
++++++ 
++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++-    if(flights[i].time == time){
+++++++    if(flights[i].time == *t){ //origrinally was time 
++++++      flights[i].available--;
++++++     }
++++++   }
++++++diff --git a/gitlog.txt b/gitlog.txt
++++++index e69de29..c3e37f7 100644
++++++--- a/gitlog.txt
+++++++++ b/gitlog.txt
++++++@@ -0,0 +1,3895 @@
+++++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 22:04:59 2020 -0400
+++++++
+++++++    finshing up scheduling/unscheduling and debuggin
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 322ef6c..881c536 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
+++++++   flight_schedule_add(city);
+++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++ 
+++++++-  time_t time = time_get();
+++++++-  int capacity = flight_capacity_get();
++++++++
++++++++  int *t;
++++++++  time_get(t); //do this then check if t is 0 to see if valid or not 
++++++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++++++   
+++++++   if (time == 1 || capacity == 1 ){
+++++++       return 1;
+++++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
+++++++ 
+++++++ 
+++++++ 
+++++++-  time_t time = time_get();
+++++++-  int capacity = flight_capacity_get(); 
++++++++  int *t;
++++++++  time_get(t); //if 1 continue; else tell user
++++++++   if(time_get(t) == 0) {
++++++++     return;
++++++++   }
++++++++  int *c;
++++++++  flight_capacity_get(c); 
+++++++   
+++++++   struct flight *flights;
+++++++   flights = temp->flights;
+++++++ 
+++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++-    if(flights[i].time == time){
++++++++    if(flights[i].time == *t){
+++++++       flights[i].time = -1;//was flights[i] will this change correct one?
+++++++       flights[i].capacity = 0;  
+++++++       flights[i].available = 0;
+++++++
+++++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 21:51:04 2020 -0400
+++++++
+++++++    schedule and unschedule seat
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 6db86b9..322ef6c 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
+++++++ 
+++++++ 
+++++++ void flight_schedule_schedule_seat(city_t city) {
++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++
++++++++  struct flight *flights;
++++++++  flights = temp->flights;
++++++++
++++++++  int time = time_get();
++++++++  int nearest = 0;
++++++++  int position = 0;
++++++++
++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++    if(flights[i].time >= time){
++++++++      if(flights[i].time - nearest <= nearest - time){
++++++++        nearest = flights[i].time;
++++++++        position = i;
++++++++      }
++++++++    }
++++++++  }
++++++++flights[position].available--;
+++++++   
+++++++-}
+++++++\ No newline at end of file
++++++++}
++++++++
++++++++flight_schedule_unschedule_seat(city_t city){
++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++
++++++++  struct flight *flights;
++++++++  flights = temp->flights;
++++++++
++++++++  int time = time_get();
++++++++  int nearest = 0;
++++++++  int position = 0;
++++++++
++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++    if(flights[i].time == time){
++++++++     flights[i].available--;
++++++++    }
++++++++  }
++++++++}
++++++++
+++++++
+++++++commit 4490dcc205f2959c8fa299368be096d99f756e27
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 21:23:54 2020 -0400
+++++++
+++++++    continuing work on add and remove flights
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index d9c99ff..6db86b9 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
+++++++   flight_schedule_add(city);
+++++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++++ 
+++++++-  int time = time_get();
++++++++  time_t time = time_get();
+++++++   int capacity = flight_capacity_get();
+++++++   
+++++++   if (time == 1 || capacity == 1 ){
+++++++       return 1;
+++++++   }
+++++++ 
+++++++-  temp->flight->flights[];
++++++++  struct flight *flights;
++++++++  flights = temp->flights;
++++++++  //flights[i]
++++++++  //loop thru flights until open flight then add flight
+++++++ 
++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++    if(flights[i].time == -1){
++++++++      flights[i].time = time;//was flights[i] will this change correct one?
++++++++      flights[i].capacity = capacity;
++++++++      break;
++++++++    }
++++++++  }
++++++++  //else return that it failed
++++++++
++++++++
++++++++}
++++++++
++++++++void flight_schedule_remove_flight(city_t city){
++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++ //idk if this is the right time to call or even need too
+++++++ 
+++++++ 
++++++++
++++++++  time_t time = time_get();
++++++++  int capacity = flight_capacity_get(); 
++++++++  
++++++++  struct flight *flights;
++++++++  flights = temp->flights;
++++++++
++++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++++    if(flights[i].time == time){
++++++++      flights[i].time = -1;//was flights[i] will this change correct one?
++++++++      flights[i].capacity = 0;  
++++++++      flights[i].available = 0;
++++++++      break;
++++++++    }
++++++++  }
+++++++ }
++++++++
++++++++
++++++++void flight_schedule_schedule_seat(city_t city) {
++++++++  
++++++++}
+++++++\ No newline at end of file
+++++++
+++++++commit e41186f0b9058ea4390a8f0fda78296861580f31
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 20:05:28 2020 -0400
+++++++
+++++++    updates to add_flight
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index aae10c7..d9c99ff 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++   }
+++++++ }
+++++++ 
+++++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++++++   struct flight_schedule *temp = flight_schedules_active;
++++++++
+++++++   while(temp != NULL){
+++++++-    if (strcmp(city,temp->destination) == 0){
++++++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++++++       return(temp);
+++++++     }
+++++++     temp = temp->next;
+++++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++ }
+++++++ 
+++++++ 
++++++++void flight_schedule_add(city_t city){ //should this call get city
++++++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++++  
++++++++  if (flight_schedule_find) {
++++++++    msg_city_exists(city);
++++++++  }
++++++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++++  
++++++++  //p->destination = ch; 
++++++++
++++++++}
++++++++
++++++++
++++++++void flight_schedule_remove(city_t city){
++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++  flight_schedule_free(temp);
++++++++}
++++++++
++++++++
++++++++
++++++++void flight_schedule_listAll(void){
++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++  while(temp != NULL){
++++++++    printf("%p", &temp);
++++++++    temp = temp->next;
++++++++  }
++++++++
++++++++}
++++++++
++++++++void flight_schedule_list(city_t city){
++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++  while(temp != NULL){
++++++++    if (strcmp(city,temp->destination) == 0){
++++++++      printf("%p", &temp);
++++++++    }
++++++++    temp = temp->next;
++++++++  }
++++++++}
++++++++
++++++++void flight_schedule_add_flight(city_t city){
++++++++  flight_schedule_add(city);
++++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++++
++++++++  int time = time_get();
++++++++  int capacity = flight_capacity_get();
++++++++  
++++++++  if (time == 1 || capacity == 1 ){
++++++++      return 1;
++++++++  }
++++++++
++++++++  temp->flight->flights[];
++++++++
++++++++
++++++++
++++++++}
+++++++
+++++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 18:35:40 2020 -0400
+++++++
+++++++    correction of free, working on find
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index a03a0af..aae10c7 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++   int counter = 0;
+++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++   while(temp != NULL) {
+++++++-    if(temp == fs){
++++++++    if(temp == fs){ //use flight schedule find instead
+++++++       break;
+++++++     }
+++++++     temp = temp->next;
+++++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     flight_schedule_reset(temp);
+++++++ 
+++++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++++-    flight_schedule_free = temp;
++++++++    flight_schedules_free = temp;
+++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++     //flight_schedule_reset(temp);
+++++++ 
+++++++   }
+++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++++++     temp->prev->next = temp->next;
+++++++     temp->next->prev = temp->prev;
+++++++     temp->next = NULL;
+++++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     flight_schedule_reset(temp);
+++++++ 
+++++++     temp->next = flight_schedules_free;
+++++++-    flight_schedule_free = temp;
++++++++    flight_schedules_free = temp;
+++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++   }
+++++++   else{
+++++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++++ 
+++++++     temp->next = flight_schedules_free;
+++++++-    flight_schedule_free = temp;
++++++++    flight_schedules_free = temp;
+++++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++++     
+++++++   }
+++++++-}
+++++++\ No newline at end of file
++++++++}
++++++++
++++++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++  while(temp != NULL){
++++++++    if (strcmp(city,temp->destination) == 0){
++++++++      return(temp);
++++++++    }
++++++++    temp = temp->next;
++++++++  }
++++++++}
++++++++
++++++++
+++++++
+++++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 15:08:53 2020 -0400
+++++++
+++++++    working on flight_schedule_free
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 1f30cd1..a03a0af 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++++ //flight schedule free
+++++++ //takes schedule off active list, resets it, then places the node back on free list
+++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++-  struct flight_schedule *temp = flight
++++++++  int counter = 0;
++++++++  struct flight_schedule *temp = flight_schedules_active;
++++++++  while(temp != NULL) {
++++++++    if(temp == fs){
++++++++      break;
++++++++    }
++++++++    temp = temp->next;
++++++++    counter++;
++++++++  }
++++++++  
++++++++  if (counter == 0){
++++++++    flight_schedules_active = temp->next;
++++++++    flight_schedules_active->prev = NULL;
++++++++    temp->next = NULL;
++++++++
++++++++    flight_schedule_reset(temp);
++++++++
++++++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++++++    flight_schedule_free = temp;
++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++    //flight_schedule_reset(temp);
++++++++
++++++++  }
++++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++++    temp->prev->next = temp->next;
++++++++    temp->next->prev = temp->prev;
++++++++    temp->next = NULL;
++++++++    temp->prev = NULL;
++++++++
++++++++    flight_schedule_reset(temp);
++++++++
++++++++    temp->next = flight_schedules_free;
++++++++    flight_schedule_free = temp;
++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++  }
++++++++  else{
++++++++    temp->prev = NULL;
++++++++    flight_schedules_active->prev->next = NULL;
++++++++
++++++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++++
++++++++    temp->next = flight_schedules_free;
++++++++    flight_schedule_free = temp;
++++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++++    
++++++++  }
+++++++ }
+++++++\ No newline at end of file
+++++++
+++++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Mon Sep 28 14:12:10 2020 -0400
+++++++
+++++++    correcting allocate
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index ec71f49..1f30cd1 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
+++++++ //returns pointer to updated flight schedule
+++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++ 
+++++++-  struct flight_schedule temp = 
++++++++  struct flight_schedule *temp =  flight_schedules_free;
++++++++  flight_schedules_free = flight_schedules_free->next;
++++++++  flight_schedules_free->prev = NULL;
++++++++  temp->next = flight_schedules_active;
++++++++
++++++++  flight_schedules_active = temp;
++++++++  flight_schedules_active->next->prev = flight_schedules_active;
++++++++  //temp->prev = NULL;
++++++++  //struct flight_schedule *temp2 = flight_schedules_active
+++++++   
+++++++-  
+++++++-  
+++++++-  *flight_schedules_active = *flight_schedules_free->free;
+++++++-
+++++++-  
+++++++-  //flight_schedules_active = flight_schedules_free;
+++++++-  *flight_schedules_free = *flight_schedules_free->next;
+++++++-  *flight_schedules_free->prev = NULL;
+++++++-  return(flight_schedules_active->flights[]);
++++++++  return(flight_schedules_active);
+++++++ }
+++++++ 
+++++++ //flight schedule free
+++++++ //takes schedule off active list, resets it, then places the node back on free list
+++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++-  
++++++++  struct flight_schedule *temp = flight
+++++++ }
+++++++\ No newline at end of file
+++++++
+++++++commit 7c7197814c779e696458438563f16bc76b197fb2
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Fri Sep 25 18:25:04 2020 -0400
+++++++
+++++++    very confused, trying to use pointers to alt sched
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index ff89d23..ec71f49 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
+++++++   return (af->time - bf->time);
+++++++ }
+++++++ 
+++++++-WRITE SOME CODE!
++++++++//WRITE SOME CODE!
+++++++ //flight schedule allocate
++++++++//takes a schedule off the free list and places it on the active list
++++++++//returns pointer to updated flight schedule
+++++++ struct flight_schedule * flight_schedule_allocate(void){
+++++++-  *flight_schedules_active = *flight_schedules_free;
+++++++-  *flight_schedules_free = *flight_schedules_free.next;
+++++++-  return(flight_schedule);
+++++++-}
+++++++ 
++++++++  struct flight_schedule temp = 
++++++++  
++++++++  
++++++++  
++++++++  *flight_schedules_active = *flight_schedules_free->free;
+++++++ 
++++++++  
++++++++  //flight_schedules_active = flight_schedules_free;
++++++++  *flight_schedules_free = *flight_schedules_free->next;
++++++++  *flight_schedules_free->prev = NULL;
++++++++  return(flight_schedules_active->flights[]);
++++++++}
+++++++ 
+++++++ //flight schedule free
+++++++-
++++++++//takes schedule off active list, resets it, then places the node back on free list
+++++++ void flight_schedule_free(struct flight_schedule *fs){
+++++++-  *flight_schedule_active = *flight_schedule_free;
+++++++-  *fs = 
++++++++  
+++++++ }
+++++++\ No newline at end of file
+++++++
+++++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
+++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++++Date:   Fri Sep 25 12:05:56 2020 -0400
+++++++
+++++++    starting work on first 3 helper functions
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 31abde4..ff89d23 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
+++++++ }
+++++++ 
+++++++ WRITE SOME CODE!
++++++++//flight schedule allocate
++++++++struct flight_schedule * flight_schedule_allocate(void){
++++++++  *flight_schedules_active = *flight_schedules_free;
++++++++  *flight_schedules_free = *flight_schedules_free.next;
++++++++  return(flight_schedule);
++++++++}
++++++++
++++++++
++++++++
++++++++//flight schedule free
++++++++
++++++++void flight_schedule_free(struct flight_schedule *fs){
++++++++  *flight_schedule_active = *flight_schedule_free;
++++++++  *fs = 
++++++++}
+++++++\ No newline at end of file
+++++++
+++++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
+++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++++Date:   Thu Sep 24 18:32:49 2020 -0400
+++++++
+++++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
+++++++
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++index 2f5c360..31abde4 100644
+++++++--- a/assignment-3.c
++++++++++ b/assignment-3.c
+++++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++++ // Structure to hold all the information for a single flight
+++++++ //   A city's schedule has an array of these
+++++++ struct flight {
+++++++-  int time;       // departure time of the flight
++++++++  time_t time;       // departure time of the flight
+++++++   int available;  // number of seats currently available on the flight
+++++++   int capacity;   // maximum seat capacity of the flight
+++++++ };
+++++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++++     array[i+1].prev = &array[i];
+++++++   }
+++++++   // Takes care of last node.  
+++++++-  // Its prev pointer will be set in the loop,
+++++++-  // we just have to set its next to NULL.
++++++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
+++++++   array[n-1].next = NULL;
++++++++  array[n-1].prev = &array[n-2];
+++++++   flight_schedules_free = &array[0];
+++++++ }
+++++++ 
+++++++diff --git a/reference b/reference
+++++++index ee9132a..b11f6c6 100755
+++++++Binary files a/reference and b/reference differ
+++++++
+++++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
+++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++++Date:   Mon Sep 21 21:02:39 2020 -0400
+++++++
+++++++    Initial Commit to seed assignment 3. Have fun!
+++++++
+++++++diff --git a/.gitignore b/.gitignore
+++++++new file mode 100644
+++++++index 0000000..8ff04a2
+++++++--- /dev/null
++++++++++ b/.gitignore
+++++++@@ -0,0 +1,4 @@
++++++++*
++++++++!assignment-3.c
++++++++!gitlog.txt
++++++++
+++++++diff --git a/.vscode/launch.json b/.vscode/launch.json
+++++++new file mode 100644
+++++++index 0000000..5f223b9
+++++++--- /dev/null
++++++++++ b/.vscode/launch.json
+++++++@@ -0,0 +1,30 @@
++++++++{
++++++++    // Use IntelliSense to learn about possible attributes.
++++++++    // Hover to view descriptions of existing attributes.
++++++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
++++++++    "version": "0.2.0",
++++++++    "configurations": [
++++++++    
++++++++
++++++++        {
++++++++            "name": "(gdb) Launch",
++++++++            "type": "cppdbg",
++++++++            "request": "launch",
++++++++            "program": "${workspaceFolder}/assignment-3",
++++++++            "args": [],
++++++++            "stopAtEntry": true,
++++++++            "cwd": "${workspaceFolder}",
++++++++            "environment": [],
++++++++            "externalConsole": false,
++++++++            "MIMode": "gdb",
++++++++            "setupCommands": [
++++++++                {
++++++++                    "description": "Enable pretty-printing for gdb",
++++++++                    "text": "-enable-pretty-printing",
++++++++                    "ignoreFailures": true
++++++++                }
++++++++            ],
++++++++            "preLaunchTask": "Build"
++++++++        }
++++++++    ]
++++++++}
+++++++diff --git a/.vscode/settings.json b/.vscode/settings.json
+++++++new file mode 100644
+++++++index 0000000..495436f
+++++++--- /dev/null
++++++++++ b/.vscode/settings.json
+++++++@@ -0,0 +1,21 @@
++++++++{
++++++++    "git.ignoreLegacyWarning": true,
++++++++    "files.autoSave": "afterDelay",
++++++++    "files.exclude": {
++++++++        ".vscode": true,
++++++++        "**/*.o": true,
++++++++        "reference": true,
++++++++        "assignment-3": true,
++++++++        "test.sh":true,
++++++++        "gitlog.txt":true,
++++++++        ".gitignore":true
++++++++    },
++++++++    "editor.renderControlCharacters": true,
++++++++    "C_Cpp.default.cStandard": "c99",
++++++++    "C_Cpp.default.cppStandard": "gnu++11",
++++++++    "C_Cpp.default.defines": [],
++++++++    "C_Cpp.intelliSenseEngine": "Disabled",
++++++++    "C_Cpp.workspaceParsingPriority": "low",
++++++++    "C_Cpp.intelliSenseCacheSize": 100,
++++++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
++++++++}
+++++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+++++++new file mode 100644
+++++++index 0000000..d02618f
+++++++--- /dev/null
++++++++++ b/.vscode/tasks.json
+++++++@@ -0,0 +1,28 @@
++++++++{
++++++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++++++++    // for the documentation about the tasks.json format
++++++++    "version": "2.0.0",
++++++++    "tasks": [
++++++++        {
++++++++            "label": "Build",
++++++++            "type": "shell",
++++++++            "command": "make",
++++++++            "options": {
++++++++                "cwd": "${workspaceFolder}"
++++++++            },
++++++++            "group": {
++++++++                "kind": "build",
++++++++                "isDefault": true
++++++++            },
++++++++            "presentation": {
++++++++                "reveal": "always",
++++++++                "panel": "shared"
++++++++            },
++++++++            "problemMatcher": {
++++++++                "base": "$gcc",
++++++++                "fileLocation": ["relative", "${workspaceRoot}/"]
++++++++            }
++++++++        }
++++++++        
++++++++    ]
++++++++}
+++++++diff --git a/Makefile b/Makefile
+++++++new file mode 100644
+++++++index 0000000..1c3a3d1
+++++++--- /dev/null
++++++++++ b/Makefile
+++++++@@ -0,0 +1,69 @@
++++++++.PHONY: all clean test gitlog
++++++++
++++++++all: assignment-3
++++++++
++++++++assignment-3: assignment-3.c
++++++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
++++++++
++++++++test: assignment-3 gitlog
++++++++	./test.sh
++++++++
++++++++test1: assignment-3
++++++++	./test.sh 1
++++++++
++++++++test2: assignment-3
++++++++	./test.sh 2
++++++++
++++++++test3: assignment-3
++++++++	./test.sh 3
++++++++
++++++++test4: assignment-3
++++++++	./test.sh 4
++++++++
++++++++test5: assignment-3
++++++++	./test.sh 5
++++++++
++++++++test6: assignment-3
++++++++	./test.sh 6
++++++++
++++++++test7: assignment-3
++++++++	./test.sh 7
++++++++
++++++++test8: assignment-3
++++++++	./test.sh 8
++++++++
++++++++test9: assignment-3
++++++++	./test.sh 9
++++++++
++++++++test10: assignment-3
++++++++	./test.sh 10
++++++++
++++++++test11: assignment-3
++++++++	./test.sh 11
++++++++
++++++++test12: assignment-3
++++++++	./test.sh 12
++++++++
++++++++test13: assignment-3
++++++++	./test.sh 13
++++++++
++++++++test14: assignment-3
++++++++	./test.sh 14
++++++++
++++++++test15: assignment-3
++++++++	./test.sh 15
++++++++
++++++++test16: assignment-3
++++++++	./test.sh 16
++++++++
++++++++bonus1: assignment-3
++++++++	./test.sh 1 bonus
++++++++
++++++++bonus2: assignment-3
++++++++	./test.sh 2 bonus
++++++++
++++++++gitlog:
++++++++	git log -p > gitlog.txt
++++++++
++++++++clean:
++++++++	-${RM} assignment-3
+++++++diff --git a/assignment-3.c b/assignment-3.c
+++++++new file mode 100644
+++++++index 0000000..2f5c360
+++++++--- /dev/null
++++++++++ b/assignment-3.c
+++++++@@ -0,0 +1,375 @@
++++++++/**
++++++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
++++++++ *  Let's use our knowledge to write a simple flight management system!
++++++++ **/
++++++++
++++++++#include <stdio.h>
++++++++#include <string.h>
++++++++#include <stdlib.h>
++++++++#include <stdbool.h>
++++++++#include <assert.h>
++++++++
++++++++// Limit constants
++++++++#define MAX_CITY_NAME_LEN 20
++++++++#define MAX_FLIGHTS_PER_CITY 5
++++++++#define MAX_DEFAULT_SCHEDULES 50
++++++++
++++++++// Time definitions
++++++++#define TIME_MIN 0
++++++++#define TIME_MAX ((60 * 24)-1)
++++++++#define TIME_NULL -1
++++++++
++++++++
++++++++/******************************************************************************
++++++++ * Structure and Type definitions                                             *
++++++++ ******************************************************************************/
++++++++typedef int time_t;                        // integers used for time values
++++++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++++++ 
++++++++// Structure to hold all the information for a single flight
++++++++//   A city's schedule has an array of these
++++++++struct flight {
++++++++  int time;       // departure time of the flight
++++++++  int available;  // number of seats currently available on the flight
++++++++  int capacity;   // maximum seat capacity of the flight
++++++++};
++++++++
++++++++// Structure for an individual flight schedule
++++++++// The main data structure of the program is an Array of these structures
++++++++// Each structure will be placed on one of two linked lists:
++++++++//                free or active
++++++++// Initially the active list will be empty and all the schedules
++++++++// will be on the free list.  Adding a schedule is finding the first
++++++++// free schedule on the free list, removing it from the free list,
++++++++// setting its destination city and putting it on the active list
++++++++struct flight_schedule {
++++++++  city_t destination;                          // destination city name
++++++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
++++++++  struct flight_schedule *next;                // link list next pointer
++++++++  struct flight_schedule *prev;                // link list prev pointer
++++++++};
++++++++
++++++++/******************************************************************************
++++++++ * Global / External variables                                                *
++++++++ ******************************************************************************/
++++++++// This program uses two global linked lists of Schedules.  See comments
++++++++// of struct flight_schedule above for details
++++++++struct flight_schedule *flight_schedules_free = NULL;
++++++++struct flight_schedule *flight_schedules_active = NULL;
++++++++
++++++++
++++++++/******************************************************************************
++++++++ * Function Prototypes                                                        *
++++++++ ******************************************************************************/
++++++++// Misc utility io functions
++++++++int city_read(city_t city);           
++++++++bool time_get(time_t *time_ptr);      
++++++++bool flight_capacity_get(int *capacity_ptr);
++++++++void print_command_help(void);
++++++++
++++++++// Core functions of the program
++++++++void flight_schedule_initialize(struct flight_schedule array[], int n);
++++++++struct flight_schedule * flight_schedule_find(city_t city);
++++++++struct flight_schedule * flight_schedule_allocate(void);
++++++++void flight_schedule_free(struct flight_schedule *fs);
++++++++void flight_schedule_add(city_t city);
++++++++void flight_schedule_listAll(void);
++++++++void flight_schedule_list(city_t city);
++++++++void flight_schedule_add_flight(city_t city);
++++++++void flight_schedule_remove_flight(city_t city);
++++++++void flight_schedule_schedule_seat(city_t city);
++++++++void flight_schedule_unschedule_seat(city_t city);
++++++++void flight_schedule_remove(city_t city);
++++++++
++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
++++++++int  flight_compare_time(const void *a, const void *b);
++++++++
++++++++
++++++++int main(int argc, char *argv[]) 
++++++++{
++++++++  long n = MAX_DEFAULT_SCHEDULES;
++++++++  char command;
++++++++  city_t city;
++++++++
++++++++  if (argc > 1) {
++++++++    // If the program was passed an argument then try and convert the first
++++++++    // argument in the a number that will override the default max number
++++++++    // of schedule we will support
++++++++    char *end;
++++++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
++++++++    if (n==0) {
++++++++      printf("ERROR: Bad number of default max scedules specified.\n");
++++++++      exit(EXIT_FAILURE);
++++++++    }
++++++++  }
++++++++
++++++++  // C99 lets us allocate an array of a fixed length as a local 
++++++++  // variable.  Since we are doing this in main and a call to main will be 
++++++++  // active for the entire time of the program's execution this
++++++++  // array will be alive for the entire time -- its memory and values
++++++++  // will be stable for the entire program execution.
++++++++  struct flight_schedule flight_schedules[n];
++++++++ 
++++++++  // Initialize our global lists of free and active schedules using
++++++++  // the elements of the flight_schedules array
++++++++  flight_schedule_initialize(flight_schedules, n);
++++++++
++++++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
++++++++  //  When possible, if we know that some particular thing should have happened
++++++++  //  we think of that as an assertion and write code to test them.
++++++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
++++++++  // the free list to a non-null value and the the active list is a null value.
++++++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
++++++++
++++++++  // Print the instruction in the beginning
++++++++  print_command_help();
++++++++
++++++++  // Command processing loop
++++++++  while (scanf(" %c", &command) == 1) {
++++++++    switch (command) {
++++++++    case 'A': 
++++++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
++++++++      city_read(city);
++++++++      flight_schedule_add(city);
++++++++
++++++++      break;
++++++++    case 'L':
++++++++      // List all active flight schedules eg. "L\n"
++++++++      flight_schedule_listAll();
++++++++      break;
++++++++    case 'l': 
++++++++      // List the flights for a particular city eg. "l\n"
++++++++      city_read(city);
++++++++      flight_schedule_list(city);
++++++++      break;
++++++++    case 'a':
++++++++      // Adds a flight for a particular city "a Toronto\n
++++++++      //                                      360 100\n"
++++++++      city_read(city);
++++++++      flight_schedule_add_flight(city);
++++++++      break;
++++++++    case 'r':
++++++++      // Remove a flight for a particular city "r Toronto\n
++++++++      //                                        360\n"
++++++++      city_read(city);
++++++++      flight_schedule_remove_flight(city);
++++++++	break;
++++++++    case 's':
++++++++      // schedule a seat on a flight for a particular city "s Toronto\n
++++++++      //                                                    300\n"
++++++++      city_read(city);
++++++++      flight_schedule_schedule_seat(city);
++++++++      break;
++++++++    case 'u':
++++++++      // unschedule a seat on a flight for a particular city "u Toronto\n
++++++++      //                                                      360\n"
++++++++        city_read(city);
++++++++        flight_schedule_unschedule_seat(city);
++++++++        break;
++++++++    case 'R':
++++++++      // remove the schedule for a particular city "R Toronto\n"
++++++++      city_read(city);
++++++++      flight_schedule_remove(city);  
++++++++      break;
++++++++    case 'h':
++++++++        print_command_help();
++++++++        break;
++++++++    case 'q':
++++++++      goto done;
++++++++    default:
++++++++      printf("Bad command. Use h to see help.\n");
++++++++    }
++++++++  }
++++++++ done:
++++++++  return EXIT_SUCCESS;
++++++++}
++++++++
++++++++/**********************************************************************
++++++++ * city_read: Takes in and processes a given city following a command *
++++++++ *********************************************************************/
++++++++int city_read(city_t city) {
++++++++  int ch, i=0;
++++++++
++++++++  // skip leading non letter characters
++++++++  while (true) {
++++++++    ch = getchar();
++++++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
++++++++      city[i++] = ch;
++++++++      break;
++++++++    }
++++++++  }
++++++++  while ((ch = getchar()) != '\n') {
++++++++    if (i < MAX_CITY_NAME_LEN) {
++++++++      city[i++] = ch;
++++++++    }
++++++++  }
++++++++  city[i] = '\0';
++++++++  return i;
++++++++}
++++++++
++++++++
++++++++/****************************************************************
++++++++ * Message functions so that your messages match what we expect *
++++++++ ****************************************************************/
++++++++void msg_city_bad(char *city) {
++++++++  printf("No schedule for %s\n", city);
++++++++}
++++++++
++++++++void msg_city_exists(char *city) {
++++++++  printf("There is a schedule of %s already.\n", city);
++++++++}
++++++++
++++++++void msg_schedule_no_free(void) {
++++++++  printf("Sorry no more free schedules.\n");
++++++++}
++++++++
++++++++void msg_city_flights(char *city) {
++++++++  printf("The flights for %s are:", city);
++++++++}
++++++++
++++++++void msg_flight_info(int time, int avail, int capacity) {
++++++++  printf(" (%d, %d, %d)", time, avail, capacity);
++++++++}
++++++++
++++++++void msg_city_max_flights_reached(char *city) {
++++++++  printf("Sorry we cannot add more flights on this city.\n");
++++++++}
++++++++
++++++++void msg_flight_bad_time(void) {
++++++++  printf("Sorry there's no flight scheduled on this time.\n");
++++++++}
++++++++
++++++++void msg_flight_no_seats(void) {
++++++++    printf("Sorry there's no more seats available!\n");
++++++++}
++++++++
++++++++void msg_flight_all_seats_empty(void) {
++++++++  printf("All the seats on this flights are empty!\n");
++++++++}
++++++++
++++++++void msg_time_bad() {
++++++++  printf("Invalid time value\n");
++++++++}
++++++++
++++++++void msg_capacity_bad() {
++++++++  printf("Invalid capacity value\n");
++++++++}
++++++++
++++++++void print_command_help()
++++++++{
++++++++  printf("Here are the possible commands:\n"
++++++++	 "A <city name>     - Add an active empty flight schedule for\n"
++++++++	 "                    <city name>\n"
++++++++	 "L                 - List cities which have an active schedule\n"
++++++++	 "l <city name>     - List the flights for <city name>\n"
++++++++	 "a <city name>\n"
++++++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
++++++++	 "                    with <capacity> seats\n"  
++++++++	 "r <city name>\n"
++++++++         "<time>            - Remove a flight form <city name> whose time is\n"
++++++++	 "                    <time>\n"
++++++++	 "s <city name>\n"
++++++++	 "<time>            - Attempt to schedule seat on flight to \n"
++++++++	 "                    <city name> at <time> or next closest time on\n"
++++++++	 "                    which their is an available seat\n"
++++++++	 "u <city name>\n"
++++++++	 "<time>            - unschedule a seat from flight to <city name>\n"
++++++++	 "                    at <time>\n"
++++++++	 "R <city name>     - Remove schedule for <city name>\n"
++++++++	 "h                 - print this help message\n"
++++++++	 "q                 - quit\n"
++++++++);
++++++++}
++++++++
++++++++
++++++++/****************************************************************
++++++++ * Resets a flight schedule                                     *
++++++++ ****************************************************************/
++++++++void flight_schedule_reset(struct flight_schedule *fs) {
++++++++    fs->destination[0] = 0;
++++++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
++++++++      fs->flights[i].time = TIME_NULL;
++++++++      fs->flights[i].available = 0;
++++++++      fs->flights[i].capacity = 0;
++++++++    }
++++++++    fs->next = NULL;
++++++++    fs->prev = NULL;
++++++++}
++++++++
++++++++/******************************************************************
++++++++* Initializes the flight_schedule array that will hold any flight *
++++++++* schedules created by the user. This is called in main for you.  *
++++++++ *****************************************************************/
++++++++
++++++++void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++++{
++++++++  flight_schedules_active = NULL;
++++++++  flight_schedules_free = NULL;
++++++++
++++++++  // takes care of empty array case
++++++++  if (n==0) return;
++++++++
++++++++  // Loop through the Array connecting them
++++++++  // as a linear doubly linked list
++++++++  array[0].prev = NULL;
++++++++  for (int i=0; i<n-1; i++) {
++++++++    flight_schedule_reset(&array[i]);
++++++++    array[i].next = &array[i+1];
++++++++    array[i+1].prev = &array[i];
++++++++  }
++++++++  // Takes care of last node.  
++++++++  // Its prev pointer will be set in the loop,
++++++++  // we just have to set its next to NULL.
++++++++  array[n-1].next = NULL;
++++++++  flight_schedules_free = &array[0];
++++++++}
++++++++
++++++++/***********************************************************
++++++++ * time_get: read a time from the user
++++++++   Time in this program is a minute number 0-((24*60)-1)=1439
++++++++   -1 is used to indicate the NULL empty time 
++++++++   This function should read in a time value and check its 
++++++++   validity.  If it is not valid eg. not -1 or not 0-1439
++++++++   It should print "Invalid Time" and return false.
++++++++   othewise it should return the value in the integer pointed
++++++++   to by time_ptr.
++++++++ ***********************************************************/
++++++++bool time_get(int *time_ptr) {
++++++++  if (scanf("%d", time_ptr)==1) {
++++++++    return (TIME_NULL == *time_ptr || 
++++++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
++++++++  } 
++++++++  msg_time_bad();
++++++++  return false;
++++++++}
++++++++
++++++++/***********************************************************
++++++++ * flight_capacity_get: read the capacity of a flight from the user
++++++++   This function should read in a capacity value and check its 
++++++++   validity.  If it is not greater than 0, it should print 
++++++++   "Invalid capacity value" and return false. Othewise it should 
++++++++   return the value in the integer pointed to by cap_ptr.
++++++++ ***********************************************************/
++++++++bool flight_capacity_get(int *cap_ptr) {
++++++++  if (scanf("%d", cap_ptr)==1) {
++++++++    return *cap_ptr > 0;
++++++++  }
++++++++  msg_capacity_bad();
++++++++  return false;
++++++++}
++++++++
++++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
++++++++{
++++++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
++++++++	flight_compare_time);
++++++++}
++++++++
++++++++int flight_compare_time(const void *a, const void *b) 
++++++++{
++++++++  const struct flight *af = a;
++++++++  const struct flight *bf = b;
++++++++  
++++++++  return (af->time - bf->time);
++++++++}
++++++++
++++++++WRITE SOME CODE!
+++++++diff --git a/gitlog.txt b/gitlog.txt
+++++++new file mode 100644
+++++++index 0000000..e69de29
+++++++diff --git a/reference b/reference
+++++++new file mode 100755
+++++++index 0000000..ee9132a
+++++++Binary files /dev/null and b/reference differ
+++++++diff --git a/test.sh b/test.sh
+++++++new file mode 100755
+++++++index 0000000..f8ecbf4
+++++++--- /dev/null
++++++++++ b/test.sh
+++++++@@ -0,0 +1,328 @@
++++++++#!/bin/bash
++++++++#set -x
++++++++
++++++++REFERENCE=./reference
++++++++PGM=./assignment-3
++++++++
++++++++# To add a test you can add an element the REQUIRED arrays 
++++++++# or BONUS Arrays
++++++++# Each test can have a descripttion, input and optionally a num
++++++++# num is passed as the argument on the command line to set
++++++++# the default max schedule size
++++++++
++++++++# Required tests
++++++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
++++++++REQUIRED_INPUT[0]="L
++++++++A Toronto
++++++++L"
++++++++
++++++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
++++++++REQUIRED_INPUT[1]="L
++++++++A Toronto
++++++++l Toronto
++++++++a Toronto
++++++++1000 5
++++++++l Toronto"
++++++++
++++++++REQUIRED_NUM[2]="2"
++++++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
++++++++REQUIRED_INPUT[2]="L
++++++++A City1
++++++++A City2
++++++++L
++++++++A City3
++++++++L"
++++++++
++++++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
++++++++REQUIRED_INPUT[3]="A Naples
++++++++A Addis Ababa
++++++++L
++++++++R Naples
++++++++L"
++++++++
++++++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
++++++++REQUIRED_INPUT[4]="A San Jose
++++++++a San Jose
++++++++360 100
++++++++l San Jose
++++++++r San Jose
++++++++360
++++++++l San Jose"
++++++++
++++++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
++++++++REQUIRED_INPUT[5]="A Hanoi
++++++++r Hanoi
++++++++100"
++++++++
++++++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
++++++++REQUIRED_INPUT[6]="A Cartagena
++++++++a Cartagena
++++++++720 100
++++++++a Cartagena
++++++++840 120
++++++++s Cartagena
++++++++480
++++++++l Cartagena"
++++++++
++++++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
++++++++REQUIRED_INPUT[7]="L
++++++++A Abu Dhabi
++++++++a Abu Dhabi
++++++++360 50
++++++++a Abu Dhabi
++++++++840 100
++++++++s Abu Dhabi
++++++++700
++++++++l Abu Dhabi
++++++++u Abu Dhabi
++++++++840
++++++++l Abu Dhabi"
++++++++
++++++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
++++++++REQUIRED_INPUT[8]="L
++++++++A Belgrade
++++++++a Belgrade
++++++++400 1
++++++++s Belgrade
++++++++400
++++++++l Belgrade
++++++++s Belgrade
++++++++400
++++++++l Belgrade"
++++++++
++++++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
++++++++REQUIRED_INPUT[9]="L
++++++++A Kyoto
++++++++a Kyoto
++++++++300 5
++++++++l Kyoto
++++++++u Kyoto
++++++++300
++++++++l Kyoto"
++++++++
++++++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
++++++++REQUIRED_INPUT[10]="L
++++++++A Mumbai
++++++++a Mumbai
++++++++900 3
++++++++l Mumbai
++++++++u Mumbai
++++++++300
++++++++l Mumbai"
++++++++
++++++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
++++++++REQUIRED_INPUT[11]="L
++++++++A Prague
++++++++a Prague
++++++++360 5
++++++++a Prague
++++++++720 100
++++++++l Prague
++++++++s Prague
++++++++900
++++++++l Prague"
++++++++
++++++++REQUIRED_NUM[12]="2"
++++++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
++++++++REQUIRED_INPUT[12]="L
++++++++A City1
++++++++L
++++++++A City2
++++++++L
++++++++A City3
++++++++L
++++++++R City1
++++++++L
++++++++R City2
++++++++L
++++++++R City3
++++++++L
++++++++A City1
++++++++L"
++++++++
++++++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
++++++++REQUIRED_INPUT[13]="L
++++++++A City1
++++++++a City1
++++++++60 5
++++++++l City1
++++++++a City1
++++++++120 5
++++++++l City1
++++++++a City1
++++++++180 5
++++++++l City1
++++++++a City1
++++++++240 5
++++++++l City1
++++++++a City1
++++++++300 5
++++++++l City1
++++++++a City1
++++++++360 5
++++++++l City1
++++++++r City1
++++++++360
++++++++l City1
++++++++r City1
++++++++300
++++++++l City1
++++++++r City1
++++++++240
++++++++l City1
++++++++r City1
++++++++180
++++++++l City1
++++++++r City1
++++++++120
++++++++l City1
++++++++r City1
++++++++60
++++++++l City1
++++++++a City1
++++++++60 5
++++++++l City1"
++++++++
++++++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
++++++++REQUIRED_INPUT[14]="L
++++++++A City1
++++++++a City1
++++++++60 3
++++++++l City1
++++++++s City1
++++++++60
++++++++l City1
++++++++s City1
++++++++60
++++++++l City1
++++++++s City1
++++++++60
++++++++l City1
++++++++s City1
++++++++60
++++++++l City1
++++++++u City1
++++++++60
++++++++l City1
++++++++u City1
++++++++60
++++++++l City1
++++++++u City1
++++++++60
++++++++l City1
++++++++u City1
++++++++60
++++++++l City1"
++++++++
++++++++REQUIRED_DESC[15]="Required 16: A bigger test "
++++++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
++++++++REQUIRED_VALUE[15]=5
++++++++
++++++++
++++++++# Bonus tests
++++++++BONUS_DESC[0]="Bonus 1: Medium sized test"
++++++++BONUS_INPUT[0]="$(cat testMedium.txt)"
++++++++BONUS_VALUE[0]=3
++++++++
++++++++BONUS_DESC[1]="Bonus 2: Large sized test"
++++++++BONUS_INPUT[1]="$(cat testBig.txt)"
++++++++BONUS_VALUE[1]=5
++++++++
++++++++
++++++++function run_test()
++++++++{
++++++++   description="$1"
++++++++   input="$2"
++++++++   num="$3"
++++++++
++++++++   echo -n "$description : "
++++++++   [[ -n $VERBOSE ]] &&  echo "Input:"
++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++++   [[ -n $VERBOSE ]] &&  echo "$input"
++++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++++
++++++++   solution=$($REFERENCE $num <<EOF
++++++++$input
++++++++EOF
++++++++)
++++++++
++++++++   answer=$($PGM $num<<EOF
++++++++$input
++++++++EOF
++++++++)
++++++++
++++++++  if [[ -n $DEBUG ]]; then
++++++++      echo "$solution"
++++++++  else
++++++++    if [[ "$answer" == "$solution" ]]; then
++++++++       echo "PASS"
++++++++       return 0
++++++++    fi
++++++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
++++++++    echo "FAIL"
++++++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++    [[ -n $VERBOSE ]] && echo "$answers"    
++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++    [[ -n $VERBOSE ]] && echo "$solution"
++++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++++    [[ -n $VERBOSE ]] && echo ""
++++++++  fi
++++++++  return 1
++++++++}
++++++++
++++++++testnum=$1
++++++++type=$2
++++++++
++++++++total=0
++++++++correct=0
++++++++
++++++++if [[ -z $testnum ]]; then
++++++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
++++++++	value="${REQUIRED_VALUE[$i]}"
++++++++	[[ -z $value ]] && value=1
++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++++	    (( correct += $value ))
++++++++	fi
++++++++	(( total += value ))
++++++++    done
++++++++    
++++++++    
++++++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
++++++++	value="${BONUS_VALUE[$i]}"
++++++++	[[ -z $value ]] && value=1
++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++++	    (( correct += $value ))
++++++++	fi
++++++++    done
++++++++else
++++++++    VERBOSE=1
++++++++    (( i=$testnum - 1 ))
++++++++    if [[ -z "$type" ]]; then
++++++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
++++++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
++++++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
++++++++	    exit -1
++++++++	fi
++++++++	value="${REQUIRED_VALUE[$i]}"
++++++++	[[ -z $value ]] && value=1
++++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++++	    (( correct += $value ))
++++++++	fi
++++++++	(( total += value ))
++++++++    else
++++++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
++++++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
++++++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
++++++++	    exit -1
++++++++	fi	
++++++++	value="${BONUS_VALUE[$i]}"
++++++++	[[ -z $value ]] && value=1
++++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++++         (( correct += $value ))
++++++++	fi
++++++++    fi
++++++++fi
++++++++echo "score: ${correct}/${total}"
+++++++diff --git a/testBig.txt b/testBig.txt
+++++++new file mode 100644
+++++++index 0000000..90170d5
+++++++--- /dev/null
++++++++++ b/testBig.txt
+++++++@@ -0,0 +1,1251 @@
++++++++L
++++++++A Qingdao
++++++++A Paris
++++++++A Lima
++++++++A Los Angeles
++++++++A Khartoum
++++++++A Barcelona
++++++++A Santiago
++++++++A Tokyo
++++++++A Delhi
++++++++A Guangzhou
++++++++A Johannesburg
++++++++A Paris
++++++++A Dhaka
++++++++A Chennai
++++++++A Jinan
++++++++A Luanda
++++++++A Surat
++++++++A Hyderabad
++++++++A Beijing
++++++++A Atlanta
++++++++A Chennai
++++++++A Dar es Salaam
++++++++A Osaka
++++++++A Hong Kong
++++++++A Toronto
++++++++A Saint Petersburg
++++++++A Manila
++++++++A Washington, D.C.
++++++++A Tehran
++++++++A Miami
++++++++A Khartoum
++++++++A Seoul
++++++++A Dar es Salaam
++++++++A Sao Paulo
++++++++A Baghdad
++++++++A Guadalajara
++++++++A Ahmedabad
++++++++A Moscow
++++++++A Philadelphia
++++++++A Fukuoka
++++++++a Tokyo
++++++++1414 113
++++++++a Guadalajara
++++++++385 170
++++++++a Qingdao
++++++++782 37
++++++++a Ahmedabad
++++++++1411 50
++++++++a Los Angeles
++++++++517 84
++++++++a Tehran
++++++++86 61
++++++++a Osaka
++++++++1289 162
++++++++a Barcelona
++++++++1261 158
++++++++a Fukuoka
++++++++550 191
++++++++a Seoul
++++++++207 1
++++++++a Manila
++++++++364 96
++++++++a Khartoum
++++++++56 194
++++++++a Tokyo
++++++++98 1
++++++++a Saint Petersburg
++++++++1330 107
++++++++a Baghdad
++++++++15 15
++++++++a Chennai
++++++++1169 127
++++++++a Beijing
++++++++807 97
++++++++a Seoul
++++++++1134 34
++++++++a Jinan
++++++++220 102
++++++++a Dhaka
++++++++122 101
++++++++a Luanda
++++++++1342 71
++++++++a Guadalajara
++++++++195 35
++++++++a Fukuoka
++++++++28 37
++++++++a Beijing
++++++++678 83
++++++++a Khartoum
++++++++947 39
++++++++a Hyderabad
++++++++490 104
++++++++a Sao Paulo
++++++++62 83
++++++++a Baghdad
++++++++1319 24
++++++++a Delhi
++++++++718 115
++++++++a Baghdad
++++++++204 114
++++++++a Surat
++++++++430 74
++++++++a Miami
++++++++918 87
++++++++a Surat
++++++++455 95
++++++++a Fukuoka
++++++++1077 131
++++++++a Luanda
++++++++311 21
++++++++a Seoul
++++++++1132 155
++++++++a Lima
++++++++432 177
++++++++a Surat
++++++++494 102
++++++++a Washington, D.C.
++++++++667 12
++++++++a Hong Kong
++++++++200 55
++++++++a Los Angeles
++++++++1195 4
++++++++a Ahmedabad
++++++++610 161
++++++++a Delhi
++++++++508 110
++++++++a Atlanta
++++++++17 21
++++++++a Washington, D.C.
++++++++162 23
++++++++a Luanda
++++++++1216 15
++++++++a Tokyo
++++++++1095 117
++++++++a Philadelphia
++++++++1436 117
++++++++a Atlanta
++++++++277 164
++++++++a Manila
++++++++720 147
++++++++a Tokyo
++++++++1017 25
++++++++a Jinan
++++++++76 66
++++++++a Toronto
++++++++844 84
++++++++a Santiago
++++++++7 115
++++++++a Surat
++++++++388 55
++++++++a Tehran
++++++++836 174
++++++++a Paris
++++++++371 110
++++++++a Sao Paulo
++++++++516 113
++++++++a Luanda
++++++++1041 174
++++++++a Dhaka
++++++++1076 34
++++++++a Guadalajara
++++++++162 144
++++++++a Los Angeles
++++++++424 33
++++++++a Philadelphia
++++++++565 167
++++++++a Luanda
++++++++1411 44
++++++++a Osaka
++++++++1005 82
++++++++a Fukuoka
++++++++1253 194
++++++++a Atlanta
++++++++141 102
++++++++a Fukuoka
++++++++1119 112
++++++++a Toronto
++++++++782 150
++++++++a Dhaka
++++++++1006 96
++++++++a Miami
++++++++961 126
++++++++a Lima
++++++++360 41
++++++++a Lima
++++++++14 50
++++++++a Dhaka
++++++++1028 191
++++++++a Philadelphia
++++++++502 115
++++++++a Washington, D.C.
++++++++1380 59
++++++++a Atlanta
++++++++548 113
++++++++a Fukuoka
++++++++694 183
++++++++a Saint Petersburg
++++++++261 26
++++++++a Jinan
++++++++196 53
++++++++a Delhi
++++++++315 78
++++++++a Delhi
++++++++625 92
++++++++a Ahmedabad
++++++++105 98
++++++++a Philadelphia
++++++++111 15
++++++++a Atlanta
++++++++321 31
++++++++a Ahmedabad
++++++++1244 59
++++++++a Osaka
++++++++799 173
++++++++a Khartoum
++++++++302 7
++++++++a Luanda
++++++++823 190
++++++++a Chennai
++++++++754 139
++++++++a Los Angeles
++++++++1028 78
++++++++a Miami
++++++++1123 183
++++++++a Dar es Salaam
++++++++1353 102
++++++++a Beijing
++++++++473 88
++++++++a Paris
++++++++698 95
++++++++a Barcelona
++++++++545 170
++++++++a Chennai
++++++++382 85
++++++++a Miami
++++++++821 114
++++++++a Luanda
++++++++584 161
++++++++a Fukuoka
++++++++38 26
++++++++a Jinan
++++++++536 148
++++++++a Manila
++++++++1403 133
++++++++a Washington, D.C.
++++++++917 130
++++++++a Sao Paulo
++++++++1169 81
++++++++a Santiago
++++++++689 42
++++++++a Ahmedabad
++++++++279 30
++++++++a Los Angeles
++++++++881 35
++++++++a Jinan
++++++++1293 148
++++++++a Guangzhou
++++++++1366 38
++++++++a Santiago
++++++++317 123
++++++++a Tokyo
++++++++454 104
++++++++a Atlanta
++++++++626 177
++++++++a Surat
++++++++69 135
++++++++a Luanda
++++++++1426 19
++++++++a Barcelona
++++++++879 46
++++++++a Los Angeles
++++++++1329 90
++++++++a Beijing
++++++++402 60
++++++++a Lima
++++++++727 161
++++++++a Hyderabad
++++++++601 186
++++++++a Khartoum
++++++++294 183
++++++++a Hyderabad
++++++++267 131
++++++++a Manila
++++++++771 102
++++++++a Osaka
++++++++103 68
++++++++a Atlanta
++++++++848 147
++++++++a Atlanta
++++++++811 179
++++++++a Toronto
++++++++402 131
++++++++a Guadalajara
++++++++804 28
++++++++a Qingdao
++++++++16 114
++++++++a Beijing
++++++++1218 14
++++++++a Moscow
++++++++498 195
++++++++a Surat
++++++++528 48
++++++++a Manila
++++++++865 4
++++++++a Guangzhou
++++++++328 24
++++++++a Dhaka
++++++++227 50
++++++++a Manila
++++++++124 91
++++++++a Philadelphia
++++++++218 104
++++++++a Dar es Salaam
++++++++209 34
++++++++a Chennai
++++++++641 179
++++++++a Barcelona
++++++++1433 171
++++++++a Lima
++++++++957 60
++++++++a Dhaka
++++++++1292 111
++++++++a Qingdao
++++++++647 40
++++++++a Khartoum
++++++++417 3
++++++++a Tehran
++++++++751 180
++++++++a Barcelona
++++++++778 118
++++++++a Luanda
++++++++204 59
++++++++a Ahmedabad
++++++++541 34
++++++++a Ahmedabad
++++++++539 33
++++++++a Los Angeles
++++++++824 193
++++++++a Tehran
++++++++1412 39
++++++++s Luanda
++++++++1418
++++++++s Toronto
++++++++857
++++++++s Lima
++++++++22
++++++++s Tehran
++++++++100
++++++++s Washington
++++++++175
++++++++s Dhaka
++++++++132
++++++++s Jinan
++++++++90
++++++++s Beijing
++++++++812
++++++++s Barcelona
++++++++1268
++++++++s Dhaka
++++++++228
++++++++s Dhaka
++++++++229
++++++++s Osaka
++++++++1295
++++++++s Los Angeles
++++++++527
++++++++s Ahmedabad
++++++++620
++++++++s Tokyo
++++++++461
++++++++s Luanda
++++++++588
++++++++s Tehran
++++++++1420
++++++++s Jinan
++++++++228
++++++++s Hyderabad
++++++++497
++++++++s Manila
++++++++879
++++++++s Delhi
++++++++720
++++++++s Surat
++++++++442
++++++++s Lima
++++++++21
++++++++s Delhi
++++++++630
++++++++s Tehran
++++++++836
++++++++s Dhaka
++++++++1042
++++++++s Atlanta
++++++++558
++++++++s Khartoum
++++++++300
++++++++s Luanda
++++++++1050
++++++++s Lima
++++++++445
++++++++s Hong Kong
++++++++213
++++++++s Delhi
++++++++318
++++++++s Manila
++++++++725
++++++++s Dhaka
++++++++1300
++++++++s Tokyo
++++++++1028
++++++++s Lima
++++++++23
++++++++s Qingdao
++++++++24
++++++++s Ahmedabad
++++++++542
++++++++s Barcelona
++++++++1274
++++++++s Santiago
++++++++7
++++++++s Surat
++++++++467
++++++++s Chennai
++++++++392
++++++++s Fukuoka
++++++++551
++++++++s Fukuoka
++++++++704
++++++++s Fukuoka
++++++++34
++++++++s Fukuoka
++++++++1131
++++++++s Ahmedabad
++++++++541
++++++++s Philadelphia
++++++++566
++++++++s Surat
++++++++506
++++++++s Khartoum
++++++++952
++++++++s Guadalajara
++++++++389
++++++++s Tokyo
++++++++1031
++++++++s Baghdad
++++++++24
++++++++s Khartoum
++++++++307
++++++++s Lima
++++++++370
++++++++s Atlanta
++++++++812
++++++++s Sao Paulo
++++++++1176
++++++++s Manila
++++++++1411
++++++++s Khartoum
++++++++294
++++++++s Seoul
++++++++1148
++++++++s Guadalajara
++++++++814
++++++++s Khartoum
++++++++314
++++++++s Manila
++++++++1410
++++++++s Khartoum
++++++++302
++++++++s Philadelphia
++++++++230
++++++++s Lima
++++++++728
++++++++s Ahmedabad
++++++++548
++++++++s Fukuoka
++++++++1121
++++++++s Baghdad
++++++++206
++++++++s Ahmedabad
++++++++1424
++++++++s Santiago
++++++++11
++++++++s Lima
++++++++364
++++++++s Manila
++++++++128
++++++++s Tokyo
++++++++460
++++++++s Surat
++++++++469
++++++++s Barcelona
++++++++1274
++++++++s Guadalajara
++++++++816
++++++++s Guadalajara
++++++++811
++++++++s Luanda
++++++++597
++++++++s Atlanta
++++++++852
++++++++s Guadalajara
++++++++811
++++++++s Manila
++++++++1409
++++++++s Miami
++++++++918
++++++++s Luanda
++++++++593
++++++++s Barcelona
++++++++1440
++++++++s Dhaka
++++++++132
++++++++s Lima
++++++++363
++++++++s Ahmedabad
++++++++1251
++++++++s Los Angeles
++++++++521
++++++++s Fukuoka
++++++++38
++++++++s Beijing
++++++++686
++++++++s Fukuoka
++++++++1126
++++++++s Guadalajara
++++++++196
++++++++s Baghdad
++++++++206
++++++++s Los Angeles
++++++++522
++++++++s Ahmedabad
++++++++553
++++++++s Ahmedabad
++++++++1416
++++++++s Philadelphia
++++++++113
++++++++s Dar es Salaam
++++++++217
++++++++s Lima
++++++++958
++++++++s Tehran
++++++++752
++++++++s Washington
++++++++680
++++++++s Tehran
++++++++756
++++++++s Khartoum
++++++++299
++++++++s Dhaka
++++++++1084
++++++++s Manila
++++++++878
++++++++s Ahmedabad
++++++++541
++++++++s Ahmedabad
++++++++119
++++++++s Ahmedabad
++++++++616
++++++++s Tehran
++++++++756
++++++++s Tehran
++++++++765
++++++++s Philadelphia
++++++++569
++++++++s Ahmedabad
++++++++283
++++++++s Washington
++++++++1387
++++++++s Saint Petersburg
++++++++274
++++++++s Dhaka
++++++++1037
++++++++s Philadelphia
++++++++506
++++++++s Luanda
++++++++593
++++++++s Philadelphia
++++++++232
++++++++s Dhaka
++++++++233
++++++++s Baghdad
++++++++1329
++++++++s Chennai
++++++++768
++++++++s Barcelona
++++++++546
++++++++s Sao Paulo
++++++++529
++++++++s Jinan
++++++++543
++++++++s Philadelphia
++++++++121
++++++++s Tehran
++++++++759
++++++++s Lima
++++++++964
++++++++s Miami
++++++++923
++++++++s Los Angeles
++++++++1195
++++++++s Jinan
++++++++200
++++++++s Jinan
++++++++224
++++++++s Beijing
++++++++1220
++++++++s Lima
++++++++368
++++++++s Philadelphia
++++++++1436
++++++++s Tehran
++++++++95
++++++++s Miami
++++++++928
++++++++s Baghdad
++++++++1326
++++++++s Beijing
++++++++483
++++++++s Qingdao
++++++++647
++++++++s Fukuoka
++++++++42
++++++++s Los Angeles
++++++++1033
++++++++s Los Angeles
++++++++836
++++++++s Osaka
++++++++1010
++++++++s Manila
++++++++865
++++++++s Miami
++++++++825
++++++++s Barcelona
++++++++553
++++++++s Tehran
++++++++757
++++++++s Jinan
++++++++88
++++++++s Luanda
++++++++1355
++++++++s Saint Petersburg
++++++++266
++++++++s Surat
++++++++459
++++++++s Philadelphia
++++++++576
++++++++s Philadelphia
++++++++1441
++++++++s Paris
++++++++709
++++++++s Manila
++++++++734
++++++++s Toronto
++++++++785
++++++++s Manila
++++++++135
++++++++s Lima
++++++++368
++++++++s Lima
++++++++967
++++++++s Delhi
++++++++731
++++++++s Beijing
++++++++403
++++++++s Santiago
++++++++692
++++++++s Tehran
++++++++1416
++++++++s Dar es Salaam
++++++++1358
++++++++s Seoul
++++++++1134
++++++++s Philadelphia
++++++++579
++++++++s Guangzhou
++++++++342
++++++++s Osaka
++++++++116
++++++++s Guadalajara
++++++++397
++++++++s Dhaka
++++++++1040
++++++++s Toronto
++++++++793
++++++++s Qingdao
++++++++25
++++++++s Baghdad
++++++++1332
++++++++s Osaka
++++++++1017
++++++++s Los Angeles
++++++++1338
++++++++s Ahmedabad
++++++++551
++++++++s Guangzhou
++++++++331
++++++++s Tehran
++++++++1420
++++++++s Dar es Salaam
++++++++215
++++++++s Tokyo
++++++++462
++++++++s Atlanta
++++++++859
++++++++s Fukuoka
++++++++554
++++++++s Ahmedabad
++++++++1423
++++++++s Jinan
++++++++229
++++++++s Dhaka
++++++++1294
++++++++s Ahmedabad
++++++++1250
++++++++s Ahmedabad
++++++++621
++++++++s Delhi
++++++++626
++++++++s Manila
++++++++129
++++++++s Luanda
++++++++204
++++++++s Surat
++++++++440
++++++++s Atlanta
++++++++22
++++++++s Ahmedabad
++++++++1251
++++++++s Khartoum
++++++++302
++++++++s Surat
++++++++73
++++++++s Guadalajara
++++++++209
++++++++s Manila
++++++++721
++++++++s Toronto
++++++++793
++++++++s Dar es Salaam
++++++++216
++++++++s Manila
++++++++785
++++++++s Ahmedabad
++++++++116
++++++++s Barcelona
++++++++548
++++++++s Dhaka
++++++++1041
++++++++s Khartoum
++++++++305
++++++++s Los Angeles
++++++++1208
++++++++s Dhaka
++++++++1079
++++++++s Tokyo
++++++++1422
++++++++s Manila
++++++++722
++++++++s Osaka
++++++++1298
++++++++s Surat
++++++++431
++++++++s Khartoum
++++++++294
++++++++s Barcelona
++++++++1445
++++++++s Luanda
++++++++589
++++++++s Chennai
++++++++645
++++++++s Luanda
++++++++835
++++++++s Manila
++++++++773
++++++++s Fukuoka
++++++++1256
++++++++s Dhaka
++++++++1300
++++++++s Philadelphia
++++++++230
++++++++s Philadelphia
++++++++571
++++++++s Hong Kong
++++++++209
++++++++s Khartoum
++++++++419
++++++++s Paris
++++++++706
++++++++s Sao Paulo
++++++++516
++++++++s Tehran
++++++++843
++++++++s Khartoum
++++++++429
++++++++s Khartoum
++++++++66
++++++++s Guadalajara
++++++++815
++++++++s Khartoum
++++++++63
++++++++s Guadalajara
++++++++397
++++++++s Baghdad
++++++++218
++++++++s Saint Petersburg
++++++++274
++++++++s Dar es Salaam
++++++++1359
++++++++s Lima
++++++++439
++++++++s Khartoum
++++++++312
++++++++s Luanda
++++++++1345
++++++++s Seoul
++++++++220
++++++++s Tokyo
++++++++1020
++++++++s Atlanta
++++++++25
++++++++s Sao Paulo
++++++++1179
++++++++s Manila
++++++++732
++++++++s Philadelphia
++++++++122
++++++++s Manila
++++++++723
++++++++s Baghdad
++++++++205
++++++++s Osaka
++++++++1018
++++++++s Tehran
++++++++762
++++++++s Luanda
++++++++1412
++++++++s Toronto
++++++++845
++++++++s Qingdao
++++++++24
++++++++s Surat
++++++++528
++++++++s Chennai
++++++++385
++++++++s Ahmedabad
++++++++542
++++++++s Philadelphia
++++++++1447
++++++++s Lima
++++++++733
++++++++s Guadalajara
++++++++205
++++++++s Delhi
++++++++326
++++++++s Chennai
++++++++754
++++++++s Atlanta
++++++++823
++++++++s Manila
++++++++377
++++++++s Khartoum
++++++++303
++++++++s Delhi
++++++++512
++++++++s Surat
++++++++498
++++++++s Guadalajara
++++++++165
++++++++s Manila
++++++++720
++++++++s Washington
++++++++170
++++++++s Hyderabad
++++++++280
++++++++s Lima
++++++++370
++++++++s Tokyo
++++++++98
++++++++s Toronto
++++++++854
++++++++s Ahmedabad
++++++++618
++++++++s Toronto
++++++++858
++++++++s Tehran
++++++++1421
++++++++s Qingdao
++++++++783
++++++++s Barcelona
++++++++784
++++++++s Santiago
++++++++690
++++++++s Fukuoka
++++++++1082
++++++++s Jinan
++++++++232
++++++++s Chennai
++++++++385
++++++++s Paris
++++++++710
++++++++s Tokyo
++++++++1427
++++++++s Chennai
++++++++754
++++++++s Miami
++++++++920
++++++++s Toronto
++++++++407
++++++++s Guadalajara
++++++++806
++++++++s Miami
++++++++923
++++++++s Philadelphia
++++++++226
++++++++s Manila
++++++++720
++++++++s Manila
++++++++133
++++++++s Toronto
++++++++852
++++++++s Barcelona
++++++++886
++++++++s Sao Paulo
++++++++68
++++++++s Delhi
++++++++630
++++++++s Los Angeles
++++++++428
++++++++s Washington
++++++++917
++++++++s Atlanta
++++++++322
++++++++s Atlanta
++++++++549
++++++++s Manila
++++++++137
++++++++s Miami
++++++++1135
++++++++s Guadalajara
++++++++399
++++++++A Dar es Salaam
++++++++a Qingdao
++++++++1015 95
++++++++u Toronto
++++++++402
++++++++A Lagos
++++++++L
++++++++a Qingdao
++++++++910 139
++++++++R Dar es Salaam
++++++++r Washington
++++++++917
++++++++u Osaka
++++++++103
++++++++R Tokyo
++++++++a Baghdad
++++++++309 68
++++++++L
++++++++R Jinan
++++++++L
++++++++s Washington
++++++++170
++++++++L
++++++++R Hyderabad
++++++++r Lima
++++++++727
++++++++u Khartoum
++++++++302
++++++++A Nagoya
++++++++u Los Angeles
++++++++1329
++++++++a Luanda
++++++++1364 38
++++++++r Philadelphia
++++++++1436
++++++++A Johannesburg
++++++++A New York City
++++++++a Los Angeles
++++++++270 149
++++++++A Los Angeles
++++++++R Manila
++++++++r Beijing
++++++++473
++++++++A Beijing
++++++++r Tokyo
++++++++1414
++++++++a Lima
++++++++1003 11
++++++++r Dhaka
++++++++227
++++++++s Fukuoka
++++++++38
++++++++s Moscow
++++++++499
++++++++u Delhi
++++++++508
++++++++r Jinan
++++++++220
++++++++L
++++++++a Qingdao
++++++++314 81
++++++++s Manila
++++++++878
++++++++a Sao Paulo
++++++++457 134
++++++++L
++++++++R Hong Kong
++++++++A Nagoya
++++++++s Lima
++++++++962
++++++++u Baghdad
++++++++1319
++++++++L
++++++++R Dhaka
++++++++L
++++++++u Lima
++++++++432
++++++++a Barcelona
++++++++756 138
++++++++s Toronto
++++++++784
++++++++u Dar es Salaam
++++++++209
++++++++R Miami
++++++++u Washington
++++++++1380
++++++++s Manila
++++++++784
++++++++A London
++++++++s Surat
++++++++459
++++++++L
++++++++A Manila
++++++++A Istanbul
++++++++r Toronto
++++++++782
++++++++r Saint Petersburg
++++++++1330
++++++++s Guadalajara
++++++++396
++++++++A Tianjin
++++++++r Tokyo
++++++++98
++++++++R Luanda
++++++++r Dhaka
++++++++122
++++++++R Lagos
++++++++u Fukuoka
++++++++694
++++++++r Jinan
++++++++76
++++++++u Sao Paulo
++++++++457
++++++++a Philadelphia
++++++++455 175
++++++++L
++++++++u Delhi
++++++++718
++++++++r Osaka
++++++++1005
++++++++A Harbin
++++++++u Luanda
++++++++584
++++++++r Los Angeles
++++++++424
++++++++L
++++++++u Los Angeles
++++++++824
++++++++L
++++++++R Khartoum
++++++++r Barcelona
++++++++545
++++++++r Philadelphia
++++++++502
++++++++R Moscow
++++++++r Hyderabad
++++++++601
++++++++u Los Angeles
++++++++824
++++++++A Nagoya
++++++++R Washington, D.C.
++++++++L
++++++++L
++++++++s Qingdao
++++++++790
++++++++R Sao Paulo
++++++++A Shanghai
++++++++A Paris
++++++++u Beijing
++++++++402
++++++++r Philadelphia
++++++++455
++++++++s Luanda
++++++++1053
++++++++a Saint Petersburg
++++++++322 141
++++++++r Osaka
++++++++103
++++++++r Barcelona
++++++++879
++++++++a Baghdad
++++++++732 76
++++++++r Baghdad
++++++++309
++++++++a Tehran
++++++++1213 65
++++++++a Tehran
++++++++270 7
++++++++R Manila
++++++++L
++++++++A Nanjing
++++++++r Luanda
++++++++204
++++++++L
++++++++u Los Angeles
++++++++824
++++++++a Seoul
++++++++161 99
++++++++s Ahmedabad
++++++++546
++++++++a Atlanta
++++++++920 91
++++++++a Tianjin
++++++++85 108
++++++++a Lima
++++++++1345 173
++++++++r Manila
++++++++865
++++++++r Luanda
++++++++584
++++++++A Singapore
++++++++L
++++++++u Manila
++++++++364
++++++++L
++++++++A Kolkata
++++++++a Nanjing
++++++++1014 161
++++++++u Jinan
++++++++1293
++++++++u Miami
++++++++918
++++++++L
++++++++R Johannesburg
++++++++L
++++++++L
++++++++A Kuala Lumpur
++++++++u Miami
++++++++961
++++++++R Atlanta
++++++++A Ahmedabad
++++++++A Istanbul
++++++++u Baghdad
++++++++732
++++++++a New York City
++++++++1256 182
++++++++R Qingdao
++++++++r Guadalajara
++++++++385
++++++++R Guadalajara
++++++++s Surat
++++++++463
++++++++r Nanjing
++++++++1014
++++++++A Hangzhou
++++++++A Lahore
++++++++s Los Angeles
++++++++1198
++++++++R Seoul
++++++++A Fukuoka
++++++++A Foshan
++++++++u Sao Paulo
++++++++62
++++++++L
++++++++a Beijing
++++++++9 165
++++++++a Istanbul
++++++++877 85
++++++++R Kolkata
++++++++R Foshan
++++++++R Toronto
++++++++a Barcelona
++++++++1008 74
++++++++s Sao Paulo
++++++++1183
++++++++A Shenzhen
++++++++A Hong Kong
++++++++A Shenzhen
++++++++R Philadelphia
++++++++u Toronto
++++++++844
++++++++R Nagoya
++++++++a London
++++++++599 14
++++++++A Chengdu
++++++++a Paris
++++++++1063 129
++++++++r Lima
++++++++14
++++++++L
++++++++s Luanda
++++++++1374
++++++++a Tehran
++++++++371 109
++++++++r Miami
++++++++918
++++++++a New York City
++++++++272 66
++++++++L
++++++++a Harbin
++++++++633 24
++++++++R Tehran
++++++++A Khartoum
++++++++a Shenzhen
++++++++930 112
++++++++a Istanbul
++++++++1125 123
++++++++u Qingdao
++++++++782
++++++++L
++++++++R Shanghai
++++++++s Osaka
++++++++808
++++++++a Baghdad
++++++++658 29
++++++++u Tianjin
++++++++85
++++++++r Atlanta
++++++++321
++++++++r Khartoum
++++++++302
++++++++A Los Angeles
++++++++A Dhaka
++++++++L
++++++++s Qingdao
++++++++660
++++++++A Toronto
++++++++u Luanda
++++++++1041
++++++++u Guadalajara
++++++++195
++++++++L
++++++++a Hangzhou
++++++++553 187
++++++++s Fukuoka
++++++++1256
++++++++L
++++++++L
++++++++u Osaka
++++++++799
+++++++diff --git a/testMedium.txt b/testMedium.txt
+++++++new file mode 100644
+++++++index 0000000..3ddcea1
+++++++--- /dev/null
++++++++++ b/testMedium.txt
+++++++@@ -0,0 +1,766 @@
++++++++L
++++++++A Manila
++++++++A Jakarta
++++++++A Saint Petersburg
++++++++A Atlanta
++++++++A Hong Kong
++++++++A Philadelphia
++++++++A Chicago
++++++++A Foshan
++++++++A Fukuoka
++++++++A Chennai
++++++++A Dallas
++++++++A Guangzhou
++++++++A Chengdu
++++++++A Ho Chi Minh City
++++++++A Bangkok
++++++++A Nanjing
++++++++A Moscow
++++++++A Chengdu
++++++++A Lahore
++++++++A Philadelphia
++++++++A Bogota
++++++++A Pune
++++++++A Suzhou
++++++++A Dongguan
++++++++A Paris
++++++++A Chennai
++++++++A Dongguan
++++++++A Lima
++++++++A Qingdao
++++++++A Kolkata
++++++++a Nanjing
++++++++1262 198
++++++++a Dongguan
++++++++72 86
++++++++a Foshan
++++++++776 178
++++++++a Bangkok
++++++++1177 9
++++++++a Saint Petersburg
++++++++59 145
++++++++a Pune
++++++++925 113
++++++++a Chicago
++++++++155 192
++++++++a Atlanta
++++++++1400 4
++++++++a Jakarta
++++++++795 145
++++++++a Atlanta
++++++++1177 147
++++++++a Suzhou
++++++++93 109
++++++++a Paris
++++++++95 197
++++++++a Nanjing
++++++++916 142
++++++++a Pune
++++++++1133 134
++++++++a Chennai
++++++++307 49
++++++++a Qingdao
++++++++91 177
++++++++a Dallas
++++++++500 174
++++++++a Atlanta
++++++++457 94
++++++++a Lima
++++++++993 151
++++++++a Chengdu
++++++++1108 189
++++++++a Fukuoka
++++++++44 70
++++++++a Paris
++++++++1107 25
++++++++a Lima
++++++++1052 62
++++++++a Guangzhou
++++++++1410 160
++++++++a Manila
++++++++602 45
++++++++a Nanjing
++++++++1410 105
++++++++a Guangzhou
++++++++1211 170
++++++++a Foshan
++++++++1427 175
++++++++a Fukuoka
++++++++279 183
++++++++a Philadelphia
++++++++329 169
++++++++a Moscow
++++++++1385 5
++++++++a Chennai
++++++++1258 163
++++++++a Chicago
++++++++1304 114
++++++++a Dongguan
++++++++1221 26
++++++++a Philadelphia
++++++++182 26
++++++++a Suzhou
++++++++396 159
++++++++a Chengdu
++++++++524 33
++++++++a Ho Chi Minh City
++++++++869 63
++++++++a Kolkata
++++++++656 1
++++++++a Atlanta
++++++++246 41
++++++++a Chengdu
++++++++626 182
++++++++a Saint Petersburg
++++++++1133 134
++++++++a Suzhou
++++++++348 13
++++++++a Chicago
++++++++1337 18
++++++++a Philadelphia
++++++++1224 23
++++++++a Fukuoka
++++++++68 193
++++++++a Philadelphia
++++++++793 20
++++++++a Saint Petersburg
++++++++229 197
++++++++a Bogota
++++++++818 86
++++++++a Chengdu
++++++++826 46
++++++++a Bangkok
++++++++575 16
++++++++a Paris
++++++++101 180
++++++++a Fukuoka
++++++++406 174
++++++++a Ho Chi Minh City
++++++++1114 108
++++++++a Lahore
++++++++1163 131
++++++++a Ho Chi Minh City
++++++++118 111
++++++++a Foshan
++++++++333 156
++++++++a Kolkata
++++++++287 0
++++++++a Lahore
++++++++1263 28
++++++++a Bogota
++++++++980 116
++++++++a Bogota
++++++++1392 84
++++++++a Suzhou
++++++++111 84
++++++++a Hong Kong
++++++++726 56
++++++++a Kolkata
++++++++663 118
++++++++a Saint Petersburg
++++++++1369 41
++++++++a Atlanta
++++++++1138 89
++++++++a Qingdao
++++++++406 78
++++++++a Lima
++++++++1019 194
++++++++a Kolkata
++++++++1242 80
++++++++a Foshan
++++++++810 6
++++++++a Atlanta
++++++++936 36
++++++++a Manila
++++++++933 147
++++++++a Ho Chi Minh City
++++++++612 31
++++++++a Bangkok
++++++++1383 70
++++++++a Kolkata
++++++++324 94
++++++++a Atlanta
++++++++1318 62
++++++++a Fukuoka
++++++++1136 56
++++++++a Atlanta
++++++++348 41
++++++++a Moscow
++++++++1335 129
++++++++a Manila
++++++++1222 33
++++++++a Chengdu
++++++++1374 183
++++++++a Foshan
++++++++313 20
++++++++a Philadelphia
++++++++1211 143
++++++++a Dongguan
++++++++40 104
++++++++a Atlanta
++++++++539 85
++++++++a Chicago
++++++++756 22
++++++++a Suzhou
++++++++20 113
++++++++a Kolkata
++++++++172 34
++++++++a Moscow
++++++++1306 15
++++++++a Qingdao
++++++++465 13
++++++++a Moscow
++++++++921 144
++++++++a Saint Petersburg
++++++++1264 189
++++++++a Bangkok
++++++++965 179
++++++++a Pune
++++++++21 100
++++++++a Saint Petersburg
++++++++1227 183
++++++++a Lahore
++++++++752 15
++++++++a Chicago
++++++++643 117
++++++++a Suzhou
++++++++18 66
++++++++a Guangzhou
++++++++110 16
++++++++a Dongguan
++++++++1279 94
++++++++s Jakarta
++++++++802
++++++++s Foshan
++++++++787
++++++++s Nanjing
++++++++1263
++++++++s Manila
++++++++941
++++++++s Lima
++++++++1060
++++++++s Chengdu
++++++++1120
++++++++s Qingdao
++++++++99
++++++++s Philadelphia
++++++++329
++++++++s Nanjing
++++++++1266
++++++++s Manila
++++++++1235
++++++++s Qingdao
++++++++96
++++++++s Atlanta
++++++++257
++++++++s Kolkata
++++++++666
++++++++s Kolkata
++++++++663
++++++++s Chengdu
++++++++636
++++++++s Ho Chi Minh City
++++++++1120
++++++++s Bogota
++++++++1394
++++++++s Lahore
++++++++1171
++++++++s Paris
++++++++108
++++++++s Ho Chi Minh City
++++++++1120
++++++++s Foshan
++++++++342
++++++++s Qingdao
++++++++417
++++++++s Chennai
++++++++315
++++++++s Foshan
++++++++1431
++++++++s Guangzhou
++++++++1224
++++++++s Nanjing
++++++++928
++++++++s Ho Chi Minh City
++++++++1125
++++++++s Kolkata
++++++++338
++++++++s Dongguan
++++++++1281
++++++++s Moscow
++++++++1314
++++++++s Foshan
++++++++343
++++++++s Dongguan
++++++++1221
++++++++s Paris
++++++++1110
++++++++s Bangkok
++++++++1178
++++++++s Manila
++++++++1229
++++++++s Ho Chi Minh City
++++++++121
++++++++s Paris
++++++++109
++++++++s Manila
++++++++614
++++++++s Foshan
++++++++789
++++++++s Ho Chi Minh City
++++++++120
++++++++s Jakarta
++++++++803
++++++++s Chicago
++++++++770
++++++++s Kolkata
++++++++660
++++++++s Moscow
++++++++1335
++++++++s Saint Petersburg
++++++++1147
++++++++s Philadelphia
++++++++192
++++++++s Nanjing
++++++++916
++++++++s Dallas
++++++++514
++++++++s Ho Chi Minh City
++++++++626
++++++++s Philadelphia
++++++++1225
++++++++s Saint Petersburg
++++++++1377
++++++++s Suzhou
++++++++402
++++++++s Bogota
++++++++993
++++++++s Chennai
++++++++1271
++++++++s Chennai
++++++++307
++++++++s Paris
++++++++106
++++++++s Moscow
++++++++1318
++++++++s Nanjing
++++++++1267
++++++++s Bogota
++++++++991
++++++++s Atlanta
++++++++1139
++++++++s Suzhou
++++++++34
++++++++s Paris
++++++++104
++++++++s Chennai
++++++++1272
++++++++s Ho Chi Minh City
++++++++623
++++++++s Dongguan
++++++++1287
++++++++s Saint Petersburg
++++++++1372
++++++++s Atlanta
++++++++1142
++++++++s Foshan
++++++++320
++++++++s Chicago
++++++++1338
++++++++s Jakarta
++++++++803
++++++++s Foshan
++++++++816
++++++++s Ho Chi Minh City
++++++++122
++++++++s Atlanta
++++++++549
++++++++s Dongguan
++++++++83
++++++++s Saint Petersburg
++++++++70
++++++++s Chengdu
++++++++1384
++++++++s Philadelphia
++++++++796
++++++++s Ho Chi Minh City
++++++++1123
++++++++s Atlanta
++++++++248
++++++++s Atlanta
++++++++1147
++++++++s Suzhou
++++++++115
++++++++s Dongguan
++++++++72
++++++++s Qingdao
++++++++410
++++++++s Chicago
++++++++766
++++++++s Philadelphia
++++++++1221
++++++++s Lima
++++++++1005
++++++++s Atlanta
++++++++1146
++++++++s Lima
++++++++1003
++++++++s Ho Chi Minh City
++++++++1117
++++++++s Paris
++++++++109
++++++++s Atlanta
++++++++1190
++++++++s Moscow
++++++++1388
++++++++s Kolkata
++++++++666
++++++++s Dallas
++++++++506
++++++++s Chennai
++++++++314
++++++++s Pune
++++++++925
++++++++s Lahore
++++++++1274
++++++++s Nanjing
++++++++927
++++++++s Philadelphia
++++++++799
++++++++s Dallas
++++++++505
++++++++s Hong Kong
++++++++727
++++++++s Moscow
++++++++925
++++++++s Qingdao
++++++++417
++++++++s Philadelphia
++++++++336
++++++++s Bangkok
++++++++1178
++++++++s Moscow
++++++++1347
++++++++s Atlanta
++++++++540
++++++++s Guangzhou
++++++++122
++++++++s Atlanta
++++++++1323
++++++++s Philadelphia
++++++++1224
++++++++s Fukuoka
++++++++1140
++++++++s Chicago
++++++++167
++++++++s Bogota
++++++++1401
++++++++s Foshan
++++++++813
++++++++s Bogota
++++++++1403
++++++++s Qingdao
++++++++465
++++++++s Atlanta
++++++++469
++++++++s Pune
++++++++1133
++++++++s Qingdao
++++++++93
++++++++s Moscow
++++++++1316
++++++++s Dongguan
++++++++49
++++++++s Suzhou
++++++++23
++++++++s Qingdao
++++++++468
++++++++s Kolkata
++++++++335
++++++++s Atlanta
++++++++542
++++++++s Kolkata
++++++++666
++++++++s Lima
++++++++996
++++++++s Foshan
++++++++1441
++++++++s Philadelphia
++++++++184
++++++++s Qingdao
++++++++104
++++++++s Atlanta
++++++++1406
++++++++s Foshan
++++++++335
++++++++s Atlanta
++++++++256
++++++++s Suzhou
++++++++28
++++++++s Lima
++++++++1025
++++++++s Saint Petersburg
++++++++1277
++++++++s Bogota
++++++++987
++++++++s Bogota
++++++++981
++++++++s Ho Chi Minh City
++++++++623
++++++++s Kolkata
++++++++337
++++++++s Bogota
++++++++1398
++++++++s Atlanta
++++++++1145
++++++++s Bangkok
++++++++973
++++++++s Manila
++++++++940
++++++++s Atlanta
++++++++351
++++++++s Ho Chi Minh City
++++++++622
++++++++s Kolkata
++++++++667
++++++++s Paris
++++++++104
++++++++s Chennai
++++++++1265
++++++++s Ho Chi Minh City
++++++++881
++++++++s Foshan
++++++++1427
++++++++s Guangzhou
++++++++1225
++++++++s Kolkata
++++++++1251
++++++++s Manila
++++++++941
++++++++s Jakarta
++++++++808
++++++++s Hong Kong
++++++++736
++++++++s Foshan
++++++++1438
++++++++s Dongguan
++++++++1289
++++++++s Saint Petersburg
++++++++1370
++++++++s Hong Kong
++++++++737
++++++++s Dongguan
++++++++75
++++++++s Philadelphia
++++++++340
++++++++s Suzhou
++++++++118
++++++++s Qingdao
++++++++414
++++++++s Bogota
++++++++823
++++++++s Chengdu
++++++++828
++++++++s Foshan
++++++++317
++++++++s Suzhou
++++++++27
++++++++s Saint Petersburg
++++++++1379
++++++++s Ho Chi Minh City
++++++++618
++++++++s Lahore
++++++++766
++++++++s Chicago
++++++++1304
++++++++s Bangkok
++++++++1179
++++++++s Manila
++++++++609
++++++++s Chengdu
++++++++630
++++++++s Paris
++++++++1108
++++++++s Kolkata
++++++++662
++++++++s Hong Kong
++++++++732
++++++++s Pune
++++++++932
++++++++s Chennai
++++++++1258
++++++++s Paris
++++++++95
++++++++s Pune
++++++++938
++++++++s Chengdu
++++++++635
++++++++s Paris
++++++++1118
++++++++s Ho Chi Minh City
++++++++612
++++++++s Ho Chi Minh City
++++++++1117
++++++++s Ho Chi Minh City
++++++++612
++++++++s Kolkata
++++++++667
++++++++s Chennai
++++++++1266
++++++++s Foshan
++++++++782
++++++++s Philadelphia
++++++++330
++++++++s Manila
++++++++1227
++++++++s Lahore
++++++++1170
++++++++s Guangzhou
++++++++114
++++++++s Foshan
++++++++788
++++++++s Guangzhou
++++++++122
++++++++s Atlanta
++++++++544
++++++++s Paris
++++++++1113
++++++++s Pune
++++++++938
++++++++s Dallas
++++++++502
++++++++A Jinan
++++++++a Dallas
++++++++368 9
++++++++r Lahore
++++++++1163
++++++++A Guadalajara
++++++++s Kolkata
++++++++335
++++++++R Saint Petersburg
++++++++a Chicago
++++++++1209 107
++++++++L
++++++++r Fukuoka
++++++++44
++++++++u Nanjing
++++++++916
++++++++R Hong Kong
++++++++u Guangzhou
++++++++1211
++++++++s Atlanta
++++++++946
++++++++A Rio de Janeiro
++++++++u Bangkok
++++++++575
++++++++s Saint Petersburg
++++++++240
++++++++a Paris
++++++++47 91
++++++++u Kolkata
++++++++656
++++++++a Rio de Janeiro
++++++++344 21
++++++++a Dongguan
++++++++822 109
++++++++a Jakarta
++++++++301 168
++++++++L
++++++++R Kolkata
++++++++L
++++++++u Fukuoka
++++++++406
++++++++A Chennai
++++++++r Jakarta
++++++++301
++++++++A Delhi
++++++++L
++++++++u Philadelphia
++++++++329
++++++++L
++++++++a Suzhou
++++++++410 59
++++++++u Atlanta
++++++++1177
++++++++L
++++++++a Suzhou
++++++++1324 112
++++++++R Jakarta
++++++++R Chicago
++++++++a Manila
++++++++433 124
++++++++a Bangkok
++++++++1360 44
++++++++A Dar es Salaam
++++++++r Saint Petersburg
++++++++1227
++++++++u Dongguan
++++++++40
++++++++a Paris
++++++++53 137
++++++++a Dongguan
++++++++477 27
++++++++a Chennai
++++++++1271 197
++++++++R Qingdao
++++++++r Bangkok
++++++++1383
++++++++a Chennai
++++++++149 23
++++++++L
++++++++r Saint Petersburg
++++++++229
++++++++a Chennai
++++++++283 168
++++++++s Lima
++++++++1021
++++++++a Fukuoka
++++++++273 11
++++++++A Mexico City
++++++++a Delhi
++++++++1276 157
++++++++a Ho Chi Minh City
++++++++729 61
++++++++u Suzhou
++++++++20
++++++++r Guangzhou
++++++++1410
++++++++L
++++++++u Bogota
++++++++980
++++++++a Chengdu
++++++++276 132
++++++++a Rio de Janeiro
++++++++590 30
++++++++r Chicago
++++++++1337
++++++++s Saint Petersburg
++++++++1369
++++++++u Qingdao
++++++++91
++++++++u Ho Chi Minh City
++++++++612
++++++++R Pune
++++++++s Dongguan
++++++++484
++++++++u Nanjing
++++++++1410
++++++++u Chengdu
++++++++1108
++++++++a Chennai
++++++++341 192
++++++++R Dallas
++++++++s Dongguan
++++++++75
++++++++L
++++++++a Ho Chi Minh City
++++++++184 26
++++++++r Ho Chi Minh City
++++++++612
++++++++r Ho Chi Minh City
++++++++1114
++++++++a Philadelphia
++++++++1294 136
++++++++L
++++++++r Nanjing
++++++++1262
+++++++diff --git a/testSmall.txt b/testSmall.txt
+++++++new file mode 100644
+++++++index 0000000..f4ec80b
+++++++--- /dev/null
++++++++++ b/testSmall.txt
+++++++@@ -0,0 +1,405 @@
++++++++L
++++++++A Barcelona
++++++++A Surat
++++++++A Hong Kong
++++++++A Paris
++++++++A Moscow
++++++++A Chennai
++++++++A Dalian
++++++++A Dallas
++++++++A Johannesburg
++++++++A Santiago
++++++++A Tehran
++++++++A Country
++++++++A Dalian
++++++++A Madrid
++++++++A Lima
++++++++A Baghdad
++++++++A London
++++++++A Manila
++++++++A Wuhan
++++++++A Khartoum
++++++++a Santiago
++++++++1367 161
++++++++a Hong Kong
++++++++1264 40
++++++++a Country
++++++++689 165
++++++++a Dalian
++++++++1233 85
++++++++a Surat
++++++++852 188
++++++++a Manila
++++++++1204 151
++++++++a Manila
++++++++976 88
++++++++a London
++++++++52 159
++++++++a London
++++++++931 144
++++++++a Baghdad
++++++++971 50
++++++++a Moscow
++++++++391 42
++++++++a Country
++++++++404 93
++++++++a Chennai
++++++++277 87
++++++++a Moscow
++++++++877 194
++++++++a Surat
++++++++122 42
++++++++a Baghdad
++++++++1304 176
++++++++a Baghdad
++++++++291 159
++++++++a Lima
++++++++859 128
++++++++a Manila
++++++++1039 11
++++++++a Wuhan
++++++++1059 72
++++++++a Dallas
++++++++638 109
++++++++a Lima
++++++++1053 174
++++++++a Dallas
++++++++1344 172
++++++++a Barcelona
++++++++997 102
++++++++a Moscow
++++++++15 84
++++++++a Moscow
++++++++1256 57
++++++++a Barcelona
++++++++69 169
++++++++a London
++++++++848 77
++++++++a Wuhan
++++++++348 32
++++++++a Surat
++++++++146 190
++++++++a Moscow
++++++++374 85
++++++++a Khartoum
++++++++166 145
++++++++a Manila
++++++++1349 35
++++++++a Country
++++++++659 100
++++++++a Dalian
++++++++460 88
++++++++a Dalian
++++++++542 56
++++++++a Paris
++++++++298 48
++++++++a Wuhan
++++++++906 106
++++++++a Chennai
++++++++446 195
++++++++a Khartoum
++++++++755 86
++++++++a Madrid
++++++++255 162
++++++++a Khartoum
++++++++774 189
++++++++a Manila
++++++++753 82
++++++++a Baghdad
++++++++56 162
++++++++a Dalian
++++++++1259 196
++++++++a Hong Kong
++++++++97 2
++++++++a Manila
++++++++1084 43
++++++++a Paris
++++++++518 29
++++++++a Moscow
++++++++710 196
++++++++a Tehran
++++++++375 108
++++++++a Chennai
++++++++836 14
++++++++a Santiago
++++++++1186 103
++++++++a Madrid
++++++++815 186
++++++++a Barcelona
++++++++761 55
++++++++a Paris
++++++++1223 86
++++++++a Hong Kong
++++++++190 8
++++++++a Manila
++++++++1331 53
++++++++a Country
++++++++1277 0
++++++++a Madrid
++++++++269 7
++++++++a Santiago
++++++++94 189
++++++++s Barcelona
++++++++770
++++++++s Wuhan
++++++++1064
++++++++s Santiago
++++++++1375
++++++++s Dalian
++++++++1241
++++++++s London
++++++++851
++++++++s Moscow
++++++++718
++++++++s London
++++++++56
++++++++s Hong Kong
++++++++1273
++++++++s Chennai
++++++++841
++++++++s Khartoum
++++++++167
++++++++s Surat
++++++++853
++++++++s Moscow
++++++++1259
++++++++s Baghdad
++++++++984
++++++++s Hong Kong
++++++++102
++++++++s Manila
++++++++978
++++++++s Madrid
++++++++256
++++++++s Barcelona
++++++++1011
++++++++s Dalian
++++++++553
++++++++s Dallas
++++++++646
++++++++s Wuhan
++++++++354
++++++++s London
++++++++939
++++++++s Barcelona
++++++++769
++++++++s Hong Kong
++++++++1277
++++++++s Santiago
++++++++1187
++++++++s Moscow
++++++++393
++++++++s Country
++++++++661
++++++++s Surat
++++++++860
++++++++s Manila
++++++++1355
++++++++s Country
++++++++691
++++++++s Moscow
++++++++19
++++++++s Country
++++++++667
++++++++s Manila
++++++++977
++++++++s Surat
++++++++156
++++++++s Barcelona
++++++++1004
++++++++s Dallas
++++++++638
++++++++s Moscow
++++++++399
++++++++s Dalian
++++++++1264
++++++++s Country
++++++++1280
++++++++s Wuhan
++++++++907
++++++++s Madrid
++++++++828
++++++++s Santiago
++++++++1375
++++++++s Paris
++++++++311
++++++++s Chennai
++++++++456
++++++++s Madrid
++++++++825
++++++++s Madrid
++++++++823
++++++++s Chennai
++++++++460
++++++++s London
++++++++937
++++++++s Baghdad
++++++++1307
++++++++s Wuhan
++++++++349
++++++++s Country
++++++++691
++++++++s Dalian
++++++++550
++++++++s Manila
++++++++1353
++++++++s Baghdad
++++++++61
++++++++s Moscow
++++++++1256
++++++++s Surat
++++++++129
++++++++s Khartoum
++++++++172
++++++++s Moscow
++++++++882
++++++++s Baghdad
++++++++977
++++++++s Surat
++++++++134
++++++++s Hong Kong
++++++++1273
++++++++s Country
++++++++659
++++++++s Khartoum
++++++++777
++++++++s Manila
++++++++1040
++++++++s Wuhan
++++++++1059
++++++++s Surat
++++++++865
++++++++s Country
++++++++408
++++++++s Baghdad
++++++++973
++++++++s Paris
++++++++1226
++++++++s Santiago
++++++++100
++++++++s Paris
++++++++1227
++++++++s London
++++++++940
++++++++s Moscow
++++++++1269
++++++++s Khartoum
++++++++774
++++++++s Barcelona
++++++++69
++++++++s Manila
++++++++977
++++++++s Wuhan
++++++++354
++++++++s London
++++++++942
++++++++s Barcelona
++++++++763
++++++++s Moscow
++++++++18
++++++++s Hong Kong
++++++++204
++++++++s Manila
++++++++767
++++++++s London
++++++++56
++++++++s Moscow
++++++++386
++++++++s Santiago
++++++++108
++++++++s Manila
++++++++1339
++++++++s Manila
++++++++1040
++++++++s Santiago
++++++++1187
++++++++s Country
++++++++1288
++++++++s Wuhan
++++++++1062
++++++++s Baghdad
++++++++295
++++++++s Madrid
++++++++264
++++++++s Chennai
++++++++457
++++++++s Surat
++++++++866
++++++++s Moscow
++++++++378
++++++++s Dalian
++++++++1268
++++++++s Manila
++++++++1351
++++++++s Dallas
++++++++1354
++++++++s Paris
++++++++301
++++++++s Manila
++++++++976
++++++++s Moscow
++++++++398
++++++++A Dongguan
++++++++u Surat
++++++++852
++++++++R Barcelona
++++++++A Osaka
++++++++u Santiago
++++++++1367
++++++++s Dalian
++++++++468
++++++++r Baghdad
++++++++56
++++++++L
++++++++a Madrid
++++++++451 154
++++++++A Country
++++++++A Belo Horizonte
++++++++r Baghdad
++++++++291
++++++++a Belo Horizonte
++++++++1079 103
++++++++L
++++++++s Wuhan
++++++++352
++++++++r Baghdad
++++++++1304
++++++++r Surat
++++++++146
++++++++R Baghdad
++++++++r Baghdad
++++++++971
++++++++s Manila
++++++++989
++++++++r Surat
++++++++122
++++++++u Dallas
++++++++1344
++++++++A Jakarta
++++++++a Surat
++++++++1137 83
++++++++u Manila
++++++++753
++++++++s Lima
++++++++865
++++++++L
++++++++s Dalian
++++++++1241
++++++++r Manila
++++++++1204
++++++++u Santiago
++++++++1186
++++++++A Dhaka
++++++++L
++++++++R Dongguan
++++++++s Lima
++++++++862
++++++++s Moscow
++++++++387
++++++++L
++++++++A London
++++++++R Madrid
++++++++a Jakarta
++++++++261 84
++++++++a Manila
++++++++360 171
++++++diff --git a/test.sh b/test.sh
++++++index f8ecbf4..1753085 100755
++++++--- a/test.sh
+++++++++ b/test.sh
++++++@@ -262,7 +262,7 @@ EOF
++++++     echo "FAIL"
++++++     [[ -n $VERBOSE ]] && echo "Your program produced:"
++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++-    [[ -n $VERBOSE ]] && echo "$answers"    
+++++++    [[ -n $VERBOSE ]] && echo "$answer"    
++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++     [[ -n $VERBOSE ]] && echo "Output should have been:"
++++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++++
+++++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++ Date:   Mon Sep 28 22:04:59 2020 -0400
+++++
++++ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++ Date:   Thu Oct 1 18:48:16 2020 -0400
++++
+++ commit da6661f7aace13f7460f1854b7f421ec09bce194
+++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++ Date:   Thu Oct 1 20:00:10 2020 -0400
+++
++ commit 1fc06886442458df6df848e0f90ac6e155b1d853
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Fri Oct 2 10:20:31 2020 -0400
++
+ commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Fri Oct 2 11:01:38 2020 -0400
+
 commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Fri Oct 2 15:36:11 2020 -0400

commit 0ef6d278e491c1e44afc9525b0f26ac167f3191c
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Oct 2 16:23:51 2020 -0400

    add_flight working properly

diff --git a/assignment-3.c b/assignment-3.c
index 473a053..8031b9d 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -393,8 +393,11 @@ struct flight_schedule * flight_schedule_allocate(void){
   struct flight_schedule *temp =  flight_schedules_free;
   struct flight_schedule *fs;
   if (flight_schedules_free != NULL){
-    flight_schedules_free = temp->next;
-    flight_schedules_free->prev = NULL;
+    flight_schedules_free = temp->next; //make sure 
+    if(temp->next != NULL) {
+      flight_schedules_free->prev = NULL;
+    }
+    
   }
 
 
@@ -528,13 +531,31 @@ void flight_schedule_listAll(void){
 }
 
 void flight_schedule_list(city_t city){
-  struct flight_schedule *temp = flight_schedules_active; 
+  if(flight_schedule_find(city) == NULL){
+    msg_city_bad(city);
+    return;
+  }
+  struct flight_schedule *fs = flight_schedule_find(city);
+  msg_city_flights(city);
+  for(int j =0; j < MAX_FLIGHTS_PER_CITY; j++){
+    if(fs->flights[j].time != -1){
+      msg_flight_info(fs->flights[j].time, fs->flights[j].available, fs->flights[j].capacity);
+    }
+  }
+  printf("\n");
+
+
+
+
+  /*struct flight_schedule *temp = flight_schedules_active; 
+  msg_city_flights(city);
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){
       printf("%s\n", temp->destination); //displaying memory address
     }
     temp = temp->next;
   }
+  */
 }
 
 void flight_schedule_add_flight(city_t city){
@@ -557,16 +578,18 @@ void flight_schedule_add_flight(city_t city){
     msg_city_max_flights_reached(city);
   }
   else{
-    int c = (temp->flights[i].capacity); // look for value of c 
-    
-    flight_capacity_get(&c);
-    printf("ADD_FLIGHT %d", c);
-    flights[i].available = c; 
+
     int t = (flights[i].time);
     
     time_get(&t);
-    printf("ADD FLIGHT 2 %d", t);
-
+    //printf("ADD FLIGHT time %d", t);
+    temp->flights[i].time = t;
+    int c = (temp->flights[i].capacity); // look for value of c 
+    
+    flight_capacity_get(&c);
+    //printf("ADD_FLIGHT cap %d", c);
+    temp->flights[i].available = c; 
+    temp->flights[i].capacity = c;
   }
   /*
   int *t;
@@ -644,7 +667,7 @@ void flight_schedule_schedule_seat(city_t city) {
      return;
    }
 
-  int nearest = 0;
+  int nearest = 0; 
   int position = 0;
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
diff --git a/gitlog.txt b/gitlog.txt
index 9868705..02b9e97 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4606 @@
+commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Oct 2 15:36:11 2020 -0400
+
+    debugging
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 09d6332..473a053 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -11,8 +11,8 @@
+ 
+ // Limit constants
+ #define MAX_CITY_NAME_LEN 20
+-#define MAX_FLIGHTS_PER_CITY 5
+-#define MAX_DEFAULT_SCHEDULES 50
++#define MAX_FLIGHTS_PER_CITY 3
++#define MAX_DEFAULT_SCHEDULES 2
+ 
+ // Time definitions
+ #define TIME_MIN 0
+@@ -403,7 +403,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+   if(flight_schedules_active != NULL){
+     flight_schedules_active->prev = temp;
+   }
+-   flight_schedules_active = temp;
++  flight_schedules_active = temp;
+ 
+   /*
+   flight_schedules_free-> prev->next = flight_schedules_active;
+@@ -422,7 +422,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+   //flight_schedules_active = temp;
+   temp = flight_schedules_active;
+   */
+-  return(temp); //return temp?
++  return(temp); //return temp temp could be null resulting in error
+ }
+ 
+ //flight schedule free
+@@ -478,18 +478,18 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+ 
+   while(temp != NULL){
+     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+-      break; //return(temp);
++      return(temp);
+     }
+     temp = temp->next;
+   }
+-  return (temp); //this might return null 
++ //this might return null 
+ }
+ 
+ 
+ void flight_schedule_add(city_t city){ //should this call get city
+ 
+   //first cheeck to see if city exists
+-  if (flight_schedules_free ==NULL){
++  if (flight_schedules_free == NULL){
+     msg_schedule_no_free();
+   }
+ 
+@@ -510,9 +510,9 @@ void flight_schedule_add(city_t city){ //should this call get city
+ 
+ void flight_schedule_remove(city_t city){
+   struct flight_schedule *temp = flight_schedule_find(city);
+-  if(temp == NULL){
+-
+-  }
++  //if(temp == NULL){
++   
++  //}
+   flight_schedule_free(temp);
+ }
+ 
+@@ -540,7 +540,35 @@ void flight_schedule_list(city_t city){
+ void flight_schedule_add_flight(city_t city){
+   //flight_schedule_add(city);
+   struct flight_schedule *temp = flight_schedule_find(city);
++  struct flight *flights;
++  flights = temp->flights;
++  int full = 0;
++  int i =0;
++
++  while(temp->flights[i].time != -1){
++    
++    if (i == MAX_FLIGHTS_PER_CITY){
++      full = 1;
++      break;
++    }
++    i++;
++  }
++  if(full){
++    msg_city_max_flights_reached(city);
++  }
++  else{
++    int c = (temp->flights[i].capacity); // look for value of c 
++    
++    flight_capacity_get(&c);
++    printf("ADD_FLIGHT %d", c);
++    flights[i].available = c; 
++    int t = (flights[i].time);
++    
++    time_get(&t);
++    printf("ADD FLIGHT 2 %d", t);
+ 
++  }
++  /*
+   int *t;
+   time_get(t); //do this then check if t is 0 to see if valid or not 
+   
+@@ -557,8 +585,8 @@ void flight_schedule_add_flight(city_t city){
+       return;
+   }
+ 
+-  struct flight *flights;
+-  flights = temp->flights;
++  //struct flight *flights;
++  //flights = temp->flights;
+   //flights[i]
+   //loop thru flights until open flight then add flight
+ 
+@@ -570,6 +598,7 @@ void flight_schedule_add_flight(city_t city){
+     }
+   }
+   //else return that it failed
++  */
+ }
+ 
+ 
+@@ -594,7 +623,7 @@ void flight_schedule_remove_flight(city_t city){
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+     if(flights[i].time == *t){
+-      flights[i].time = -1;//was flights[i] will this change correct one?
++      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
+       flights[i].capacity = 0;  
+       flights[i].available = 0;
+       break;
+diff --git a/gitlog.txt b/gitlog.txt
+index 3fd9781..9868705 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4459 @@
++commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Oct 2 11:01:38 2020 -0400
++
++    working on debugging
++
++diff --git a/assignment-3.c b/assignment-3.c
++index dceff55..09d6332 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
++   }
++    flight_schedules_active = temp;
++ 
++-
++-
++-
++-
++-
++   /*
++   flight_schedules_free-> prev->next = flight_schedules_active;
++   
++@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++     }
++     temp = temp->next;
++   }
++-  return (temp);
+++  return (temp); //this might return null 
++ }
++ 
++ 
++ void flight_schedule_add(city_t city){ //should this call get city
++ 
++   //first cheeck to see if city exists
+++  if (flight_schedules_free ==NULL){
+++    msg_schedule_no_free();
+++  }
+++
++   struct flight_schedule *fs = flight_schedule_find(city);
++   if (fs != NULL)  {
++     msg_city_exists(city);
++@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
++   
++   if(time_get(t) == 0) { //or just t
++     msg_flight_bad_time();      
++-    return;
+++    return; //maybe use go to end
++    }
++ 
++-  int *c;
++-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++  int c = 15;
+++  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
++   
++-  if (flight_capacity_get(c) == 0){ //show message plane is full
++-      msg_flight_no_seats();
+++  if (flight_capacity_get(&c) == 0){ //show message plane is full
+++      //msg_flight_no_seats();
++       return;
++   }
++ 
++@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++     if(flights[i].time == -1){
++       flights[i].time = *t;//was flights[i] will this change correct one?
++-      flights[i].capacity = *c;
+++      flights[i].capacity = c;
++       break;
++     }
++   }
++   //else return that it failed
+++}
++ 
++ 
++-}
++ 
++ void flight_schedule_remove_flight(city_t city){
++   struct flight_schedule *temp = flight_schedule_find(city);
++@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
++    if(time_get(t) == 0) {
++      return;
++    }
++-  int *c;
++-  flight_capacity_get(c); 
++-  if(flight_capacity_get(c) == 0){
+++  int c =15;
+++  flight_capacity_get(&c); 
+++  if(flight_capacity_get(&c) == 0){
++       return;
++   }
++   
++@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
++   int *t;
++   time_get(t);
++   if(time_get(t) == 0) {
+++     msg_flight_bad_time();
++      return;
++    }
++ 
++diff --git a/gitlog.txt b/gitlog.txt
++index 1364b9f..3fd9781 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4351 @@
+++commit 1fc06886442458df6df848e0f90ac6e155b1d853
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Oct 2 10:20:31 2020 -0400
+++
+++    working on add_flight
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index e50b45e..dceff55 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
+++ 
+++ void flight_schedule_remove(city_t city){
+++   struct flight_schedule *temp = flight_schedule_find(city);
++++  if(temp == NULL){
++++
++++  }
+++   flight_schedule_free(temp);
+++ }
+++ 
+++@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
+++ }
+++ 
+++ void flight_schedule_add_flight(city_t city){
+++-  flight_schedule_add(city);
++++  //flight_schedule_add(city);
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++ 
+++-
+++   int *t;
+++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++   
+++   if(time_get(t) == 0) { //or just t
+++-     return;
++++    msg_flight_bad_time();      
++++    return;
+++    }
+++ 
+++   int *c;
+++   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++   
+++-  if (flight_capacity_get(c) == 0){
++++  if (flight_capacity_get(c) == 0){ //show message plane is full
++++      msg_flight_no_seats();
+++       return;
+++   }
+++ 
+++@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
+++   int *c;
+++   flight_capacity_get(c); 
+++   if(flight_capacity_get(c) == 0){
+++-
++++      return;
+++   }
+++   
+++   struct flight *flights;
+++diff --git a/gitlog.txt b/gitlog.txt
+++index 29ef0ec..1364b9f 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -1,3 +1,4286 @@
++++commit da6661f7aace13f7460f1854b7f421ec09bce194
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Thu Oct 1 20:00:10 2020 -0400
++++
++++    fixed aloocate, add and list
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 6644548..e50b45e 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
++++ //returns pointer to updated flight schedule
++++ struct flight_schedule * flight_schedule_allocate(void){
++++ 
++++-  struct flight_schedule *temp;// =  flight_schedules_free;
+++++  struct flight_schedule *temp =  flight_schedules_free;
+++++  struct flight_schedule *fs;
+++++  if (flight_schedules_free != NULL){
+++++    flight_schedules_free = temp->next;
+++++    flight_schedules_free->prev = NULL;
+++++  }
+++++
+++++
+++++  temp->next = flight_schedules_active;
+++++  //if active not null set active prev to temp
+++++  if(flight_schedules_active != NULL){
+++++    flight_schedules_active->prev = temp;
+++++  }
+++++   flight_schedules_active = temp;
+++++
+++++
+++++
+++++
++++ 
++++ 
++++-  flight_schedules_free = flight_schedules_free->next;
+++++  /*
++++   flight_schedules_free-> prev->next = flight_schedules_active;
++++   
++++   //temp->next = flight_schedules_active;
++++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++++ 
++++   //flight_schedules_active = temp;
++++   temp = flight_schedules_active;
+++++  */
++++   return(temp); //return temp?
++++ }
++++ 
++++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++ 
++++   while(temp != NULL){
++++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++-      return(temp);
+++++      break; //return(temp);
++++     }
++++     temp = temp->next;
++++   }
+++++  return (temp);
++++ }
++++ 
++++ 
++++ void flight_schedule_add(city_t city){ //should this call get city
+++++
+++++  //first cheeck to see if city exists
+++++  struct flight_schedule *fs = flight_schedule_find(city);
+++++  if (fs != NULL)  {
+++++    msg_city_exists(city);
+++++  }
+++++
+++++  if (fs == NULL){
++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++-  
++++-  //if (flight_schedule_find == city)  {
++++-  //  msg_city_exists(city);
++++- // } //
++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++   
++++   //p->destination = ch; 
++++ 
+++++  }
++++ }
++++ 
++++ 
++++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
++++ 
++++ 
++++ void flight_schedule_listAll(void){
++++-  struct flight_schedule *temp = flight_schedules_active;
+++++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
++++   while(temp != NULL){
++++-    printf("%p", temp); // print temp is disaplying memory address
+++++    printf("%s\n", temp->destination); // print temp is disaplying memory address
++++     temp = temp->next;
++++   }
++++ 
++++ }
++++ 
++++ void flight_schedule_list(city_t city){
++++-  struct flight_schedule *temp = flight_schedules_active;
+++++  struct flight_schedule *temp = flight_schedules_active; 
++++   while(temp != NULL){
++++     if (strcmp(city,temp->destination) == 0){
++++-      printf("%p", *temp); //displaying memory address
+++++      printf("%s\n", temp->destination); //displaying memory address
++++     }
++++     temp = temp->next;
++++   }
++++diff --git a/gitlog.txt b/gitlog.txt
++++index c3e37f7..29ef0ec 100644
++++--- a/gitlog.txt
+++++++ b/gitlog.txt
++++@@ -1,3 +1,4170 @@
+++++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Thu Oct 1 18:48:16 2020 -0400
+++++
+++++    editing and debugging
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 881c536..6644548 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++ 
+++++   // Loop through the Array connecting them
+++++   // as a linear doubly linked list
++++++  if (n == 1) {
++++++    flight_schedule_reset(&array[0]);
++++++    array[0].next = NULL;
++++++    array[0].prev = NULL;
++++++    flight_schedules_free = &array[0];
++++++    return;
++++++  }
++++++
++++++  flight_schedule_reset(&array[0]);
++++++  array[0].next = &array[1];
+++++   array[0].prev = NULL;
+++++-  for (int i=0; i<n-1; i++) {
++++++
++++++  for (int i=1; i<n-1; i++) {
+++++     flight_schedule_reset(&array[i]);
+++++     array[i].next = &array[i+1];
+++++-    array[i+1].prev = &array[i];
++++++    array[i].prev = &array[i-1];
+++++   }
++++++
+++++   // Takes care of last node.  
+++++   flight_schedule_reset(&array[n-1]); // reset clears all fields
+++++   array[n-1].next = NULL;
+++++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
+++++ //returns pointer to updated flight schedule
+++++ struct flight_schedule * flight_schedule_allocate(void){
+++++ 
+++++-  struct flight_schedule *temp =  flight_schedules_free;
++++++  struct flight_schedule *temp;// =  flight_schedules_free;
++++++
++++++
+++++   flight_schedules_free = flight_schedules_free->next;
++++++  flight_schedules_free-> prev->next = flight_schedules_active;
++++++  
++++++  //temp->next = flight_schedules_active;
++++++  flight_schedules_active = flight_schedules_free->prev;
+++++   flight_schedules_free->prev = NULL;
+++++-  temp->next = flight_schedules_active;
+++++-
+++++-  flight_schedules_active = temp;
+++++-  flight_schedules_active->next->prev = flight_schedules_active;
++++++  
+++++   //temp->prev = NULL;
+++++   //struct flight_schedule *temp2 = flight_schedules_active
+++++-  
+++++-  return(flight_schedules_active);
++++++
++++++  if(flight_schedules_active -> next != NULL){
++++++    flight_schedules_active->next->prev = flight_schedules_active;
++++++  }
++++++
++++++  //flight_schedules_active = temp;
++++++  temp = flight_schedules_active;
++++++  return(temp); //return temp?
+++++ }
+++++ 
+++++ //flight schedule free
+++++ //takes schedule off active list, resets it, then places the node back on free list
+++++ void flight_schedule_free(struct flight_schedule *fs){
+++++-  int counter = 0;
++++++  flight_schedules_active = flight_schedules_active->next;
++++++  flight_schedule_reset(fs);
++++++  fs->next = flight_schedules_free;
++++++  flight_schedules_free = fs;
++++++  fs->next->prev = fs;
++++++
++++++
++++++  /*int counter = 0;
+++++   struct flight_schedule *temp = flight_schedules_active;
+++++   while(temp != NULL) {
+++++     if(temp == fs){ //use flight schedule find instead
+++++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     temp = temp->next;
+++++     counter++;
+++++   }
+++++-  
+++++   if (counter == 0){
+++++     flight_schedules_active = temp->next;
+++++     flight_schedules_active->prev = NULL;
+++++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     //flight_schedule_reset(temp);
+++++ 
+++++   }
+++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++++-    temp->prev->next = temp->next;
++++++  else{ 
++++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
+++++     temp->next->prev = temp->prev;
+++++     temp->next = NULL;
+++++     temp->prev = NULL;
+++++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     flight_schedules_free = temp;
+++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++   }
+++++-  else{
+++++-    temp->prev = NULL;
+++++-    flight_schedules_active->prev->next = NULL;
+++++-
+++++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++-
+++++-    temp->next = flight_schedules_free;
+++++-    flight_schedules_free = temp;
+++++-    flight_schedules_free->next->prev = flight_schedules_free;
+++++-    
+++++-  }
++++++}
++++++*/
+++++ }
+++++ 
+++++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++++ void flight_schedule_add(city_t city){ //should this call get city
+++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++   
+++++-  if (flight_schedule_find) {
+++++-    msg_city_exists(city);
+++++-  }
++++++  //if (flight_schedule_find == city)  {
++++++  //  msg_city_exists(city);
++++++ // } //
+++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++   
+++++   //p->destination = ch; 
+++++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
+++++ void flight_schedule_listAll(void){
+++++   struct flight_schedule *temp = flight_schedules_active;
+++++   while(temp != NULL){
+++++-    printf("%p", &temp);
++++++    printf("%p", temp); // print temp is disaplying memory address
+++++     temp = temp->next;
+++++   }
+++++ 
+++++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
+++++   struct flight_schedule *temp = flight_schedules_active;
+++++   while(temp != NULL){
+++++     if (strcmp(city,temp->destination) == 0){
+++++-      printf("%p", &temp);
++++++      printf("%p", *temp); //displaying memory address
+++++     }
+++++     temp = temp->next;
+++++   }
+++++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
+++++ 
+++++   int *t;
+++++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++++   
+++++-  if (time == 1 || capacity == 1 ){
+++++-      return 1;
++++++  if(time_get(t) == 0) { //or just t
++++++     return;
++++++   }
++++++
++++++  int *c;
++++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++++  
++++++  if (flight_capacity_get(c) == 0){
++++++      return;
+++++   }
+++++ 
+++++   struct flight *flights;
+++++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
+++++ 
+++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++     if(flights[i].time == -1){
+++++-      flights[i].time = time;//was flights[i] will this change correct one?
+++++-      flights[i].capacity = capacity;
++++++      flights[i].time = *t;//was flights[i] will this change correct one?
++++++      flights[i].capacity = *c;
+++++       break;
+++++     }
+++++   }
+++++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++  //idk if this is the right time to call or even need too
+++++ 
+++++-
+++++-
+++++   int *t;
+++++   time_get(t); //if 1 continue; else tell user
+++++    if(time_get(t) == 0) {
+++++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
+++++    }
+++++   int *c;
+++++   flight_capacity_get(c); 
++++++  if(flight_capacity_get(c) == 0){
++++++
++++++  }
+++++   
+++++   struct flight *flights;
+++++   flights = temp->flights;
+++++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
+++++ 
+++++   struct flight *flights;
+++++   flights = temp->flights;
++++++  int *t;
++++++  time_get(t);
++++++  if(time_get(t) == 0) {
++++++     return;
++++++   }
+++++ 
+++++-  int time = time_get();
+++++   int nearest = 0;
+++++   int position = 0;
+++++ 
+++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++-    if(flights[i].time >= time){
+++++-      if(flights[i].time - nearest <= nearest - time){
++++++    if(flights[i].time >= *t){
++++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
+++++         nearest = flights[i].time;
+++++         position = i;
+++++       }
+++++@@ -573,18 +602,21 @@ flights[position].available--;
+++++   
+++++ }
+++++ 
+++++-flight_schedule_unschedule_seat(city_t city){
++++++ void flight_schedule_unschedule_seat(city_t city){
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++ 
+++++   struct flight *flights;
+++++   flights = temp->flights;
+++++-
+++++-  int time = time_get();
++++++  int *t;
++++++  time_get(t);
++++++  if(time_get(t) == 0) {
++++++     return;
++++++   }
+++++   int nearest = 0;
+++++   int position = 0;
+++++ 
+++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++-    if(flights[i].time == time){
++++++    if(flights[i].time == *t){ //origrinally was time 
+++++      flights[i].available--;
+++++     }
+++++   }
+++++diff --git a/gitlog.txt b/gitlog.txt
+++++index e69de29..c3e37f7 100644
+++++--- a/gitlog.txt
++++++++ b/gitlog.txt
+++++@@ -0,0 +1,3895 @@
++++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 22:04:59 2020 -0400
++++++
++++++    finshing up scheduling/unscheduling and debuggin
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 322ef6c..881c536 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
++++++   flight_schedule_add(city);
++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++ 
++++++-  time_t time = time_get();
++++++-  int capacity = flight_capacity_get();
+++++++
+++++++  int *t;
+++++++  time_get(t); //do this then check if t is 0 to see if valid or not 
+++++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++++   
++++++   if (time == 1 || capacity == 1 ){
++++++       return 1;
++++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
++++++ 
++++++ 
++++++ 
++++++-  time_t time = time_get();
++++++-  int capacity = flight_capacity_get(); 
+++++++  int *t;
+++++++  time_get(t); //if 1 continue; else tell user
+++++++   if(time_get(t) == 0) {
+++++++     return;
+++++++   }
+++++++  int *c;
+++++++  flight_capacity_get(c); 
++++++   
++++++   struct flight *flights;
++++++   flights = temp->flights;
++++++ 
++++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++-    if(flights[i].time == time){
+++++++    if(flights[i].time == *t){
++++++       flights[i].time = -1;//was flights[i] will this change correct one?
++++++       flights[i].capacity = 0;  
++++++       flights[i].available = 0;
++++++
++++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 21:51:04 2020 -0400
++++++
++++++    schedule and unschedule seat
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 6db86b9..322ef6c 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
++++++ 
++++++ 
++++++ void flight_schedule_schedule_seat(city_t city) {
+++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++
+++++++  struct flight *flights;
+++++++  flights = temp->flights;
+++++++
+++++++  int time = time_get();
+++++++  int nearest = 0;
+++++++  int position = 0;
+++++++
+++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++    if(flights[i].time >= time){
+++++++      if(flights[i].time - nearest <= nearest - time){
+++++++        nearest = flights[i].time;
+++++++        position = i;
+++++++      }
+++++++    }
+++++++  }
+++++++flights[position].available--;
++++++   
++++++-}
++++++\ No newline at end of file
+++++++}
+++++++
+++++++flight_schedule_unschedule_seat(city_t city){
+++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++
+++++++  struct flight *flights;
+++++++  flights = temp->flights;
+++++++
+++++++  int time = time_get();
+++++++  int nearest = 0;
+++++++  int position = 0;
+++++++
+++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++    if(flights[i].time == time){
+++++++     flights[i].available--;
+++++++    }
+++++++  }
+++++++}
+++++++
++++++
++++++commit 4490dcc205f2959c8fa299368be096d99f756e27
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 21:23:54 2020 -0400
++++++
++++++    continuing work on add and remove flights
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index d9c99ff..6db86b9 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
++++++   flight_schedule_add(city);
++++++   struct flight_schedule *temp = flight_schedule_find(city);
++++++ 
++++++-  int time = time_get();
+++++++  time_t time = time_get();
++++++   int capacity = flight_capacity_get();
++++++   
++++++   if (time == 1 || capacity == 1 ){
++++++       return 1;
++++++   }
++++++ 
++++++-  temp->flight->flights[];
+++++++  struct flight *flights;
+++++++  flights = temp->flights;
+++++++  //flights[i]
+++++++  //loop thru flights until open flight then add flight
++++++ 
+++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++    if(flights[i].time == -1){
+++++++      flights[i].time = time;//was flights[i] will this change correct one?
+++++++      flights[i].capacity = capacity;
+++++++      break;
+++++++    }
+++++++  }
+++++++  //else return that it failed
+++++++
+++++++
+++++++}
+++++++
+++++++void flight_schedule_remove_flight(city_t city){
+++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++ //idk if this is the right time to call or even need too
++++++ 
++++++ 
+++++++
+++++++  time_t time = time_get();
+++++++  int capacity = flight_capacity_get(); 
+++++++  
+++++++  struct flight *flights;
+++++++  flights = temp->flights;
+++++++
+++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++++    if(flights[i].time == time){
+++++++      flights[i].time = -1;//was flights[i] will this change correct one?
+++++++      flights[i].capacity = 0;  
+++++++      flights[i].available = 0;
+++++++      break;
+++++++    }
+++++++  }
++++++ }
+++++++
+++++++
+++++++void flight_schedule_schedule_seat(city_t city) {
+++++++  
+++++++}
++++++\ No newline at end of file
++++++
++++++commit e41186f0b9058ea4390a8f0fda78296861580f31
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 20:05:28 2020 -0400
++++++
++++++    updates to add_flight
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index aae10c7..d9c99ff 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++   }
++++++ }
++++++ 
++++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++++   struct flight_schedule *temp = flight_schedules_active;
+++++++
++++++   while(temp != NULL){
++++++-    if (strcmp(city,temp->destination) == 0){
+++++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++++       return(temp);
++++++     }
++++++     temp = temp->next;
++++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++ }
++++++ 
++++++ 
+++++++void flight_schedule_add(city_t city){ //should this call get city
+++++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++++  
+++++++  if (flight_schedule_find) {
+++++++    msg_city_exists(city);
+++++++  }
+++++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++++  
+++++++  //p->destination = ch; 
+++++++
+++++++}
+++++++
+++++++
+++++++void flight_schedule_remove(city_t city){
+++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++  flight_schedule_free(temp);
+++++++}
+++++++
+++++++
+++++++
+++++++void flight_schedule_listAll(void){
+++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++  while(temp != NULL){
+++++++    printf("%p", &temp);
+++++++    temp = temp->next;
+++++++  }
+++++++
+++++++}
+++++++
+++++++void flight_schedule_list(city_t city){
+++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++  while(temp != NULL){
+++++++    if (strcmp(city,temp->destination) == 0){
+++++++      printf("%p", &temp);
+++++++    }
+++++++    temp = temp->next;
+++++++  }
+++++++}
+++++++
+++++++void flight_schedule_add_flight(city_t city){
+++++++  flight_schedule_add(city);
+++++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++++
+++++++  int time = time_get();
+++++++  int capacity = flight_capacity_get();
+++++++  
+++++++  if (time == 1 || capacity == 1 ){
+++++++      return 1;
+++++++  }
+++++++
+++++++  temp->flight->flights[];
+++++++
+++++++
+++++++
+++++++}
++++++
++++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 18:35:40 2020 -0400
++++++
++++++    correction of free, working on find
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index a03a0af..aae10c7 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++   int counter = 0;
++++++   struct flight_schedule *temp = flight_schedules_active;
++++++   while(temp != NULL) {
++++++-    if(temp == fs){
+++++++    if(temp == fs){ //use flight schedule find instead
++++++       break;
++++++     }
++++++     temp = temp->next;
++++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     flight_schedule_reset(temp);
++++++ 
++++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++++-    flight_schedule_free = temp;
+++++++    flight_schedules_free = temp;
++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++     //flight_schedule_reset(temp);
++++++ 
++++++   }
++++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++++     temp->prev->next = temp->next;
++++++     temp->next->prev = temp->prev;
++++++     temp->next = NULL;
++++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     flight_schedule_reset(temp);
++++++ 
++++++     temp->next = flight_schedules_free;
++++++-    flight_schedule_free = temp;
+++++++    flight_schedules_free = temp;
++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++   }
++++++   else{
++++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
++++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++ 
++++++     temp->next = flight_schedules_free;
++++++-    flight_schedule_free = temp;
+++++++    flight_schedules_free = temp;
++++++     flight_schedules_free->next->prev = flight_schedules_free;
++++++     
++++++   }
++++++-}
++++++\ No newline at end of file
+++++++}
+++++++
+++++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++  while(temp != NULL){
+++++++    if (strcmp(city,temp->destination) == 0){
+++++++      return(temp);
+++++++    }
+++++++    temp = temp->next;
+++++++  }
+++++++}
+++++++
+++++++
++++++
++++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 15:08:53 2020 -0400
++++++
++++++    working on flight_schedule_free
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 1f30cd1..a03a0af 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
++++++ //flight schedule free
++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++-  struct flight_schedule *temp = flight
+++++++  int counter = 0;
+++++++  struct flight_schedule *temp = flight_schedules_active;
+++++++  while(temp != NULL) {
+++++++    if(temp == fs){
+++++++      break;
+++++++    }
+++++++    temp = temp->next;
+++++++    counter++;
+++++++  }
+++++++  
+++++++  if (counter == 0){
+++++++    flight_schedules_active = temp->next;
+++++++    flight_schedules_active->prev = NULL;
+++++++    temp->next = NULL;
+++++++
+++++++    flight_schedule_reset(temp);
+++++++
+++++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++++    flight_schedule_free = temp;
+++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++    //flight_schedule_reset(temp);
+++++++
+++++++  }
+++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++++    temp->prev->next = temp->next;
+++++++    temp->next->prev = temp->prev;
+++++++    temp->next = NULL;
+++++++    temp->prev = NULL;
+++++++
+++++++    flight_schedule_reset(temp);
+++++++
+++++++    temp->next = flight_schedules_free;
+++++++    flight_schedule_free = temp;
+++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++  }
+++++++  else{
+++++++    temp->prev = NULL;
+++++++    flight_schedules_active->prev->next = NULL;
+++++++
+++++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++++
+++++++    temp->next = flight_schedules_free;
+++++++    flight_schedule_free = temp;
+++++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++++    
+++++++  }
++++++ }
++++++\ No newline at end of file
++++++
++++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Mon Sep 28 14:12:10 2020 -0400
++++++
++++++    correcting allocate
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index ec71f49..1f30cd1 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
++++++ //returns pointer to updated flight schedule
++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++ 
++++++-  struct flight_schedule temp = 
+++++++  struct flight_schedule *temp =  flight_schedules_free;
+++++++  flight_schedules_free = flight_schedules_free->next;
+++++++  flight_schedules_free->prev = NULL;
+++++++  temp->next = flight_schedules_active;
+++++++
+++++++  flight_schedules_active = temp;
+++++++  flight_schedules_active->next->prev = flight_schedules_active;
+++++++  //temp->prev = NULL;
+++++++  //struct flight_schedule *temp2 = flight_schedules_active
++++++   
++++++-  
++++++-  
++++++-  *flight_schedules_active = *flight_schedules_free->free;
++++++-
++++++-  
++++++-  //flight_schedules_active = flight_schedules_free;
++++++-  *flight_schedules_free = *flight_schedules_free->next;
++++++-  *flight_schedules_free->prev = NULL;
++++++-  return(flight_schedules_active->flights[]);
+++++++  return(flight_schedules_active);
++++++ }
++++++ 
++++++ //flight schedule free
++++++ //takes schedule off active list, resets it, then places the node back on free list
++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++-  
+++++++  struct flight_schedule *temp = flight
++++++ }
++++++\ No newline at end of file
++++++
++++++commit 7c7197814c779e696458438563f16bc76b197fb2
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Fri Sep 25 18:25:04 2020 -0400
++++++
++++++    very confused, trying to use pointers to alt sched
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index ff89d23..ec71f49 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
++++++   return (af->time - bf->time);
++++++ }
++++++ 
++++++-WRITE SOME CODE!
+++++++//WRITE SOME CODE!
++++++ //flight schedule allocate
+++++++//takes a schedule off the free list and places it on the active list
+++++++//returns pointer to updated flight schedule
++++++ struct flight_schedule * flight_schedule_allocate(void){
++++++-  *flight_schedules_active = *flight_schedules_free;
++++++-  *flight_schedules_free = *flight_schedules_free.next;
++++++-  return(flight_schedule);
++++++-}
++++++ 
+++++++  struct flight_schedule temp = 
+++++++  
+++++++  
+++++++  
+++++++  *flight_schedules_active = *flight_schedules_free->free;
++++++ 
+++++++  
+++++++  //flight_schedules_active = flight_schedules_free;
+++++++  *flight_schedules_free = *flight_schedules_free->next;
+++++++  *flight_schedules_free->prev = NULL;
+++++++  return(flight_schedules_active->flights[]);
+++++++}
++++++ 
++++++ //flight schedule free
++++++-
+++++++//takes schedule off active list, resets it, then places the node back on free list
++++++ void flight_schedule_free(struct flight_schedule *fs){
++++++-  *flight_schedule_active = *flight_schedule_free;
++++++-  *fs = 
+++++++  
++++++ }
++++++\ No newline at end of file
++++++
++++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
++++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++++Date:   Fri Sep 25 12:05:56 2020 -0400
++++++
++++++    starting work on first 3 helper functions
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 31abde4..ff89d23 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
++++++ }
++++++ 
++++++ WRITE SOME CODE!
+++++++//flight schedule allocate
+++++++struct flight_schedule * flight_schedule_allocate(void){
+++++++  *flight_schedules_active = *flight_schedules_free;
+++++++  *flight_schedules_free = *flight_schedules_free.next;
+++++++  return(flight_schedule);
+++++++}
+++++++
+++++++
+++++++
+++++++//flight schedule free
+++++++
+++++++void flight_schedule_free(struct flight_schedule *fs){
+++++++  *flight_schedule_active = *flight_schedule_free;
+++++++  *fs = 
+++++++}
++++++\ No newline at end of file
++++++
++++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++++Date:   Thu Sep 24 18:32:49 2020 -0400
++++++
++++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
++++++
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++index 2f5c360..31abde4 100644
++++++--- a/assignment-3.c
+++++++++ b/assignment-3.c
++++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++++ // Structure to hold all the information for a single flight
++++++ //   A city's schedule has an array of these
++++++ struct flight {
++++++-  int time;       // departure time of the flight
+++++++  time_t time;       // departure time of the flight
++++++   int available;  // number of seats currently available on the flight
++++++   int capacity;   // maximum seat capacity of the flight
++++++ };
++++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++     array[i+1].prev = &array[i];
++++++   }
++++++   // Takes care of last node.  
++++++-  // Its prev pointer will be set in the loop,
++++++-  // we just have to set its next to NULL.
+++++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
++++++   array[n-1].next = NULL;
+++++++  array[n-1].prev = &array[n-2];
++++++   flight_schedules_free = &array[0];
++++++ }
++++++ 
++++++diff --git a/reference b/reference
++++++index ee9132a..b11f6c6 100755
++++++Binary files a/reference and b/reference differ
++++++
++++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
++++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++++Date:   Mon Sep 21 21:02:39 2020 -0400
++++++
++++++    Initial Commit to seed assignment 3. Have fun!
++++++
++++++diff --git a/.gitignore b/.gitignore
++++++new file mode 100644
++++++index 0000000..8ff04a2
++++++--- /dev/null
+++++++++ b/.gitignore
++++++@@ -0,0 +1,4 @@
+++++++*
+++++++!assignment-3.c
+++++++!gitlog.txt
+++++++
++++++diff --git a/.vscode/launch.json b/.vscode/launch.json
++++++new file mode 100644
++++++index 0000000..5f223b9
++++++--- /dev/null
+++++++++ b/.vscode/launch.json
++++++@@ -0,0 +1,30 @@
+++++++{
+++++++    // Use IntelliSense to learn about possible attributes.
+++++++    // Hover to view descriptions of existing attributes.
+++++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+++++++    "version": "0.2.0",
+++++++    "configurations": [
+++++++    
+++++++
+++++++        {
+++++++            "name": "(gdb) Launch",
+++++++            "type": "cppdbg",
+++++++            "request": "launch",
+++++++            "program": "${workspaceFolder}/assignment-3",
+++++++            "args": [],
+++++++            "stopAtEntry": true,
+++++++            "cwd": "${workspaceFolder}",
+++++++            "environment": [],
+++++++            "externalConsole": false,
+++++++            "MIMode": "gdb",
+++++++            "setupCommands": [
+++++++                {
+++++++                    "description": "Enable pretty-printing for gdb",
+++++++                    "text": "-enable-pretty-printing",
+++++++                    "ignoreFailures": true
+++++++                }
+++++++            ],
+++++++            "preLaunchTask": "Build"
+++++++        }
+++++++    ]
+++++++}
++++++diff --git a/.vscode/settings.json b/.vscode/settings.json
++++++new file mode 100644
++++++index 0000000..495436f
++++++--- /dev/null
+++++++++ b/.vscode/settings.json
++++++@@ -0,0 +1,21 @@
+++++++{
+++++++    "git.ignoreLegacyWarning": true,
+++++++    "files.autoSave": "afterDelay",
+++++++    "files.exclude": {
+++++++        ".vscode": true,
+++++++        "**/*.o": true,
+++++++        "reference": true,
+++++++        "assignment-3": true,
+++++++        "test.sh":true,
+++++++        "gitlog.txt":true,
+++++++        ".gitignore":true
+++++++    },
+++++++    "editor.renderControlCharacters": true,
+++++++    "C_Cpp.default.cStandard": "c99",
+++++++    "C_Cpp.default.cppStandard": "gnu++11",
+++++++    "C_Cpp.default.defines": [],
+++++++    "C_Cpp.intelliSenseEngine": "Disabled",
+++++++    "C_Cpp.workspaceParsingPriority": "low",
+++++++    "C_Cpp.intelliSenseCacheSize": 100,
+++++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
+++++++}
++++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
++++++new file mode 100644
++++++index 0000000..d02618f
++++++--- /dev/null
+++++++++ b/.vscode/tasks.json
++++++@@ -0,0 +1,28 @@
+++++++{
+++++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
+++++++    // for the documentation about the tasks.json format
+++++++    "version": "2.0.0",
+++++++    "tasks": [
+++++++        {
+++++++            "label": "Build",
+++++++            "type": "shell",
+++++++            "command": "make",
+++++++            "options": {
+++++++                "cwd": "${workspaceFolder}"
+++++++            },
+++++++            "group": {
+++++++                "kind": "build",
+++++++                "isDefault": true
+++++++            },
+++++++            "presentation": {
+++++++                "reveal": "always",
+++++++                "panel": "shared"
+++++++            },
+++++++            "problemMatcher": {
+++++++                "base": "$gcc",
+++++++                "fileLocation": ["relative", "${workspaceRoot}/"]
+++++++            }
+++++++        }
+++++++        
+++++++    ]
+++++++}
++++++diff --git a/Makefile b/Makefile
++++++new file mode 100644
++++++index 0000000..1c3a3d1
++++++--- /dev/null
+++++++++ b/Makefile
++++++@@ -0,0 +1,69 @@
+++++++.PHONY: all clean test gitlog
+++++++
+++++++all: assignment-3
+++++++
+++++++assignment-3: assignment-3.c
+++++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
+++++++
+++++++test: assignment-3 gitlog
+++++++	./test.sh
+++++++
+++++++test1: assignment-3
+++++++	./test.sh 1
+++++++
+++++++test2: assignment-3
+++++++	./test.sh 2
+++++++
+++++++test3: assignment-3
+++++++	./test.sh 3
+++++++
+++++++test4: assignment-3
+++++++	./test.sh 4
+++++++
+++++++test5: assignment-3
+++++++	./test.sh 5
+++++++
+++++++test6: assignment-3
+++++++	./test.sh 6
+++++++
+++++++test7: assignment-3
+++++++	./test.sh 7
+++++++
+++++++test8: assignment-3
+++++++	./test.sh 8
+++++++
+++++++test9: assignment-3
+++++++	./test.sh 9
+++++++
+++++++test10: assignment-3
+++++++	./test.sh 10
+++++++
+++++++test11: assignment-3
+++++++	./test.sh 11
+++++++
+++++++test12: assignment-3
+++++++	./test.sh 12
+++++++
+++++++test13: assignment-3
+++++++	./test.sh 13
+++++++
+++++++test14: assignment-3
+++++++	./test.sh 14
+++++++
+++++++test15: assignment-3
+++++++	./test.sh 15
+++++++
+++++++test16: assignment-3
+++++++	./test.sh 16
+++++++
+++++++bonus1: assignment-3
+++++++	./test.sh 1 bonus
+++++++
+++++++bonus2: assignment-3
+++++++	./test.sh 2 bonus
+++++++
+++++++gitlog:
+++++++	git log -p > gitlog.txt
+++++++
+++++++clean:
+++++++	-${RM} assignment-3
++++++diff --git a/assignment-3.c b/assignment-3.c
++++++new file mode 100644
++++++index 0000000..2f5c360
++++++--- /dev/null
+++++++++ b/assignment-3.c
++++++@@ -0,0 +1,375 @@
+++++++/**
+++++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
+++++++ *  Let's use our knowledge to write a simple flight management system!
+++++++ **/
+++++++
+++++++#include <stdio.h>
+++++++#include <string.h>
+++++++#include <stdlib.h>
+++++++#include <stdbool.h>
+++++++#include <assert.h>
+++++++
+++++++// Limit constants
+++++++#define MAX_CITY_NAME_LEN 20
+++++++#define MAX_FLIGHTS_PER_CITY 5
+++++++#define MAX_DEFAULT_SCHEDULES 50
+++++++
+++++++// Time definitions
+++++++#define TIME_MIN 0
+++++++#define TIME_MAX ((60 * 24)-1)
+++++++#define TIME_NULL -1
+++++++
+++++++
+++++++/******************************************************************************
+++++++ * Structure and Type definitions                                             *
+++++++ ******************************************************************************/
+++++++typedef int time_t;                        // integers used for time values
+++++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++++ 
+++++++// Structure to hold all the information for a single flight
+++++++//   A city's schedule has an array of these
+++++++struct flight {
+++++++  int time;       // departure time of the flight
+++++++  int available;  // number of seats currently available on the flight
+++++++  int capacity;   // maximum seat capacity of the flight
+++++++};
+++++++
+++++++// Structure for an individual flight schedule
+++++++// The main data structure of the program is an Array of these structures
+++++++// Each structure will be placed on one of two linked lists:
+++++++//                free or active
+++++++// Initially the active list will be empty and all the schedules
+++++++// will be on the free list.  Adding a schedule is finding the first
+++++++// free schedule on the free list, removing it from the free list,
+++++++// setting its destination city and putting it on the active list
+++++++struct flight_schedule {
+++++++  city_t destination;                          // destination city name
+++++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
+++++++  struct flight_schedule *next;                // link list next pointer
+++++++  struct flight_schedule *prev;                // link list prev pointer
+++++++};
+++++++
+++++++/******************************************************************************
+++++++ * Global / External variables                                                *
+++++++ ******************************************************************************/
+++++++// This program uses two global linked lists of Schedules.  See comments
+++++++// of struct flight_schedule above for details
+++++++struct flight_schedule *flight_schedules_free = NULL;
+++++++struct flight_schedule *flight_schedules_active = NULL;
+++++++
+++++++
+++++++/******************************************************************************
+++++++ * Function Prototypes                                                        *
+++++++ ******************************************************************************/
+++++++// Misc utility io functions
+++++++int city_read(city_t city);           
+++++++bool time_get(time_t *time_ptr);      
+++++++bool flight_capacity_get(int *capacity_ptr);
+++++++void print_command_help(void);
+++++++
+++++++// Core functions of the program
+++++++void flight_schedule_initialize(struct flight_schedule array[], int n);
+++++++struct flight_schedule * flight_schedule_find(city_t city);
+++++++struct flight_schedule * flight_schedule_allocate(void);
+++++++void flight_schedule_free(struct flight_schedule *fs);
+++++++void flight_schedule_add(city_t city);
+++++++void flight_schedule_listAll(void);
+++++++void flight_schedule_list(city_t city);
+++++++void flight_schedule_add_flight(city_t city);
+++++++void flight_schedule_remove_flight(city_t city);
+++++++void flight_schedule_schedule_seat(city_t city);
+++++++void flight_schedule_unschedule_seat(city_t city);
+++++++void flight_schedule_remove(city_t city);
+++++++
+++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
+++++++int  flight_compare_time(const void *a, const void *b);
+++++++
+++++++
+++++++int main(int argc, char *argv[]) 
+++++++{
+++++++  long n = MAX_DEFAULT_SCHEDULES;
+++++++  char command;
+++++++  city_t city;
+++++++
+++++++  if (argc > 1) {
+++++++    // If the program was passed an argument then try and convert the first
+++++++    // argument in the a number that will override the default max number
+++++++    // of schedule we will support
+++++++    char *end;
+++++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
+++++++    if (n==0) {
+++++++      printf("ERROR: Bad number of default max scedules specified.\n");
+++++++      exit(EXIT_FAILURE);
+++++++    }
+++++++  }
+++++++
+++++++  // C99 lets us allocate an array of a fixed length as a local 
+++++++  // variable.  Since we are doing this in main and a call to main will be 
+++++++  // active for the entire time of the program's execution this
+++++++  // array will be alive for the entire time -- its memory and values
+++++++  // will be stable for the entire program execution.
+++++++  struct flight_schedule flight_schedules[n];
+++++++ 
+++++++  // Initialize our global lists of free and active schedules using
+++++++  // the elements of the flight_schedules array
+++++++  flight_schedule_initialize(flight_schedules, n);
+++++++
+++++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
+++++++  //  When possible, if we know that some particular thing should have happened
+++++++  //  we think of that as an assertion and write code to test them.
+++++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
+++++++  // the free list to a non-null value and the the active list is a null value.
+++++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
+++++++
+++++++  // Print the instruction in the beginning
+++++++  print_command_help();
+++++++
+++++++  // Command processing loop
+++++++  while (scanf(" %c", &command) == 1) {
+++++++    switch (command) {
+++++++    case 'A': 
+++++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
+++++++      city_read(city);
+++++++      flight_schedule_add(city);
+++++++
+++++++      break;
+++++++    case 'L':
+++++++      // List all active flight schedules eg. "L\n"
+++++++      flight_schedule_listAll();
+++++++      break;
+++++++    case 'l': 
+++++++      // List the flights for a particular city eg. "l\n"
+++++++      city_read(city);
+++++++      flight_schedule_list(city);
+++++++      break;
+++++++    case 'a':
+++++++      // Adds a flight for a particular city "a Toronto\n
+++++++      //                                      360 100\n"
+++++++      city_read(city);
+++++++      flight_schedule_add_flight(city);
+++++++      break;
+++++++    case 'r':
+++++++      // Remove a flight for a particular city "r Toronto\n
+++++++      //                                        360\n"
+++++++      city_read(city);
+++++++      flight_schedule_remove_flight(city);
+++++++	break;
+++++++    case 's':
+++++++      // schedule a seat on a flight for a particular city "s Toronto\n
+++++++      //                                                    300\n"
+++++++      city_read(city);
+++++++      flight_schedule_schedule_seat(city);
+++++++      break;
+++++++    case 'u':
+++++++      // unschedule a seat on a flight for a particular city "u Toronto\n
+++++++      //                                                      360\n"
+++++++        city_read(city);
+++++++        flight_schedule_unschedule_seat(city);
+++++++        break;
+++++++    case 'R':
+++++++      // remove the schedule for a particular city "R Toronto\n"
+++++++      city_read(city);
+++++++      flight_schedule_remove(city);  
+++++++      break;
+++++++    case 'h':
+++++++        print_command_help();
+++++++        break;
+++++++    case 'q':
+++++++      goto done;
+++++++    default:
+++++++      printf("Bad command. Use h to see help.\n");
+++++++    }
+++++++  }
+++++++ done:
+++++++  return EXIT_SUCCESS;
+++++++}
+++++++
+++++++/**********************************************************************
+++++++ * city_read: Takes in and processes a given city following a command *
+++++++ *********************************************************************/
+++++++int city_read(city_t city) {
+++++++  int ch, i=0;
+++++++
+++++++  // skip leading non letter characters
+++++++  while (true) {
+++++++    ch = getchar();
+++++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
+++++++      city[i++] = ch;
+++++++      break;
+++++++    }
+++++++  }
+++++++  while ((ch = getchar()) != '\n') {
+++++++    if (i < MAX_CITY_NAME_LEN) {
+++++++      city[i++] = ch;
+++++++    }
+++++++  }
+++++++  city[i] = '\0';
+++++++  return i;
+++++++}
+++++++
+++++++
+++++++/****************************************************************
+++++++ * Message functions so that your messages match what we expect *
+++++++ ****************************************************************/
+++++++void msg_city_bad(char *city) {
+++++++  printf("No schedule for %s\n", city);
+++++++}
+++++++
+++++++void msg_city_exists(char *city) {
+++++++  printf("There is a schedule of %s already.\n", city);
+++++++}
+++++++
+++++++void msg_schedule_no_free(void) {
+++++++  printf("Sorry no more free schedules.\n");
+++++++}
+++++++
+++++++void msg_city_flights(char *city) {
+++++++  printf("The flights for %s are:", city);
+++++++}
+++++++
+++++++void msg_flight_info(int time, int avail, int capacity) {
+++++++  printf(" (%d, %d, %d)", time, avail, capacity);
+++++++}
+++++++
+++++++void msg_city_max_flights_reached(char *city) {
+++++++  printf("Sorry we cannot add more flights on this city.\n");
+++++++}
+++++++
+++++++void msg_flight_bad_time(void) {
+++++++  printf("Sorry there's no flight scheduled on this time.\n");
+++++++}
+++++++
+++++++void msg_flight_no_seats(void) {
+++++++    printf("Sorry there's no more seats available!\n");
+++++++}
+++++++
+++++++void msg_flight_all_seats_empty(void) {
+++++++  printf("All the seats on this flights are empty!\n");
+++++++}
+++++++
+++++++void msg_time_bad() {
+++++++  printf("Invalid time value\n");
+++++++}
+++++++
+++++++void msg_capacity_bad() {
+++++++  printf("Invalid capacity value\n");
+++++++}
+++++++
+++++++void print_command_help()
+++++++{
+++++++  printf("Here are the possible commands:\n"
+++++++	 "A <city name>     - Add an active empty flight schedule for\n"
+++++++	 "                    <city name>\n"
+++++++	 "L                 - List cities which have an active schedule\n"
+++++++	 "l <city name>     - List the flights for <city name>\n"
+++++++	 "a <city name>\n"
+++++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
+++++++	 "                    with <capacity> seats\n"  
+++++++	 "r <city name>\n"
+++++++         "<time>            - Remove a flight form <city name> whose time is\n"
+++++++	 "                    <time>\n"
+++++++	 "s <city name>\n"
+++++++	 "<time>            - Attempt to schedule seat on flight to \n"
+++++++	 "                    <city name> at <time> or next closest time on\n"
+++++++	 "                    which their is an available seat\n"
+++++++	 "u <city name>\n"
+++++++	 "<time>            - unschedule a seat from flight to <city name>\n"
+++++++	 "                    at <time>\n"
+++++++	 "R <city name>     - Remove schedule for <city name>\n"
+++++++	 "h                 - print this help message\n"
+++++++	 "q                 - quit\n"
+++++++);
+++++++}
+++++++
+++++++
+++++++/****************************************************************
+++++++ * Resets a flight schedule                                     *
+++++++ ****************************************************************/
+++++++void flight_schedule_reset(struct flight_schedule *fs) {
+++++++    fs->destination[0] = 0;
+++++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
+++++++      fs->flights[i].time = TIME_NULL;
+++++++      fs->flights[i].available = 0;
+++++++      fs->flights[i].capacity = 0;
+++++++    }
+++++++    fs->next = NULL;
+++++++    fs->prev = NULL;
+++++++}
+++++++
+++++++/******************************************************************
+++++++* Initializes the flight_schedule array that will hold any flight *
+++++++* schedules created by the user. This is called in main for you.  *
+++++++ *****************************************************************/
+++++++
+++++++void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++++{
+++++++  flight_schedules_active = NULL;
+++++++  flight_schedules_free = NULL;
+++++++
+++++++  // takes care of empty array case
+++++++  if (n==0) return;
+++++++
+++++++  // Loop through the Array connecting them
+++++++  // as a linear doubly linked list
+++++++  array[0].prev = NULL;
+++++++  for (int i=0; i<n-1; i++) {
+++++++    flight_schedule_reset(&array[i]);
+++++++    array[i].next = &array[i+1];
+++++++    array[i+1].prev = &array[i];
+++++++  }
+++++++  // Takes care of last node.  
+++++++  // Its prev pointer will be set in the loop,
+++++++  // we just have to set its next to NULL.
+++++++  array[n-1].next = NULL;
+++++++  flight_schedules_free = &array[0];
+++++++}
+++++++
+++++++/***********************************************************
+++++++ * time_get: read a time from the user
+++++++   Time in this program is a minute number 0-((24*60)-1)=1439
+++++++   -1 is used to indicate the NULL empty time 
+++++++   This function should read in a time value and check its 
+++++++   validity.  If it is not valid eg. not -1 or not 0-1439
+++++++   It should print "Invalid Time" and return false.
+++++++   othewise it should return the value in the integer pointed
+++++++   to by time_ptr.
+++++++ ***********************************************************/
+++++++bool time_get(int *time_ptr) {
+++++++  if (scanf("%d", time_ptr)==1) {
+++++++    return (TIME_NULL == *time_ptr || 
+++++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
+++++++  } 
+++++++  msg_time_bad();
+++++++  return false;
+++++++}
+++++++
+++++++/***********************************************************
+++++++ * flight_capacity_get: read the capacity of a flight from the user
+++++++   This function should read in a capacity value and check its 
+++++++   validity.  If it is not greater than 0, it should print 
+++++++   "Invalid capacity value" and return false. Othewise it should 
+++++++   return the value in the integer pointed to by cap_ptr.
+++++++ ***********************************************************/
+++++++bool flight_capacity_get(int *cap_ptr) {
+++++++  if (scanf("%d", cap_ptr)==1) {
+++++++    return *cap_ptr > 0;
+++++++  }
+++++++  msg_capacity_bad();
+++++++  return false;
+++++++}
+++++++
+++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
+++++++{
+++++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
+++++++	flight_compare_time);
+++++++}
+++++++
+++++++int flight_compare_time(const void *a, const void *b) 
+++++++{
+++++++  const struct flight *af = a;
+++++++  const struct flight *bf = b;
+++++++  
+++++++  return (af->time - bf->time);
+++++++}
+++++++
+++++++WRITE SOME CODE!
++++++diff --git a/gitlog.txt b/gitlog.txt
++++++new file mode 100644
++++++index 0000000..e69de29
++++++diff --git a/reference b/reference
++++++new file mode 100755
++++++index 0000000..ee9132a
++++++Binary files /dev/null and b/reference differ
++++++diff --git a/test.sh b/test.sh
++++++new file mode 100755
++++++index 0000000..f8ecbf4
++++++--- /dev/null
+++++++++ b/test.sh
++++++@@ -0,0 +1,328 @@
+++++++#!/bin/bash
+++++++#set -x
+++++++
+++++++REFERENCE=./reference
+++++++PGM=./assignment-3
+++++++
+++++++# To add a test you can add an element the REQUIRED arrays 
+++++++# or BONUS Arrays
+++++++# Each test can have a descripttion, input and optionally a num
+++++++# num is passed as the argument on the command line to set
+++++++# the default max schedule size
+++++++
+++++++# Required tests
+++++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
+++++++REQUIRED_INPUT[0]="L
+++++++A Toronto
+++++++L"
+++++++
+++++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
+++++++REQUIRED_INPUT[1]="L
+++++++A Toronto
+++++++l Toronto
+++++++a Toronto
+++++++1000 5
+++++++l Toronto"
+++++++
+++++++REQUIRED_NUM[2]="2"
+++++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
+++++++REQUIRED_INPUT[2]="L
+++++++A City1
+++++++A City2
+++++++L
+++++++A City3
+++++++L"
+++++++
+++++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
+++++++REQUIRED_INPUT[3]="A Naples
+++++++A Addis Ababa
+++++++L
+++++++R Naples
+++++++L"
+++++++
+++++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
+++++++REQUIRED_INPUT[4]="A San Jose
+++++++a San Jose
+++++++360 100
+++++++l San Jose
+++++++r San Jose
+++++++360
+++++++l San Jose"
+++++++
+++++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
+++++++REQUIRED_INPUT[5]="A Hanoi
+++++++r Hanoi
+++++++100"
+++++++
+++++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
+++++++REQUIRED_INPUT[6]="A Cartagena
+++++++a Cartagena
+++++++720 100
+++++++a Cartagena
+++++++840 120
+++++++s Cartagena
+++++++480
+++++++l Cartagena"
+++++++
+++++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
+++++++REQUIRED_INPUT[7]="L
+++++++A Abu Dhabi
+++++++a Abu Dhabi
+++++++360 50
+++++++a Abu Dhabi
+++++++840 100
+++++++s Abu Dhabi
+++++++700
+++++++l Abu Dhabi
+++++++u Abu Dhabi
+++++++840
+++++++l Abu Dhabi"
+++++++
+++++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
+++++++REQUIRED_INPUT[8]="L
+++++++A Belgrade
+++++++a Belgrade
+++++++400 1
+++++++s Belgrade
+++++++400
+++++++l Belgrade
+++++++s Belgrade
+++++++400
+++++++l Belgrade"
+++++++
+++++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
+++++++REQUIRED_INPUT[9]="L
+++++++A Kyoto
+++++++a Kyoto
+++++++300 5
+++++++l Kyoto
+++++++u Kyoto
+++++++300
+++++++l Kyoto"
+++++++
+++++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
+++++++REQUIRED_INPUT[10]="L
+++++++A Mumbai
+++++++a Mumbai
+++++++900 3
+++++++l Mumbai
+++++++u Mumbai
+++++++300
+++++++l Mumbai"
+++++++
+++++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
+++++++REQUIRED_INPUT[11]="L
+++++++A Prague
+++++++a Prague
+++++++360 5
+++++++a Prague
+++++++720 100
+++++++l Prague
+++++++s Prague
+++++++900
+++++++l Prague"
+++++++
+++++++REQUIRED_NUM[12]="2"
+++++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
+++++++REQUIRED_INPUT[12]="L
+++++++A City1
+++++++L
+++++++A City2
+++++++L
+++++++A City3
+++++++L
+++++++R City1
+++++++L
+++++++R City2
+++++++L
+++++++R City3
+++++++L
+++++++A City1
+++++++L"
+++++++
+++++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
+++++++REQUIRED_INPUT[13]="L
+++++++A City1
+++++++a City1
+++++++60 5
+++++++l City1
+++++++a City1
+++++++120 5
+++++++l City1
+++++++a City1
+++++++180 5
+++++++l City1
+++++++a City1
+++++++240 5
+++++++l City1
+++++++a City1
+++++++300 5
+++++++l City1
+++++++a City1
+++++++360 5
+++++++l City1
+++++++r City1
+++++++360
+++++++l City1
+++++++r City1
+++++++300
+++++++l City1
+++++++r City1
+++++++240
+++++++l City1
+++++++r City1
+++++++180
+++++++l City1
+++++++r City1
+++++++120
+++++++l City1
+++++++r City1
+++++++60
+++++++l City1
+++++++a City1
+++++++60 5
+++++++l City1"
+++++++
+++++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
+++++++REQUIRED_INPUT[14]="L
+++++++A City1
+++++++a City1
+++++++60 3
+++++++l City1
+++++++s City1
+++++++60
+++++++l City1
+++++++s City1
+++++++60
+++++++l City1
+++++++s City1
+++++++60
+++++++l City1
+++++++s City1
+++++++60
+++++++l City1
+++++++u City1
+++++++60
+++++++l City1
+++++++u City1
+++++++60
+++++++l City1
+++++++u City1
+++++++60
+++++++l City1
+++++++u City1
+++++++60
+++++++l City1"
+++++++
+++++++REQUIRED_DESC[15]="Required 16: A bigger test "
+++++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
+++++++REQUIRED_VALUE[15]=5
+++++++
+++++++
+++++++# Bonus tests
+++++++BONUS_DESC[0]="Bonus 1: Medium sized test"
+++++++BONUS_INPUT[0]="$(cat testMedium.txt)"
+++++++BONUS_VALUE[0]=3
+++++++
+++++++BONUS_DESC[1]="Bonus 2: Large sized test"
+++++++BONUS_INPUT[1]="$(cat testBig.txt)"
+++++++BONUS_VALUE[1]=5
+++++++
+++++++
+++++++function run_test()
+++++++{
+++++++   description="$1"
+++++++   input="$2"
+++++++   num="$3"
+++++++
+++++++   echo -n "$description : "
+++++++   [[ -n $VERBOSE ]] &&  echo "Input:"
+++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++++   [[ -n $VERBOSE ]] &&  echo "$input"
+++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++++
+++++++   solution=$($REFERENCE $num <<EOF
+++++++$input
+++++++EOF
+++++++)
+++++++
+++++++   answer=$($PGM $num<<EOF
+++++++$input
+++++++EOF
+++++++)
+++++++
+++++++  if [[ -n $DEBUG ]]; then
+++++++      echo "$solution"
+++++++  else
+++++++    if [[ "$answer" == "$solution" ]]; then
+++++++       echo "PASS"
+++++++       return 0
+++++++    fi
+++++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
+++++++    echo "FAIL"
+++++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
+++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++    [[ -n $VERBOSE ]] && echo "$answers"    
+++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
+++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++    [[ -n $VERBOSE ]] && echo "$solution"
+++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++++    [[ -n $VERBOSE ]] && echo ""
+++++++  fi
+++++++  return 1
+++++++}
+++++++
+++++++testnum=$1
+++++++type=$2
+++++++
+++++++total=0
+++++++correct=0
+++++++
+++++++if [[ -z $testnum ]]; then
+++++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
+++++++	value="${REQUIRED_VALUE[$i]}"
+++++++	[[ -z $value ]] && value=1
+++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++++	    (( correct += $value ))
+++++++	fi
+++++++	(( total += value ))
+++++++    done
+++++++    
+++++++    
+++++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
+++++++	value="${BONUS_VALUE[$i]}"
+++++++	[[ -z $value ]] && value=1
+++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++++	    (( correct += $value ))
+++++++	fi
+++++++    done
+++++++else
+++++++    VERBOSE=1
+++++++    (( i=$testnum - 1 ))
+++++++    if [[ -z "$type" ]]; then
+++++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
+++++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
+++++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
+++++++	    exit -1
+++++++	fi
+++++++	value="${REQUIRED_VALUE[$i]}"
+++++++	[[ -z $value ]] && value=1
+++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++++	    (( correct += $value ))
+++++++	fi
+++++++	(( total += value ))
+++++++    else
+++++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
+++++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
+++++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
+++++++	    exit -1
+++++++	fi	
+++++++	value="${BONUS_VALUE[$i]}"
+++++++	[[ -z $value ]] && value=1
+++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++++         (( correct += $value ))
+++++++	fi
+++++++    fi
+++++++fi
+++++++echo "score: ${correct}/${total}"
++++++diff --git a/testBig.txt b/testBig.txt
++++++new file mode 100644
++++++index 0000000..90170d5
++++++--- /dev/null
+++++++++ b/testBig.txt
++++++@@ -0,0 +1,1251 @@
+++++++L
+++++++A Qingdao
+++++++A Paris
+++++++A Lima
+++++++A Los Angeles
+++++++A Khartoum
+++++++A Barcelona
+++++++A Santiago
+++++++A Tokyo
+++++++A Delhi
+++++++A Guangzhou
+++++++A Johannesburg
+++++++A Paris
+++++++A Dhaka
+++++++A Chennai
+++++++A Jinan
+++++++A Luanda
+++++++A Surat
+++++++A Hyderabad
+++++++A Beijing
+++++++A Atlanta
+++++++A Chennai
+++++++A Dar es Salaam
+++++++A Osaka
+++++++A Hong Kong
+++++++A Toronto
+++++++A Saint Petersburg
+++++++A Manila
+++++++A Washington, D.C.
+++++++A Tehran
+++++++A Miami
+++++++A Khartoum
+++++++A Seoul
+++++++A Dar es Salaam
+++++++A Sao Paulo
+++++++A Baghdad
+++++++A Guadalajara
+++++++A Ahmedabad
+++++++A Moscow
+++++++A Philadelphia
+++++++A Fukuoka
+++++++a Tokyo
+++++++1414 113
+++++++a Guadalajara
+++++++385 170
+++++++a Qingdao
+++++++782 37
+++++++a Ahmedabad
+++++++1411 50
+++++++a Los Angeles
+++++++517 84
+++++++a Tehran
+++++++86 61
+++++++a Osaka
+++++++1289 162
+++++++a Barcelona
+++++++1261 158
+++++++a Fukuoka
+++++++550 191
+++++++a Seoul
+++++++207 1
+++++++a Manila
+++++++364 96
+++++++a Khartoum
+++++++56 194
+++++++a Tokyo
+++++++98 1
+++++++a Saint Petersburg
+++++++1330 107
+++++++a Baghdad
+++++++15 15
+++++++a Chennai
+++++++1169 127
+++++++a Beijing
+++++++807 97
+++++++a Seoul
+++++++1134 34
+++++++a Jinan
+++++++220 102
+++++++a Dhaka
+++++++122 101
+++++++a Luanda
+++++++1342 71
+++++++a Guadalajara
+++++++195 35
+++++++a Fukuoka
+++++++28 37
+++++++a Beijing
+++++++678 83
+++++++a Khartoum
+++++++947 39
+++++++a Hyderabad
+++++++490 104
+++++++a Sao Paulo
+++++++62 83
+++++++a Baghdad
+++++++1319 24
+++++++a Delhi
+++++++718 115
+++++++a Baghdad
+++++++204 114
+++++++a Surat
+++++++430 74
+++++++a Miami
+++++++918 87
+++++++a Surat
+++++++455 95
+++++++a Fukuoka
+++++++1077 131
+++++++a Luanda
+++++++311 21
+++++++a Seoul
+++++++1132 155
+++++++a Lima
+++++++432 177
+++++++a Surat
+++++++494 102
+++++++a Washington, D.C.
+++++++667 12
+++++++a Hong Kong
+++++++200 55
+++++++a Los Angeles
+++++++1195 4
+++++++a Ahmedabad
+++++++610 161
+++++++a Delhi
+++++++508 110
+++++++a Atlanta
+++++++17 21
+++++++a Washington, D.C.
+++++++162 23
+++++++a Luanda
+++++++1216 15
+++++++a Tokyo
+++++++1095 117
+++++++a Philadelphia
+++++++1436 117
+++++++a Atlanta
+++++++277 164
+++++++a Manila
+++++++720 147
+++++++a Tokyo
+++++++1017 25
+++++++a Jinan
+++++++76 66
+++++++a Toronto
+++++++844 84
+++++++a Santiago
+++++++7 115
+++++++a Surat
+++++++388 55
+++++++a Tehran
+++++++836 174
+++++++a Paris
+++++++371 110
+++++++a Sao Paulo
+++++++516 113
+++++++a Luanda
+++++++1041 174
+++++++a Dhaka
+++++++1076 34
+++++++a Guadalajara
+++++++162 144
+++++++a Los Angeles
+++++++424 33
+++++++a Philadelphia
+++++++565 167
+++++++a Luanda
+++++++1411 44
+++++++a Osaka
+++++++1005 82
+++++++a Fukuoka
+++++++1253 194
+++++++a Atlanta
+++++++141 102
+++++++a Fukuoka
+++++++1119 112
+++++++a Toronto
+++++++782 150
+++++++a Dhaka
+++++++1006 96
+++++++a Miami
+++++++961 126
+++++++a Lima
+++++++360 41
+++++++a Lima
+++++++14 50
+++++++a Dhaka
+++++++1028 191
+++++++a Philadelphia
+++++++502 115
+++++++a Washington, D.C.
+++++++1380 59
+++++++a Atlanta
+++++++548 113
+++++++a Fukuoka
+++++++694 183
+++++++a Saint Petersburg
+++++++261 26
+++++++a Jinan
+++++++196 53
+++++++a Delhi
+++++++315 78
+++++++a Delhi
+++++++625 92
+++++++a Ahmedabad
+++++++105 98
+++++++a Philadelphia
+++++++111 15
+++++++a Atlanta
+++++++321 31
+++++++a Ahmedabad
+++++++1244 59
+++++++a Osaka
+++++++799 173
+++++++a Khartoum
+++++++302 7
+++++++a Luanda
+++++++823 190
+++++++a Chennai
+++++++754 139
+++++++a Los Angeles
+++++++1028 78
+++++++a Miami
+++++++1123 183
+++++++a Dar es Salaam
+++++++1353 102
+++++++a Beijing
+++++++473 88
+++++++a Paris
+++++++698 95
+++++++a Barcelona
+++++++545 170
+++++++a Chennai
+++++++382 85
+++++++a Miami
+++++++821 114
+++++++a Luanda
+++++++584 161
+++++++a Fukuoka
+++++++38 26
+++++++a Jinan
+++++++536 148
+++++++a Manila
+++++++1403 133
+++++++a Washington, D.C.
+++++++917 130
+++++++a Sao Paulo
+++++++1169 81
+++++++a Santiago
+++++++689 42
+++++++a Ahmedabad
+++++++279 30
+++++++a Los Angeles
+++++++881 35
+++++++a Jinan
+++++++1293 148
+++++++a Guangzhou
+++++++1366 38
+++++++a Santiago
+++++++317 123
+++++++a Tokyo
+++++++454 104
+++++++a Atlanta
+++++++626 177
+++++++a Surat
+++++++69 135
+++++++a Luanda
+++++++1426 19
+++++++a Barcelona
+++++++879 46
+++++++a Los Angeles
+++++++1329 90
+++++++a Beijing
+++++++402 60
+++++++a Lima
+++++++727 161
+++++++a Hyderabad
+++++++601 186
+++++++a Khartoum
+++++++294 183
+++++++a Hyderabad
+++++++267 131
+++++++a Manila
+++++++771 102
+++++++a Osaka
+++++++103 68
+++++++a Atlanta
+++++++848 147
+++++++a Atlanta
+++++++811 179
+++++++a Toronto
+++++++402 131
+++++++a Guadalajara
+++++++804 28
+++++++a Qingdao
+++++++16 114
+++++++a Beijing
+++++++1218 14
+++++++a Moscow
+++++++498 195
+++++++a Surat
+++++++528 48
+++++++a Manila
+++++++865 4
+++++++a Guangzhou
+++++++328 24
+++++++a Dhaka
+++++++227 50
+++++++a Manila
+++++++124 91
+++++++a Philadelphia
+++++++218 104
+++++++a Dar es Salaam
+++++++209 34
+++++++a Chennai
+++++++641 179
+++++++a Barcelona
+++++++1433 171
+++++++a Lima
+++++++957 60
+++++++a Dhaka
+++++++1292 111
+++++++a Qingdao
+++++++647 40
+++++++a Khartoum
+++++++417 3
+++++++a Tehran
+++++++751 180
+++++++a Barcelona
+++++++778 118
+++++++a Luanda
+++++++204 59
+++++++a Ahmedabad
+++++++541 34
+++++++a Ahmedabad
+++++++539 33
+++++++a Los Angeles
+++++++824 193
+++++++a Tehran
+++++++1412 39
+++++++s Luanda
+++++++1418
+++++++s Toronto
+++++++857
+++++++s Lima
+++++++22
+++++++s Tehran
+++++++100
+++++++s Washington
+++++++175
+++++++s Dhaka
+++++++132
+++++++s Jinan
+++++++90
+++++++s Beijing
+++++++812
+++++++s Barcelona
+++++++1268
+++++++s Dhaka
+++++++228
+++++++s Dhaka
+++++++229
+++++++s Osaka
+++++++1295
+++++++s Los Angeles
+++++++527
+++++++s Ahmedabad
+++++++620
+++++++s Tokyo
+++++++461
+++++++s Luanda
+++++++588
+++++++s Tehran
+++++++1420
+++++++s Jinan
+++++++228
+++++++s Hyderabad
+++++++497
+++++++s Manila
+++++++879
+++++++s Delhi
+++++++720
+++++++s Surat
+++++++442
+++++++s Lima
+++++++21
+++++++s Delhi
+++++++630
+++++++s Tehran
+++++++836
+++++++s Dhaka
+++++++1042
+++++++s Atlanta
+++++++558
+++++++s Khartoum
+++++++300
+++++++s Luanda
+++++++1050
+++++++s Lima
+++++++445
+++++++s Hong Kong
+++++++213
+++++++s Delhi
+++++++318
+++++++s Manila
+++++++725
+++++++s Dhaka
+++++++1300
+++++++s Tokyo
+++++++1028
+++++++s Lima
+++++++23
+++++++s Qingdao
+++++++24
+++++++s Ahmedabad
+++++++542
+++++++s Barcelona
+++++++1274
+++++++s Santiago
+++++++7
+++++++s Surat
+++++++467
+++++++s Chennai
+++++++392
+++++++s Fukuoka
+++++++551
+++++++s Fukuoka
+++++++704
+++++++s Fukuoka
+++++++34
+++++++s Fukuoka
+++++++1131
+++++++s Ahmedabad
+++++++541
+++++++s Philadelphia
+++++++566
+++++++s Surat
+++++++506
+++++++s Khartoum
+++++++952
+++++++s Guadalajara
+++++++389
+++++++s Tokyo
+++++++1031
+++++++s Baghdad
+++++++24
+++++++s Khartoum
+++++++307
+++++++s Lima
+++++++370
+++++++s Atlanta
+++++++812
+++++++s Sao Paulo
+++++++1176
+++++++s Manila
+++++++1411
+++++++s Khartoum
+++++++294
+++++++s Seoul
+++++++1148
+++++++s Guadalajara
+++++++814
+++++++s Khartoum
+++++++314
+++++++s Manila
+++++++1410
+++++++s Khartoum
+++++++302
+++++++s Philadelphia
+++++++230
+++++++s Lima
+++++++728
+++++++s Ahmedabad
+++++++548
+++++++s Fukuoka
+++++++1121
+++++++s Baghdad
+++++++206
+++++++s Ahmedabad
+++++++1424
+++++++s Santiago
+++++++11
+++++++s Lima
+++++++364
+++++++s Manila
+++++++128
+++++++s Tokyo
+++++++460
+++++++s Surat
+++++++469
+++++++s Barcelona
+++++++1274
+++++++s Guadalajara
+++++++816
+++++++s Guadalajara
+++++++811
+++++++s Luanda
+++++++597
+++++++s Atlanta
+++++++852
+++++++s Guadalajara
+++++++811
+++++++s Manila
+++++++1409
+++++++s Miami
+++++++918
+++++++s Luanda
+++++++593
+++++++s Barcelona
+++++++1440
+++++++s Dhaka
+++++++132
+++++++s Lima
+++++++363
+++++++s Ahmedabad
+++++++1251
+++++++s Los Angeles
+++++++521
+++++++s Fukuoka
+++++++38
+++++++s Beijing
+++++++686
+++++++s Fukuoka
+++++++1126
+++++++s Guadalajara
+++++++196
+++++++s Baghdad
+++++++206
+++++++s Los Angeles
+++++++522
+++++++s Ahmedabad
+++++++553
+++++++s Ahmedabad
+++++++1416
+++++++s Philadelphia
+++++++113
+++++++s Dar es Salaam
+++++++217
+++++++s Lima
+++++++958
+++++++s Tehran
+++++++752
+++++++s Washington
+++++++680
+++++++s Tehran
+++++++756
+++++++s Khartoum
+++++++299
+++++++s Dhaka
+++++++1084
+++++++s Manila
+++++++878
+++++++s Ahmedabad
+++++++541
+++++++s Ahmedabad
+++++++119
+++++++s Ahmedabad
+++++++616
+++++++s Tehran
+++++++756
+++++++s Tehran
+++++++765
+++++++s Philadelphia
+++++++569
+++++++s Ahmedabad
+++++++283
+++++++s Washington
+++++++1387
+++++++s Saint Petersburg
+++++++274
+++++++s Dhaka
+++++++1037
+++++++s Philadelphia
+++++++506
+++++++s Luanda
+++++++593
+++++++s Philadelphia
+++++++232
+++++++s Dhaka
+++++++233
+++++++s Baghdad
+++++++1329
+++++++s Chennai
+++++++768
+++++++s Barcelona
+++++++546
+++++++s Sao Paulo
+++++++529
+++++++s Jinan
+++++++543
+++++++s Philadelphia
+++++++121
+++++++s Tehran
+++++++759
+++++++s Lima
+++++++964
+++++++s Miami
+++++++923
+++++++s Los Angeles
+++++++1195
+++++++s Jinan
+++++++200
+++++++s Jinan
+++++++224
+++++++s Beijing
+++++++1220
+++++++s Lima
+++++++368
+++++++s Philadelphia
+++++++1436
+++++++s Tehran
+++++++95
+++++++s Miami
+++++++928
+++++++s Baghdad
+++++++1326
+++++++s Beijing
+++++++483
+++++++s Qingdao
+++++++647
+++++++s Fukuoka
+++++++42
+++++++s Los Angeles
+++++++1033
+++++++s Los Angeles
+++++++836
+++++++s Osaka
+++++++1010
+++++++s Manila
+++++++865
+++++++s Miami
+++++++825
+++++++s Barcelona
+++++++553
+++++++s Tehran
+++++++757
+++++++s Jinan
+++++++88
+++++++s Luanda
+++++++1355
+++++++s Saint Petersburg
+++++++266
+++++++s Surat
+++++++459
+++++++s Philadelphia
+++++++576
+++++++s Philadelphia
+++++++1441
+++++++s Paris
+++++++709
+++++++s Manila
+++++++734
+++++++s Toronto
+++++++785
+++++++s Manila
+++++++135
+++++++s Lima
+++++++368
+++++++s Lima
+++++++967
+++++++s Delhi
+++++++731
+++++++s Beijing
+++++++403
+++++++s Santiago
+++++++692
+++++++s Tehran
+++++++1416
+++++++s Dar es Salaam
+++++++1358
+++++++s Seoul
+++++++1134
+++++++s Philadelphia
+++++++579
+++++++s Guangzhou
+++++++342
+++++++s Osaka
+++++++116
+++++++s Guadalajara
+++++++397
+++++++s Dhaka
+++++++1040
+++++++s Toronto
+++++++793
+++++++s Qingdao
+++++++25
+++++++s Baghdad
+++++++1332
+++++++s Osaka
+++++++1017
+++++++s Los Angeles
+++++++1338
+++++++s Ahmedabad
+++++++551
+++++++s Guangzhou
+++++++331
+++++++s Tehran
+++++++1420
+++++++s Dar es Salaam
+++++++215
+++++++s Tokyo
+++++++462
+++++++s Atlanta
+++++++859
+++++++s Fukuoka
+++++++554
+++++++s Ahmedabad
+++++++1423
+++++++s Jinan
+++++++229
+++++++s Dhaka
+++++++1294
+++++++s Ahmedabad
+++++++1250
+++++++s Ahmedabad
+++++++621
+++++++s Delhi
+++++++626
+++++++s Manila
+++++++129
+++++++s Luanda
+++++++204
+++++++s Surat
+++++++440
+++++++s Atlanta
+++++++22
+++++++s Ahmedabad
+++++++1251
+++++++s Khartoum
+++++++302
+++++++s Surat
+++++++73
+++++++s Guadalajara
+++++++209
+++++++s Manila
+++++++721
+++++++s Toronto
+++++++793
+++++++s Dar es Salaam
+++++++216
+++++++s Manila
+++++++785
+++++++s Ahmedabad
+++++++116
+++++++s Barcelona
+++++++548
+++++++s Dhaka
+++++++1041
+++++++s Khartoum
+++++++305
+++++++s Los Angeles
+++++++1208
+++++++s Dhaka
+++++++1079
+++++++s Tokyo
+++++++1422
+++++++s Manila
+++++++722
+++++++s Osaka
+++++++1298
+++++++s Surat
+++++++431
+++++++s Khartoum
+++++++294
+++++++s Barcelona
+++++++1445
+++++++s Luanda
+++++++589
+++++++s Chennai
+++++++645
+++++++s Luanda
+++++++835
+++++++s Manila
+++++++773
+++++++s Fukuoka
+++++++1256
+++++++s Dhaka
+++++++1300
+++++++s Philadelphia
+++++++230
+++++++s Philadelphia
+++++++571
+++++++s Hong Kong
+++++++209
+++++++s Khartoum
+++++++419
+++++++s Paris
+++++++706
+++++++s Sao Paulo
+++++++516
+++++++s Tehran
+++++++843
+++++++s Khartoum
+++++++429
+++++++s Khartoum
+++++++66
+++++++s Guadalajara
+++++++815
+++++++s Khartoum
+++++++63
+++++++s Guadalajara
+++++++397
+++++++s Baghdad
+++++++218
+++++++s Saint Petersburg
+++++++274
+++++++s Dar es Salaam
+++++++1359
+++++++s Lima
+++++++439
+++++++s Khartoum
+++++++312
+++++++s Luanda
+++++++1345
+++++++s Seoul
+++++++220
+++++++s Tokyo
+++++++1020
+++++++s Atlanta
+++++++25
+++++++s Sao Paulo
+++++++1179
+++++++s Manila
+++++++732
+++++++s Philadelphia
+++++++122
+++++++s Manila
+++++++723
+++++++s Baghdad
+++++++205
+++++++s Osaka
+++++++1018
+++++++s Tehran
+++++++762
+++++++s Luanda
+++++++1412
+++++++s Toronto
+++++++845
+++++++s Qingdao
+++++++24
+++++++s Surat
+++++++528
+++++++s Chennai
+++++++385
+++++++s Ahmedabad
+++++++542
+++++++s Philadelphia
+++++++1447
+++++++s Lima
+++++++733
+++++++s Guadalajara
+++++++205
+++++++s Delhi
+++++++326
+++++++s Chennai
+++++++754
+++++++s Atlanta
+++++++823
+++++++s Manila
+++++++377
+++++++s Khartoum
+++++++303
+++++++s Delhi
+++++++512
+++++++s Surat
+++++++498
+++++++s Guadalajara
+++++++165
+++++++s Manila
+++++++720
+++++++s Washington
+++++++170
+++++++s Hyderabad
+++++++280
+++++++s Lima
+++++++370
+++++++s Tokyo
+++++++98
+++++++s Toronto
+++++++854
+++++++s Ahmedabad
+++++++618
+++++++s Toronto
+++++++858
+++++++s Tehran
+++++++1421
+++++++s Qingdao
+++++++783
+++++++s Barcelona
+++++++784
+++++++s Santiago
+++++++690
+++++++s Fukuoka
+++++++1082
+++++++s Jinan
+++++++232
+++++++s Chennai
+++++++385
+++++++s Paris
+++++++710
+++++++s Tokyo
+++++++1427
+++++++s Chennai
+++++++754
+++++++s Miami
+++++++920
+++++++s Toronto
+++++++407
+++++++s Guadalajara
+++++++806
+++++++s Miami
+++++++923
+++++++s Philadelphia
+++++++226
+++++++s Manila
+++++++720
+++++++s Manila
+++++++133
+++++++s Toronto
+++++++852
+++++++s Barcelona
+++++++886
+++++++s Sao Paulo
+++++++68
+++++++s Delhi
+++++++630
+++++++s Los Angeles
+++++++428
+++++++s Washington
+++++++917
+++++++s Atlanta
+++++++322
+++++++s Atlanta
+++++++549
+++++++s Manila
+++++++137
+++++++s Miami
+++++++1135
+++++++s Guadalajara
+++++++399
+++++++A Dar es Salaam
+++++++a Qingdao
+++++++1015 95
+++++++u Toronto
+++++++402
+++++++A Lagos
+++++++L
+++++++a Qingdao
+++++++910 139
+++++++R Dar es Salaam
+++++++r Washington
+++++++917
+++++++u Osaka
+++++++103
+++++++R Tokyo
+++++++a Baghdad
+++++++309 68
+++++++L
+++++++R Jinan
+++++++L
+++++++s Washington
+++++++170
+++++++L
+++++++R Hyderabad
+++++++r Lima
+++++++727
+++++++u Khartoum
+++++++302
+++++++A Nagoya
+++++++u Los Angeles
+++++++1329
+++++++a Luanda
+++++++1364 38
+++++++r Philadelphia
+++++++1436
+++++++A Johannesburg
+++++++A New York City
+++++++a Los Angeles
+++++++270 149
+++++++A Los Angeles
+++++++R Manila
+++++++r Beijing
+++++++473
+++++++A Beijing
+++++++r Tokyo
+++++++1414
+++++++a Lima
+++++++1003 11
+++++++r Dhaka
+++++++227
+++++++s Fukuoka
+++++++38
+++++++s Moscow
+++++++499
+++++++u Delhi
+++++++508
+++++++r Jinan
+++++++220
+++++++L
+++++++a Qingdao
+++++++314 81
+++++++s Manila
+++++++878
+++++++a Sao Paulo
+++++++457 134
+++++++L
+++++++R Hong Kong
+++++++A Nagoya
+++++++s Lima
+++++++962
+++++++u Baghdad
+++++++1319
+++++++L
+++++++R Dhaka
+++++++L
+++++++u Lima
+++++++432
+++++++a Barcelona
+++++++756 138
+++++++s Toronto
+++++++784
+++++++u Dar es Salaam
+++++++209
+++++++R Miami
+++++++u Washington
+++++++1380
+++++++s Manila
+++++++784
+++++++A London
+++++++s Surat
+++++++459
+++++++L
+++++++A Manila
+++++++A Istanbul
+++++++r Toronto
+++++++782
+++++++r Saint Petersburg
+++++++1330
+++++++s Guadalajara
+++++++396
+++++++A Tianjin
+++++++r Tokyo
+++++++98
+++++++R Luanda
+++++++r Dhaka
+++++++122
+++++++R Lagos
+++++++u Fukuoka
+++++++694
+++++++r Jinan
+++++++76
+++++++u Sao Paulo
+++++++457
+++++++a Philadelphia
+++++++455 175
+++++++L
+++++++u Delhi
+++++++718
+++++++r Osaka
+++++++1005
+++++++A Harbin
+++++++u Luanda
+++++++584
+++++++r Los Angeles
+++++++424
+++++++L
+++++++u Los Angeles
+++++++824
+++++++L
+++++++R Khartoum
+++++++r Barcelona
+++++++545
+++++++r Philadelphia
+++++++502
+++++++R Moscow
+++++++r Hyderabad
+++++++601
+++++++u Los Angeles
+++++++824
+++++++A Nagoya
+++++++R Washington, D.C.
+++++++L
+++++++L
+++++++s Qingdao
+++++++790
+++++++R Sao Paulo
+++++++A Shanghai
+++++++A Paris
+++++++u Beijing
+++++++402
+++++++r Philadelphia
+++++++455
+++++++s Luanda
+++++++1053
+++++++a Saint Petersburg
+++++++322 141
+++++++r Osaka
+++++++103
+++++++r Barcelona
+++++++879
+++++++a Baghdad
+++++++732 76
+++++++r Baghdad
+++++++309
+++++++a Tehran
+++++++1213 65
+++++++a Tehran
+++++++270 7
+++++++R Manila
+++++++L
+++++++A Nanjing
+++++++r Luanda
+++++++204
+++++++L
+++++++u Los Angeles
+++++++824
+++++++a Seoul
+++++++161 99
+++++++s Ahmedabad
+++++++546
+++++++a Atlanta
+++++++920 91
+++++++a Tianjin
+++++++85 108
+++++++a Lima
+++++++1345 173
+++++++r Manila
+++++++865
+++++++r Luanda
+++++++584
+++++++A Singapore
+++++++L
+++++++u Manila
+++++++364
+++++++L
+++++++A Kolkata
+++++++a Nanjing
+++++++1014 161
+++++++u Jinan
+++++++1293
+++++++u Miami
+++++++918
+++++++L
+++++++R Johannesburg
+++++++L
+++++++L
+++++++A Kuala Lumpur
+++++++u Miami
+++++++961
+++++++R Atlanta
+++++++A Ahmedabad
+++++++A Istanbul
+++++++u Baghdad
+++++++732
+++++++a New York City
+++++++1256 182
+++++++R Qingdao
+++++++r Guadalajara
+++++++385
+++++++R Guadalajara
+++++++s Surat
+++++++463
+++++++r Nanjing
+++++++1014
+++++++A Hangzhou
+++++++A Lahore
+++++++s Los Angeles
+++++++1198
+++++++R Seoul
+++++++A Fukuoka
+++++++A Foshan
+++++++u Sao Paulo
+++++++62
+++++++L
+++++++a Beijing
+++++++9 165
+++++++a Istanbul
+++++++877 85
+++++++R Kolkata
+++++++R Foshan
+++++++R Toronto
+++++++a Barcelona
+++++++1008 74
+++++++s Sao Paulo
+++++++1183
+++++++A Shenzhen
+++++++A Hong Kong
+++++++A Shenzhen
+++++++R Philadelphia
+++++++u Toronto
+++++++844
+++++++R Nagoya
+++++++a London
+++++++599 14
+++++++A Chengdu
+++++++a Paris
+++++++1063 129
+++++++r Lima
+++++++14
+++++++L
+++++++s Luanda
+++++++1374
+++++++a Tehran
+++++++371 109
+++++++r Miami
+++++++918
+++++++a New York City
+++++++272 66
+++++++L
+++++++a Harbin
+++++++633 24
+++++++R Tehran
+++++++A Khartoum
+++++++a Shenzhen
+++++++930 112
+++++++a Istanbul
+++++++1125 123
+++++++u Qingdao
+++++++782
+++++++L
+++++++R Shanghai
+++++++s Osaka
+++++++808
+++++++a Baghdad
+++++++658 29
+++++++u Tianjin
+++++++85
+++++++r Atlanta
+++++++321
+++++++r Khartoum
+++++++302
+++++++A Los Angeles
+++++++A Dhaka
+++++++L
+++++++s Qingdao
+++++++660
+++++++A Toronto
+++++++u Luanda
+++++++1041
+++++++u Guadalajara
+++++++195
+++++++L
+++++++a Hangzhou
+++++++553 187
+++++++s Fukuoka
+++++++1256
+++++++L
+++++++L
+++++++u Osaka
+++++++799
++++++diff --git a/testMedium.txt b/testMedium.txt
++++++new file mode 100644
++++++index 0000000..3ddcea1
++++++--- /dev/null
+++++++++ b/testMedium.txt
++++++@@ -0,0 +1,766 @@
+++++++L
+++++++A Manila
+++++++A Jakarta
+++++++A Saint Petersburg
+++++++A Atlanta
+++++++A Hong Kong
+++++++A Philadelphia
+++++++A Chicago
+++++++A Foshan
+++++++A Fukuoka
+++++++A Chennai
+++++++A Dallas
+++++++A Guangzhou
+++++++A Chengdu
+++++++A Ho Chi Minh City
+++++++A Bangkok
+++++++A Nanjing
+++++++A Moscow
+++++++A Chengdu
+++++++A Lahore
+++++++A Philadelphia
+++++++A Bogota
+++++++A Pune
+++++++A Suzhou
+++++++A Dongguan
+++++++A Paris
+++++++A Chennai
+++++++A Dongguan
+++++++A Lima
+++++++A Qingdao
+++++++A Kolkata
+++++++a Nanjing
+++++++1262 198
+++++++a Dongguan
+++++++72 86
+++++++a Foshan
+++++++776 178
+++++++a Bangkok
+++++++1177 9
+++++++a Saint Petersburg
+++++++59 145
+++++++a Pune
+++++++925 113
+++++++a Chicago
+++++++155 192
+++++++a Atlanta
+++++++1400 4
+++++++a Jakarta
+++++++795 145
+++++++a Atlanta
+++++++1177 147
+++++++a Suzhou
+++++++93 109
+++++++a Paris
+++++++95 197
+++++++a Nanjing
+++++++916 142
+++++++a Pune
+++++++1133 134
+++++++a Chennai
+++++++307 49
+++++++a Qingdao
+++++++91 177
+++++++a Dallas
+++++++500 174
+++++++a Atlanta
+++++++457 94
+++++++a Lima
+++++++993 151
+++++++a Chengdu
+++++++1108 189
+++++++a Fukuoka
+++++++44 70
+++++++a Paris
+++++++1107 25
+++++++a Lima
+++++++1052 62
+++++++a Guangzhou
+++++++1410 160
+++++++a Manila
+++++++602 45
+++++++a Nanjing
+++++++1410 105
+++++++a Guangzhou
+++++++1211 170
+++++++a Foshan
+++++++1427 175
+++++++a Fukuoka
+++++++279 183
+++++++a Philadelphia
+++++++329 169
+++++++a Moscow
+++++++1385 5
+++++++a Chennai
+++++++1258 163
+++++++a Chicago
+++++++1304 114
+++++++a Dongguan
+++++++1221 26
+++++++a Philadelphia
+++++++182 26
+++++++a Suzhou
+++++++396 159
+++++++a Chengdu
+++++++524 33
+++++++a Ho Chi Minh City
+++++++869 63
+++++++a Kolkata
+++++++656 1
+++++++a Atlanta
+++++++246 41
+++++++a Chengdu
+++++++626 182
+++++++a Saint Petersburg
+++++++1133 134
+++++++a Suzhou
+++++++348 13
+++++++a Chicago
+++++++1337 18
+++++++a Philadelphia
+++++++1224 23
+++++++a Fukuoka
+++++++68 193
+++++++a Philadelphia
+++++++793 20
+++++++a Saint Petersburg
+++++++229 197
+++++++a Bogota
+++++++818 86
+++++++a Chengdu
+++++++826 46
+++++++a Bangkok
+++++++575 16
+++++++a Paris
+++++++101 180
+++++++a Fukuoka
+++++++406 174
+++++++a Ho Chi Minh City
+++++++1114 108
+++++++a Lahore
+++++++1163 131
+++++++a Ho Chi Minh City
+++++++118 111
+++++++a Foshan
+++++++333 156
+++++++a Kolkata
+++++++287 0
+++++++a Lahore
+++++++1263 28
+++++++a Bogota
+++++++980 116
+++++++a Bogota
+++++++1392 84
+++++++a Suzhou
+++++++111 84
+++++++a Hong Kong
+++++++726 56
+++++++a Kolkata
+++++++663 118
+++++++a Saint Petersburg
+++++++1369 41
+++++++a Atlanta
+++++++1138 89
+++++++a Qingdao
+++++++406 78
+++++++a Lima
+++++++1019 194
+++++++a Kolkata
+++++++1242 80
+++++++a Foshan
+++++++810 6
+++++++a Atlanta
+++++++936 36
+++++++a Manila
+++++++933 147
+++++++a Ho Chi Minh City
+++++++612 31
+++++++a Bangkok
+++++++1383 70
+++++++a Kolkata
+++++++324 94
+++++++a Atlanta
+++++++1318 62
+++++++a Fukuoka
+++++++1136 56
+++++++a Atlanta
+++++++348 41
+++++++a Moscow
+++++++1335 129
+++++++a Manila
+++++++1222 33
+++++++a Chengdu
+++++++1374 183
+++++++a Foshan
+++++++313 20
+++++++a Philadelphia
+++++++1211 143
+++++++a Dongguan
+++++++40 104
+++++++a Atlanta
+++++++539 85
+++++++a Chicago
+++++++756 22
+++++++a Suzhou
+++++++20 113
+++++++a Kolkata
+++++++172 34
+++++++a Moscow
+++++++1306 15
+++++++a Qingdao
+++++++465 13
+++++++a Moscow
+++++++921 144
+++++++a Saint Petersburg
+++++++1264 189
+++++++a Bangkok
+++++++965 179
+++++++a Pune
+++++++21 100
+++++++a Saint Petersburg
+++++++1227 183
+++++++a Lahore
+++++++752 15
+++++++a Chicago
+++++++643 117
+++++++a Suzhou
+++++++18 66
+++++++a Guangzhou
+++++++110 16
+++++++a Dongguan
+++++++1279 94
+++++++s Jakarta
+++++++802
+++++++s Foshan
+++++++787
+++++++s Nanjing
+++++++1263
+++++++s Manila
+++++++941
+++++++s Lima
+++++++1060
+++++++s Chengdu
+++++++1120
+++++++s Qingdao
+++++++99
+++++++s Philadelphia
+++++++329
+++++++s Nanjing
+++++++1266
+++++++s Manila
+++++++1235
+++++++s Qingdao
+++++++96
+++++++s Atlanta
+++++++257
+++++++s Kolkata
+++++++666
+++++++s Kolkata
+++++++663
+++++++s Chengdu
+++++++636
+++++++s Ho Chi Minh City
+++++++1120
+++++++s Bogota
+++++++1394
+++++++s Lahore
+++++++1171
+++++++s Paris
+++++++108
+++++++s Ho Chi Minh City
+++++++1120
+++++++s Foshan
+++++++342
+++++++s Qingdao
+++++++417
+++++++s Chennai
+++++++315
+++++++s Foshan
+++++++1431
+++++++s Guangzhou
+++++++1224
+++++++s Nanjing
+++++++928
+++++++s Ho Chi Minh City
+++++++1125
+++++++s Kolkata
+++++++338
+++++++s Dongguan
+++++++1281
+++++++s Moscow
+++++++1314
+++++++s Foshan
+++++++343
+++++++s Dongguan
+++++++1221
+++++++s Paris
+++++++1110
+++++++s Bangkok
+++++++1178
+++++++s Manila
+++++++1229
+++++++s Ho Chi Minh City
+++++++121
+++++++s Paris
+++++++109
+++++++s Manila
+++++++614
+++++++s Foshan
+++++++789
+++++++s Ho Chi Minh City
+++++++120
+++++++s Jakarta
+++++++803
+++++++s Chicago
+++++++770
+++++++s Kolkata
+++++++660
+++++++s Moscow
+++++++1335
+++++++s Saint Petersburg
+++++++1147
+++++++s Philadelphia
+++++++192
+++++++s Nanjing
+++++++916
+++++++s Dallas
+++++++514
+++++++s Ho Chi Minh City
+++++++626
+++++++s Philadelphia
+++++++1225
+++++++s Saint Petersburg
+++++++1377
+++++++s Suzhou
+++++++402
+++++++s Bogota
+++++++993
+++++++s Chennai
+++++++1271
+++++++s Chennai
+++++++307
+++++++s Paris
+++++++106
+++++++s Moscow
+++++++1318
+++++++s Nanjing
+++++++1267
+++++++s Bogota
+++++++991
+++++++s Atlanta
+++++++1139
+++++++s Suzhou
+++++++34
+++++++s Paris
+++++++104
+++++++s Chennai
+++++++1272
+++++++s Ho Chi Minh City
+++++++623
+++++++s Dongguan
+++++++1287
+++++++s Saint Petersburg
+++++++1372
+++++++s Atlanta
+++++++1142
+++++++s Foshan
+++++++320
+++++++s Chicago
+++++++1338
+++++++s Jakarta
+++++++803
+++++++s Foshan
+++++++816
+++++++s Ho Chi Minh City
+++++++122
+++++++s Atlanta
+++++++549
+++++++s Dongguan
+++++++83
+++++++s Saint Petersburg
+++++++70
+++++++s Chengdu
+++++++1384
+++++++s Philadelphia
+++++++796
+++++++s Ho Chi Minh City
+++++++1123
+++++++s Atlanta
+++++++248
+++++++s Atlanta
+++++++1147
+++++++s Suzhou
+++++++115
+++++++s Dongguan
+++++++72
+++++++s Qingdao
+++++++410
+++++++s Chicago
+++++++766
+++++++s Philadelphia
+++++++1221
+++++++s Lima
+++++++1005
+++++++s Atlanta
+++++++1146
+++++++s Lima
+++++++1003
+++++++s Ho Chi Minh City
+++++++1117
+++++++s Paris
+++++++109
+++++++s Atlanta
+++++++1190
+++++++s Moscow
+++++++1388
+++++++s Kolkata
+++++++666
+++++++s Dallas
+++++++506
+++++++s Chennai
+++++++314
+++++++s Pune
+++++++925
+++++++s Lahore
+++++++1274
+++++++s Nanjing
+++++++927
+++++++s Philadelphia
+++++++799
+++++++s Dallas
+++++++505
+++++++s Hong Kong
+++++++727
+++++++s Moscow
+++++++925
+++++++s Qingdao
+++++++417
+++++++s Philadelphia
+++++++336
+++++++s Bangkok
+++++++1178
+++++++s Moscow
+++++++1347
+++++++s Atlanta
+++++++540
+++++++s Guangzhou
+++++++122
+++++++s Atlanta
+++++++1323
+++++++s Philadelphia
+++++++1224
+++++++s Fukuoka
+++++++1140
+++++++s Chicago
+++++++167
+++++++s Bogota
+++++++1401
+++++++s Foshan
+++++++813
+++++++s Bogota
+++++++1403
+++++++s Qingdao
+++++++465
+++++++s Atlanta
+++++++469
+++++++s Pune
+++++++1133
+++++++s Qingdao
+++++++93
+++++++s Moscow
+++++++1316
+++++++s Dongguan
+++++++49
+++++++s Suzhou
+++++++23
+++++++s Qingdao
+++++++468
+++++++s Kolkata
+++++++335
+++++++s Atlanta
+++++++542
+++++++s Kolkata
+++++++666
+++++++s Lima
+++++++996
+++++++s Foshan
+++++++1441
+++++++s Philadelphia
+++++++184
+++++++s Qingdao
+++++++104
+++++++s Atlanta
+++++++1406
+++++++s Foshan
+++++++335
+++++++s Atlanta
+++++++256
+++++++s Suzhou
+++++++28
+++++++s Lima
+++++++1025
+++++++s Saint Petersburg
+++++++1277
+++++++s Bogota
+++++++987
+++++++s Bogota
+++++++981
+++++++s Ho Chi Minh City
+++++++623
+++++++s Kolkata
+++++++337
+++++++s Bogota
+++++++1398
+++++++s Atlanta
+++++++1145
+++++++s Bangkok
+++++++973
+++++++s Manila
+++++++940
+++++++s Atlanta
+++++++351
+++++++s Ho Chi Minh City
+++++++622
+++++++s Kolkata
+++++++667
+++++++s Paris
+++++++104
+++++++s Chennai
+++++++1265
+++++++s Ho Chi Minh City
+++++++881
+++++++s Foshan
+++++++1427
+++++++s Guangzhou
+++++++1225
+++++++s Kolkata
+++++++1251
+++++++s Manila
+++++++941
+++++++s Jakarta
+++++++808
+++++++s Hong Kong
+++++++736
+++++++s Foshan
+++++++1438
+++++++s Dongguan
+++++++1289
+++++++s Saint Petersburg
+++++++1370
+++++++s Hong Kong
+++++++737
+++++++s Dongguan
+++++++75
+++++++s Philadelphia
+++++++340
+++++++s Suzhou
+++++++118
+++++++s Qingdao
+++++++414
+++++++s Bogota
+++++++823
+++++++s Chengdu
+++++++828
+++++++s Foshan
+++++++317
+++++++s Suzhou
+++++++27
+++++++s Saint Petersburg
+++++++1379
+++++++s Ho Chi Minh City
+++++++618
+++++++s Lahore
+++++++766
+++++++s Chicago
+++++++1304
+++++++s Bangkok
+++++++1179
+++++++s Manila
+++++++609
+++++++s Chengdu
+++++++630
+++++++s Paris
+++++++1108
+++++++s Kolkata
+++++++662
+++++++s Hong Kong
+++++++732
+++++++s Pune
+++++++932
+++++++s Chennai
+++++++1258
+++++++s Paris
+++++++95
+++++++s Pune
+++++++938
+++++++s Chengdu
+++++++635
+++++++s Paris
+++++++1118
+++++++s Ho Chi Minh City
+++++++612
+++++++s Ho Chi Minh City
+++++++1117
+++++++s Ho Chi Minh City
+++++++612
+++++++s Kolkata
+++++++667
+++++++s Chennai
+++++++1266
+++++++s Foshan
+++++++782
+++++++s Philadelphia
+++++++330
+++++++s Manila
+++++++1227
+++++++s Lahore
+++++++1170
+++++++s Guangzhou
+++++++114
+++++++s Foshan
+++++++788
+++++++s Guangzhou
+++++++122
+++++++s Atlanta
+++++++544
+++++++s Paris
+++++++1113
+++++++s Pune
+++++++938
+++++++s Dallas
+++++++502
+++++++A Jinan
+++++++a Dallas
+++++++368 9
+++++++r Lahore
+++++++1163
+++++++A Guadalajara
+++++++s Kolkata
+++++++335
+++++++R Saint Petersburg
+++++++a Chicago
+++++++1209 107
+++++++L
+++++++r Fukuoka
+++++++44
+++++++u Nanjing
+++++++916
+++++++R Hong Kong
+++++++u Guangzhou
+++++++1211
+++++++s Atlanta
+++++++946
+++++++A Rio de Janeiro
+++++++u Bangkok
+++++++575
+++++++s Saint Petersburg
+++++++240
+++++++a Paris
+++++++47 91
+++++++u Kolkata
+++++++656
+++++++a Rio de Janeiro
+++++++344 21
+++++++a Dongguan
+++++++822 109
+++++++a Jakarta
+++++++301 168
+++++++L
+++++++R Kolkata
+++++++L
+++++++u Fukuoka
+++++++406
+++++++A Chennai
+++++++r Jakarta
+++++++301
+++++++A Delhi
+++++++L
+++++++u Philadelphia
+++++++329
+++++++L
+++++++a Suzhou
+++++++410 59
+++++++u Atlanta
+++++++1177
+++++++L
+++++++a Suzhou
+++++++1324 112
+++++++R Jakarta
+++++++R Chicago
+++++++a Manila
+++++++433 124
+++++++a Bangkok
+++++++1360 44
+++++++A Dar es Salaam
+++++++r Saint Petersburg
+++++++1227
+++++++u Dongguan
+++++++40
+++++++a Paris
+++++++53 137
+++++++a Dongguan
+++++++477 27
+++++++a Chennai
+++++++1271 197
+++++++R Qingdao
+++++++r Bangkok
+++++++1383
+++++++a Chennai
+++++++149 23
+++++++L
+++++++r Saint Petersburg
+++++++229
+++++++a Chennai
+++++++283 168
+++++++s Lima
+++++++1021
+++++++a Fukuoka
+++++++273 11
+++++++A Mexico City
+++++++a Delhi
+++++++1276 157
+++++++a Ho Chi Minh City
+++++++729 61
+++++++u Suzhou
+++++++20
+++++++r Guangzhou
+++++++1410
+++++++L
+++++++u Bogota
+++++++980
+++++++a Chengdu
+++++++276 132
+++++++a Rio de Janeiro
+++++++590 30
+++++++r Chicago
+++++++1337
+++++++s Saint Petersburg
+++++++1369
+++++++u Qingdao
+++++++91
+++++++u Ho Chi Minh City
+++++++612
+++++++R Pune
+++++++s Dongguan
+++++++484
+++++++u Nanjing
+++++++1410
+++++++u Chengdu
+++++++1108
+++++++a Chennai
+++++++341 192
+++++++R Dallas
+++++++s Dongguan
+++++++75
+++++++L
+++++++a Ho Chi Minh City
+++++++184 26
+++++++r Ho Chi Minh City
+++++++612
+++++++r Ho Chi Minh City
+++++++1114
+++++++a Philadelphia
+++++++1294 136
+++++++L
+++++++r Nanjing
+++++++1262
++++++diff --git a/testSmall.txt b/testSmall.txt
++++++new file mode 100644
++++++index 0000000..f4ec80b
++++++--- /dev/null
+++++++++ b/testSmall.txt
++++++@@ -0,0 +1,405 @@
+++++++L
+++++++A Barcelona
+++++++A Surat
+++++++A Hong Kong
+++++++A Paris
+++++++A Moscow
+++++++A Chennai
+++++++A Dalian
+++++++A Dallas
+++++++A Johannesburg
+++++++A Santiago
+++++++A Tehran
+++++++A Country
+++++++A Dalian
+++++++A Madrid
+++++++A Lima
+++++++A Baghdad
+++++++A London
+++++++A Manila
+++++++A Wuhan
+++++++A Khartoum
+++++++a Santiago
+++++++1367 161
+++++++a Hong Kong
+++++++1264 40
+++++++a Country
+++++++689 165
+++++++a Dalian
+++++++1233 85
+++++++a Surat
+++++++852 188
+++++++a Manila
+++++++1204 151
+++++++a Manila
+++++++976 88
+++++++a London
+++++++52 159
+++++++a London
+++++++931 144
+++++++a Baghdad
+++++++971 50
+++++++a Moscow
+++++++391 42
+++++++a Country
+++++++404 93
+++++++a Chennai
+++++++277 87
+++++++a Moscow
+++++++877 194
+++++++a Surat
+++++++122 42
+++++++a Baghdad
+++++++1304 176
+++++++a Baghdad
+++++++291 159
+++++++a Lima
+++++++859 128
+++++++a Manila
+++++++1039 11
+++++++a Wuhan
+++++++1059 72
+++++++a Dallas
+++++++638 109
+++++++a Lima
+++++++1053 174
+++++++a Dallas
+++++++1344 172
+++++++a Barcelona
+++++++997 102
+++++++a Moscow
+++++++15 84
+++++++a Moscow
+++++++1256 57
+++++++a Barcelona
+++++++69 169
+++++++a London
+++++++848 77
+++++++a Wuhan
+++++++348 32
+++++++a Surat
+++++++146 190
+++++++a Moscow
+++++++374 85
+++++++a Khartoum
+++++++166 145
+++++++a Manila
+++++++1349 35
+++++++a Country
+++++++659 100
+++++++a Dalian
+++++++460 88
+++++++a Dalian
+++++++542 56
+++++++a Paris
+++++++298 48
+++++++a Wuhan
+++++++906 106
+++++++a Chennai
+++++++446 195
+++++++a Khartoum
+++++++755 86
+++++++a Madrid
+++++++255 162
+++++++a Khartoum
+++++++774 189
+++++++a Manila
+++++++753 82
+++++++a Baghdad
+++++++56 162
+++++++a Dalian
+++++++1259 196
+++++++a Hong Kong
+++++++97 2
+++++++a Manila
+++++++1084 43
+++++++a Paris
+++++++518 29
+++++++a Moscow
+++++++710 196
+++++++a Tehran
+++++++375 108
+++++++a Chennai
+++++++836 14
+++++++a Santiago
+++++++1186 103
+++++++a Madrid
+++++++815 186
+++++++a Barcelona
+++++++761 55
+++++++a Paris
+++++++1223 86
+++++++a Hong Kong
+++++++190 8
+++++++a Manila
+++++++1331 53
+++++++a Country
+++++++1277 0
+++++++a Madrid
+++++++269 7
+++++++a Santiago
+++++++94 189
+++++++s Barcelona
+++++++770
+++++++s Wuhan
+++++++1064
+++++++s Santiago
+++++++1375
+++++++s Dalian
+++++++1241
+++++++s London
+++++++851
+++++++s Moscow
+++++++718
+++++++s London
+++++++56
+++++++s Hong Kong
+++++++1273
+++++++s Chennai
+++++++841
+++++++s Khartoum
+++++++167
+++++++s Surat
+++++++853
+++++++s Moscow
+++++++1259
+++++++s Baghdad
+++++++984
+++++++s Hong Kong
+++++++102
+++++++s Manila
+++++++978
+++++++s Madrid
+++++++256
+++++++s Barcelona
+++++++1011
+++++++s Dalian
+++++++553
+++++++s Dallas
+++++++646
+++++++s Wuhan
+++++++354
+++++++s London
+++++++939
+++++++s Barcelona
+++++++769
+++++++s Hong Kong
+++++++1277
+++++++s Santiago
+++++++1187
+++++++s Moscow
+++++++393
+++++++s Country
+++++++661
+++++++s Surat
+++++++860
+++++++s Manila
+++++++1355
+++++++s Country
+++++++691
+++++++s Moscow
+++++++19
+++++++s Country
+++++++667
+++++++s Manila
+++++++977
+++++++s Surat
+++++++156
+++++++s Barcelona
+++++++1004
+++++++s Dallas
+++++++638
+++++++s Moscow
+++++++399
+++++++s Dalian
+++++++1264
+++++++s Country
+++++++1280
+++++++s Wuhan
+++++++907
+++++++s Madrid
+++++++828
+++++++s Santiago
+++++++1375
+++++++s Paris
+++++++311
+++++++s Chennai
+++++++456
+++++++s Madrid
+++++++825
+++++++s Madrid
+++++++823
+++++++s Chennai
+++++++460
+++++++s London
+++++++937
+++++++s Baghdad
+++++++1307
+++++++s Wuhan
+++++++349
+++++++s Country
+++++++691
+++++++s Dalian
+++++++550
+++++++s Manila
+++++++1353
+++++++s Baghdad
+++++++61
+++++++s Moscow
+++++++1256
+++++++s Surat
+++++++129
+++++++s Khartoum
+++++++172
+++++++s Moscow
+++++++882
+++++++s Baghdad
+++++++977
+++++++s Surat
+++++++134
+++++++s Hong Kong
+++++++1273
+++++++s Country
+++++++659
+++++++s Khartoum
+++++++777
+++++++s Manila
+++++++1040
+++++++s Wuhan
+++++++1059
+++++++s Surat
+++++++865
+++++++s Country
+++++++408
+++++++s Baghdad
+++++++973
+++++++s Paris
+++++++1226
+++++++s Santiago
+++++++100
+++++++s Paris
+++++++1227
+++++++s London
+++++++940
+++++++s Moscow
+++++++1269
+++++++s Khartoum
+++++++774
+++++++s Barcelona
+++++++69
+++++++s Manila
+++++++977
+++++++s Wuhan
+++++++354
+++++++s London
+++++++942
+++++++s Barcelona
+++++++763
+++++++s Moscow
+++++++18
+++++++s Hong Kong
+++++++204
+++++++s Manila
+++++++767
+++++++s London
+++++++56
+++++++s Moscow
+++++++386
+++++++s Santiago
+++++++108
+++++++s Manila
+++++++1339
+++++++s Manila
+++++++1040
+++++++s Santiago
+++++++1187
+++++++s Country
+++++++1288
+++++++s Wuhan
+++++++1062
+++++++s Baghdad
+++++++295
+++++++s Madrid
+++++++264
+++++++s Chennai
+++++++457
+++++++s Surat
+++++++866
+++++++s Moscow
+++++++378
+++++++s Dalian
+++++++1268
+++++++s Manila
+++++++1351
+++++++s Dallas
+++++++1354
+++++++s Paris
+++++++301
+++++++s Manila
+++++++976
+++++++s Moscow
+++++++398
+++++++A Dongguan
+++++++u Surat
+++++++852
+++++++R Barcelona
+++++++A Osaka
+++++++u Santiago
+++++++1367
+++++++s Dalian
+++++++468
+++++++r Baghdad
+++++++56
+++++++L
+++++++a Madrid
+++++++451 154
+++++++A Country
+++++++A Belo Horizonte
+++++++r Baghdad
+++++++291
+++++++a Belo Horizonte
+++++++1079 103
+++++++L
+++++++s Wuhan
+++++++352
+++++++r Baghdad
+++++++1304
+++++++r Surat
+++++++146
+++++++R Baghdad
+++++++r Baghdad
+++++++971
+++++++s Manila
+++++++989
+++++++r Surat
+++++++122
+++++++u Dallas
+++++++1344
+++++++A Jakarta
+++++++a Surat
+++++++1137 83
+++++++u Manila
+++++++753
+++++++s Lima
+++++++865
+++++++L
+++++++s Dalian
+++++++1241
+++++++r Manila
+++++++1204
+++++++u Santiago
+++++++1186
+++++++A Dhaka
+++++++L
+++++++R Dongguan
+++++++s Lima
+++++++862
+++++++s Moscow
+++++++387
+++++++L
+++++++A London
+++++++R Madrid
+++++++a Jakarta
+++++++261 84
+++++++a Manila
+++++++360 171
+++++diff --git a/test.sh b/test.sh
+++++index f8ecbf4..1753085 100755
+++++--- a/test.sh
++++++++ b/test.sh
+++++@@ -262,7 +262,7 @@ EOF
+++++     echo "FAIL"
+++++     [[ -n $VERBOSE ]] && echo "Your program produced:"
+++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++-    [[ -n $VERBOSE ]] && echo "$answers"    
++++++    [[ -n $VERBOSE ]] && echo "$answer"    
+++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++     [[ -n $VERBOSE ]] && echo "Output should have been:"
+++++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++++
++++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++ Date:   Mon Sep 28 22:04:59 2020 -0400
++++
+++ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++ Date:   Thu Oct 1 18:48:16 2020 -0400
+++
++ commit da6661f7aace13f7460f1854b7f421ec09bce194
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Thu Oct 1 20:00:10 2020 -0400
++
+ commit 1fc06886442458df6df848e0f90ac6e155b1d853
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Fri Oct 2 10:20:31 2020 -0400
+
 commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Fri Oct 2 11:01:38 2020 -0400

commit 6e2a618b2d8cd3dc9690949302bf8c48532f2dbc
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Oct 2 15:36:11 2020 -0400

    debugging

diff --git a/assignment-3.c b/assignment-3.c
index 09d6332..473a053 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -11,8 +11,8 @@
 
 // Limit constants
 #define MAX_CITY_NAME_LEN 20
-#define MAX_FLIGHTS_PER_CITY 5
-#define MAX_DEFAULT_SCHEDULES 50
+#define MAX_FLIGHTS_PER_CITY 3
+#define MAX_DEFAULT_SCHEDULES 2
 
 // Time definitions
 #define TIME_MIN 0
@@ -403,7 +403,7 @@ struct flight_schedule * flight_schedule_allocate(void){
   if(flight_schedules_active != NULL){
     flight_schedules_active->prev = temp;
   }
-   flight_schedules_active = temp;
+  flight_schedules_active = temp;
 
   /*
   flight_schedules_free-> prev->next = flight_schedules_active;
@@ -422,7 +422,7 @@ struct flight_schedule * flight_schedule_allocate(void){
   //flight_schedules_active = temp;
   temp = flight_schedules_active;
   */
-  return(temp); //return temp?
+  return(temp); //return temp temp could be null resulting in error
 }
 
 //flight schedule free
@@ -478,18 +478,18 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
 
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
-      break; //return(temp);
+      return(temp);
     }
     temp = temp->next;
   }
-  return (temp); //this might return null 
+ //this might return null 
 }
 
 
 void flight_schedule_add(city_t city){ //should this call get city
 
   //first cheeck to see if city exists
-  if (flight_schedules_free ==NULL){
+  if (flight_schedules_free == NULL){
     msg_schedule_no_free();
   }
 
@@ -510,9 +510,9 @@ void flight_schedule_add(city_t city){ //should this call get city
 
 void flight_schedule_remove(city_t city){
   struct flight_schedule *temp = flight_schedule_find(city);
-  if(temp == NULL){
-
-  }
+  //if(temp == NULL){
+   
+  //}
   flight_schedule_free(temp);
 }
 
@@ -540,7 +540,35 @@ void flight_schedule_list(city_t city){
 void flight_schedule_add_flight(city_t city){
   //flight_schedule_add(city);
   struct flight_schedule *temp = flight_schedule_find(city);
+  struct flight *flights;
+  flights = temp->flights;
+  int full = 0;
+  int i =0;
+
+  while(temp->flights[i].time != -1){
+    
+    if (i == MAX_FLIGHTS_PER_CITY){
+      full = 1;
+      break;
+    }
+    i++;
+  }
+  if(full){
+    msg_city_max_flights_reached(city);
+  }
+  else{
+    int c = (temp->flights[i].capacity); // look for value of c 
+    
+    flight_capacity_get(&c);
+    printf("ADD_FLIGHT %d", c);
+    flights[i].available = c; 
+    int t = (flights[i].time);
+    
+    time_get(&t);
+    printf("ADD FLIGHT 2 %d", t);
 
+  }
+  /*
   int *t;
   time_get(t); //do this then check if t is 0 to see if valid or not 
   
@@ -557,8 +585,8 @@ void flight_schedule_add_flight(city_t city){
       return;
   }
 
-  struct flight *flights;
-  flights = temp->flights;
+  //struct flight *flights;
+  //flights = temp->flights;
   //flights[i]
   //loop thru flights until open flight then add flight
 
@@ -570,6 +598,7 @@ void flight_schedule_add_flight(city_t city){
     }
   }
   //else return that it failed
+  */
 }
 
 
@@ -594,7 +623,7 @@ void flight_schedule_remove_flight(city_t city){
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
     if(flights[i].time == *t){
-      flights[i].time = -1;//was flights[i] will this change correct one?
+      flights[i].time = -1;//was flights[i] will this change correct one? or TIME_NULL
       flights[i].capacity = 0;  
       flights[i].available = 0;
       break;
diff --git a/gitlog.txt b/gitlog.txt
index 3fd9781..9868705 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4459 @@
+commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Oct 2 11:01:38 2020 -0400
+
+    working on debugging
+
+diff --git a/assignment-3.c b/assignment-3.c
+index dceff55..09d6332 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
+   }
+    flight_schedules_active = temp;
+ 
+-
+-
+-
+-
+-
+   /*
+   flight_schedules_free-> prev->next = flight_schedules_active;
+   
+@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+     }
+     temp = temp->next;
+   }
+-  return (temp);
++  return (temp); //this might return null 
+ }
+ 
+ 
+ void flight_schedule_add(city_t city){ //should this call get city
+ 
+   //first cheeck to see if city exists
++  if (flight_schedules_free ==NULL){
++    msg_schedule_no_free();
++  }
++
+   struct flight_schedule *fs = flight_schedule_find(city);
+   if (fs != NULL)  {
+     msg_city_exists(city);
+@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
+   
+   if(time_get(t) == 0) { //or just t
+     msg_flight_bad_time();      
+-    return;
++    return; //maybe use go to end
+    }
+ 
+-  int *c;
+-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++  int c = 15;
++  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
+   
+-  if (flight_capacity_get(c) == 0){ //show message plane is full
+-      msg_flight_no_seats();
++  if (flight_capacity_get(&c) == 0){ //show message plane is full
++      //msg_flight_no_seats();
+       return;
+   }
+ 
+@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+     if(flights[i].time == -1){
+       flights[i].time = *t;//was flights[i] will this change correct one?
+-      flights[i].capacity = *c;
++      flights[i].capacity = c;
+       break;
+     }
+   }
+   //else return that it failed
++}
+ 
+ 
+-}
+ 
+ void flight_schedule_remove_flight(city_t city){
+   struct flight_schedule *temp = flight_schedule_find(city);
+@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
+    if(time_get(t) == 0) {
+      return;
+    }
+-  int *c;
+-  flight_capacity_get(c); 
+-  if(flight_capacity_get(c) == 0){
++  int c =15;
++  flight_capacity_get(&c); 
++  if(flight_capacity_get(&c) == 0){
+       return;
+   }
+   
+@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
+   int *t;
+   time_get(t);
+   if(time_get(t) == 0) {
++     msg_flight_bad_time();
+      return;
+    }
+ 
+diff --git a/gitlog.txt b/gitlog.txt
+index 1364b9f..3fd9781 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4351 @@
++commit 1fc06886442458df6df848e0f90ac6e155b1d853
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Oct 2 10:20:31 2020 -0400
++
++    working on add_flight
++
++diff --git a/assignment-3.c b/assignment-3.c
++index e50b45e..dceff55 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
++ 
++ void flight_schedule_remove(city_t city){
++   struct flight_schedule *temp = flight_schedule_find(city);
+++  if(temp == NULL){
+++
+++  }
++   flight_schedule_free(temp);
++ }
++ 
++@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
++ }
++ 
++ void flight_schedule_add_flight(city_t city){
++-  flight_schedule_add(city);
+++  //flight_schedule_add(city);
++   struct flight_schedule *temp = flight_schedule_find(city);
++ 
++-
++   int *t;
++   time_get(t); //do this then check if t is 0 to see if valid or not 
++   
++   if(time_get(t) == 0) { //or just t
++-     return;
+++    msg_flight_bad_time();      
+++    return;
++    }
++ 
++   int *c;
++   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++   
++-  if (flight_capacity_get(c) == 0){
+++  if (flight_capacity_get(c) == 0){ //show message plane is full
+++      msg_flight_no_seats();
++       return;
++   }
++ 
++@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
++   int *c;
++   flight_capacity_get(c); 
++   if(flight_capacity_get(c) == 0){
++-
+++      return;
++   }
++   
++   struct flight *flights;
++diff --git a/gitlog.txt b/gitlog.txt
++index 29ef0ec..1364b9f 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4286 @@
+++commit da6661f7aace13f7460f1854b7f421ec09bce194
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Thu Oct 1 20:00:10 2020 -0400
+++
+++    fixed aloocate, add and list
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 6644548..e50b45e 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
+++ //returns pointer to updated flight schedule
+++ struct flight_schedule * flight_schedule_allocate(void){
+++ 
+++-  struct flight_schedule *temp;// =  flight_schedules_free;
++++  struct flight_schedule *temp =  flight_schedules_free;
++++  struct flight_schedule *fs;
++++  if (flight_schedules_free != NULL){
++++    flight_schedules_free = temp->next;
++++    flight_schedules_free->prev = NULL;
++++  }
++++
++++
++++  temp->next = flight_schedules_active;
++++  //if active not null set active prev to temp
++++  if(flight_schedules_active != NULL){
++++    flight_schedules_active->prev = temp;
++++  }
++++   flight_schedules_active = temp;
++++
++++
++++
++++
+++ 
+++ 
+++-  flight_schedules_free = flight_schedules_free->next;
++++  /*
+++   flight_schedules_free-> prev->next = flight_schedules_active;
+++   
+++   //temp->next = flight_schedules_active;
+++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+++ 
+++   //flight_schedules_active = temp;
+++   temp = flight_schedules_active;
++++  */
+++   return(temp); //return temp?
+++ }
+++ 
+++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++ 
+++   while(temp != NULL){
+++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++-      return(temp);
++++      break; //return(temp);
+++     }
+++     temp = temp->next;
+++   }
++++  return (temp);
+++ }
+++ 
+++ 
+++ void flight_schedule_add(city_t city){ //should this call get city
++++
++++  //first cheeck to see if city exists
++++  struct flight_schedule *fs = flight_schedule_find(city);
++++  if (fs != NULL)  {
++++    msg_city_exists(city);
++++  }
++++
++++  if (fs == NULL){
+++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++-  
+++-  //if (flight_schedule_find == city)  {
+++-  //  msg_city_exists(city);
+++- // } //
+++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++   
+++   //p->destination = ch; 
+++ 
++++  }
+++ }
+++ 
+++ 
+++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
+++ 
+++ 
+++ void flight_schedule_listAll(void){
+++-  struct flight_schedule *temp = flight_schedules_active;
++++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
+++   while(temp != NULL){
+++-    printf("%p", temp); // print temp is disaplying memory address
++++    printf("%s\n", temp->destination); // print temp is disaplying memory address
+++     temp = temp->next;
+++   }
+++ 
+++ }
+++ 
+++ void flight_schedule_list(city_t city){
+++-  struct flight_schedule *temp = flight_schedules_active;
++++  struct flight_schedule *temp = flight_schedules_active; 
+++   while(temp != NULL){
+++     if (strcmp(city,temp->destination) == 0){
+++-      printf("%p", *temp); //displaying memory address
++++      printf("%s\n", temp->destination); //displaying memory address
+++     }
+++     temp = temp->next;
+++   }
+++diff --git a/gitlog.txt b/gitlog.txt
+++index c3e37f7..29ef0ec 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -1,3 +1,4170 @@
++++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Thu Oct 1 18:48:16 2020 -0400
++++
++++    editing and debugging
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 881c536..6644548 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++ 
++++   // Loop through the Array connecting them
++++   // as a linear doubly linked list
+++++  if (n == 1) {
+++++    flight_schedule_reset(&array[0]);
+++++    array[0].next = NULL;
+++++    array[0].prev = NULL;
+++++    flight_schedules_free = &array[0];
+++++    return;
+++++  }
+++++
+++++  flight_schedule_reset(&array[0]);
+++++  array[0].next = &array[1];
++++   array[0].prev = NULL;
++++-  for (int i=0; i<n-1; i++) {
+++++
+++++  for (int i=1; i<n-1; i++) {
++++     flight_schedule_reset(&array[i]);
++++     array[i].next = &array[i+1];
++++-    array[i+1].prev = &array[i];
+++++    array[i].prev = &array[i-1];
++++   }
+++++
++++   // Takes care of last node.  
++++   flight_schedule_reset(&array[n-1]); // reset clears all fields
++++   array[n-1].next = NULL;
++++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
++++ //returns pointer to updated flight schedule
++++ struct flight_schedule * flight_schedule_allocate(void){
++++ 
++++-  struct flight_schedule *temp =  flight_schedules_free;
+++++  struct flight_schedule *temp;// =  flight_schedules_free;
+++++
+++++
++++   flight_schedules_free = flight_schedules_free->next;
+++++  flight_schedules_free-> prev->next = flight_schedules_active;
+++++  
+++++  //temp->next = flight_schedules_active;
+++++  flight_schedules_active = flight_schedules_free->prev;
++++   flight_schedules_free->prev = NULL;
++++-  temp->next = flight_schedules_active;
++++-
++++-  flight_schedules_active = temp;
++++-  flight_schedules_active->next->prev = flight_schedules_active;
+++++  
++++   //temp->prev = NULL;
++++   //struct flight_schedule *temp2 = flight_schedules_active
++++-  
++++-  return(flight_schedules_active);
+++++
+++++  if(flight_schedules_active -> next != NULL){
+++++    flight_schedules_active->next->prev = flight_schedules_active;
+++++  }
+++++
+++++  //flight_schedules_active = temp;
+++++  temp = flight_schedules_active;
+++++  return(temp); //return temp?
++++ }
++++ 
++++ //flight schedule free
++++ //takes schedule off active list, resets it, then places the node back on free list
++++ void flight_schedule_free(struct flight_schedule *fs){
++++-  int counter = 0;
+++++  flight_schedules_active = flight_schedules_active->next;
+++++  flight_schedule_reset(fs);
+++++  fs->next = flight_schedules_free;
+++++  flight_schedules_free = fs;
+++++  fs->next->prev = fs;
+++++
+++++
+++++  /*int counter = 0;
++++   struct flight_schedule *temp = flight_schedules_active;
++++   while(temp != NULL) {
++++     if(temp == fs){ //use flight schedule find instead
++++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     temp = temp->next;
++++     counter++;
++++   }
++++-  
++++   if (counter == 0){
++++     flight_schedules_active = temp->next;
++++     flight_schedules_active->prev = NULL;
++++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     //flight_schedule_reset(temp);
++++ 
++++   }
++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++-    temp->prev->next = temp->next;
+++++  else{ 
+++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
++++     temp->next->prev = temp->prev;
++++     temp->next = NULL;
++++     temp->prev = NULL;
++++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     flight_schedules_free = temp;
++++     flight_schedules_free->next->prev = flight_schedules_free;
++++   }
++++-  else{
++++-    temp->prev = NULL;
++++-    flight_schedules_active->prev->next = NULL;
++++-
++++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++-
++++-    temp->next = flight_schedules_free;
++++-    flight_schedules_free = temp;
++++-    flight_schedules_free->next->prev = flight_schedules_free;
++++-    
++++-  }
+++++}
+++++*/
++++ }
++++ 
++++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++++ void flight_schedule_add(city_t city){ //should this call get city
++++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++   
++++-  if (flight_schedule_find) {
++++-    msg_city_exists(city);
++++-  }
+++++  //if (flight_schedule_find == city)  {
+++++  //  msg_city_exists(city);
+++++ // } //
++++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++   
++++   //p->destination = ch; 
++++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
++++ void flight_schedule_listAll(void){
++++   struct flight_schedule *temp = flight_schedules_active;
++++   while(temp != NULL){
++++-    printf("%p", &temp);
+++++    printf("%p", temp); // print temp is disaplying memory address
++++     temp = temp->next;
++++   }
++++ 
++++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
++++   struct flight_schedule *temp = flight_schedules_active;
++++   while(temp != NULL){
++++     if (strcmp(city,temp->destination) == 0){
++++-      printf("%p", &temp);
+++++      printf("%p", *temp); //displaying memory address
++++     }
++++     temp = temp->next;
++++   }
++++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
++++ 
++++   int *t;
++++   time_get(t); //do this then check if t is 0 to see if valid or not 
++++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++   
++++-  if (time == 1 || capacity == 1 ){
++++-      return 1;
+++++  if(time_get(t) == 0) { //or just t
+++++     return;
+++++   }
+++++
+++++  int *c;
+++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++++  
+++++  if (flight_capacity_get(c) == 0){
+++++      return;
++++   }
++++ 
++++   struct flight *flights;
++++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
++++ 
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++     if(flights[i].time == -1){
++++-      flights[i].time = time;//was flights[i] will this change correct one?
++++-      flights[i].capacity = capacity;
+++++      flights[i].time = *t;//was flights[i] will this change correct one?
+++++      flights[i].capacity = *c;
++++       break;
++++     }
++++   }
++++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++  //idk if this is the right time to call or even need too
++++ 
++++-
++++-
++++   int *t;
++++   time_get(t); //if 1 continue; else tell user
++++    if(time_get(t) == 0) {
++++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
++++    }
++++   int *c;
++++   flight_capacity_get(c); 
+++++  if(flight_capacity_get(c) == 0){
+++++
+++++  }
++++   
++++   struct flight *flights;
++++   flights = temp->flights;
++++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
++++ 
++++   struct flight *flights;
++++   flights = temp->flights;
+++++  int *t;
+++++  time_get(t);
+++++  if(time_get(t) == 0) {
+++++     return;
+++++   }
++++ 
++++-  int time = time_get();
++++   int nearest = 0;
++++   int position = 0;
++++ 
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++-    if(flights[i].time >= time){
++++-      if(flights[i].time - nearest <= nearest - time){
+++++    if(flights[i].time >= *t){
+++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
++++         nearest = flights[i].time;
++++         position = i;
++++       }
++++@@ -573,18 +602,21 @@ flights[position].available--;
++++   
++++ }
++++ 
++++-flight_schedule_unschedule_seat(city_t city){
+++++ void flight_schedule_unschedule_seat(city_t city){
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++ 
++++   struct flight *flights;
++++   flights = temp->flights;
++++-
++++-  int time = time_get();
+++++  int *t;
+++++  time_get(t);
+++++  if(time_get(t) == 0) {
+++++     return;
+++++   }
++++   int nearest = 0;
++++   int position = 0;
++++ 
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++-    if(flights[i].time == time){
+++++    if(flights[i].time == *t){ //origrinally was time 
++++      flights[i].available--;
++++     }
++++   }
++++diff --git a/gitlog.txt b/gitlog.txt
++++index e69de29..c3e37f7 100644
++++--- a/gitlog.txt
+++++++ b/gitlog.txt
++++@@ -0,0 +1,3895 @@
+++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 22:04:59 2020 -0400
+++++
+++++    finshing up scheduling/unscheduling and debuggin
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 322ef6c..881c536 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
+++++   flight_schedule_add(city);
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++ 
+++++-  time_t time = time_get();
+++++-  int capacity = flight_capacity_get();
++++++
++++++  int *t;
++++++  time_get(t); //do this then check if t is 0 to see if valid or not 
++++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++++   
+++++   if (time == 1 || capacity == 1 ){
+++++       return 1;
+++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
+++++ 
+++++ 
+++++ 
+++++-  time_t time = time_get();
+++++-  int capacity = flight_capacity_get(); 
++++++  int *t;
++++++  time_get(t); //if 1 continue; else tell user
++++++   if(time_get(t) == 0) {
++++++     return;
++++++   }
++++++  int *c;
++++++  flight_capacity_get(c); 
+++++   
+++++   struct flight *flights;
+++++   flights = temp->flights;
+++++ 
+++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++-    if(flights[i].time == time){
++++++    if(flights[i].time == *t){
+++++       flights[i].time = -1;//was flights[i] will this change correct one?
+++++       flights[i].capacity = 0;  
+++++       flights[i].available = 0;
+++++
+++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 21:51:04 2020 -0400
+++++
+++++    schedule and unschedule seat
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 6db86b9..322ef6c 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
+++++ 
+++++ 
+++++ void flight_schedule_schedule_seat(city_t city) {
++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++
++++++  struct flight *flights;
++++++  flights = temp->flights;
++++++
++++++  int time = time_get();
++++++  int nearest = 0;
++++++  int position = 0;
++++++
++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++    if(flights[i].time >= time){
++++++      if(flights[i].time - nearest <= nearest - time){
++++++        nearest = flights[i].time;
++++++        position = i;
++++++      }
++++++    }
++++++  }
++++++flights[position].available--;
+++++   
+++++-}
+++++\ No newline at end of file
++++++}
++++++
++++++flight_schedule_unschedule_seat(city_t city){
++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++
++++++  struct flight *flights;
++++++  flights = temp->flights;
++++++
++++++  int time = time_get();
++++++  int nearest = 0;
++++++  int position = 0;
++++++
++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++    if(flights[i].time == time){
++++++     flights[i].available--;
++++++    }
++++++  }
++++++}
++++++
+++++
+++++commit 4490dcc205f2959c8fa299368be096d99f756e27
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 21:23:54 2020 -0400
+++++
+++++    continuing work on add and remove flights
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index d9c99ff..6db86b9 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
+++++   flight_schedule_add(city);
+++++   struct flight_schedule *temp = flight_schedule_find(city);
+++++ 
+++++-  int time = time_get();
++++++  time_t time = time_get();
+++++   int capacity = flight_capacity_get();
+++++   
+++++   if (time == 1 || capacity == 1 ){
+++++       return 1;
+++++   }
+++++ 
+++++-  temp->flight->flights[];
++++++  struct flight *flights;
++++++  flights = temp->flights;
++++++  //flights[i]
++++++  //loop thru flights until open flight then add flight
+++++ 
++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++    if(flights[i].time == -1){
++++++      flights[i].time = time;//was flights[i] will this change correct one?
++++++      flights[i].capacity = capacity;
++++++      break;
++++++    }
++++++  }
++++++  //else return that it failed
++++++
++++++
++++++}
++++++
++++++void flight_schedule_remove_flight(city_t city){
++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++ //idk if this is the right time to call or even need too
+++++ 
+++++ 
++++++
++++++  time_t time = time_get();
++++++  int capacity = flight_capacity_get(); 
++++++  
++++++  struct flight *flights;
++++++  flights = temp->flights;
++++++
++++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++++    if(flights[i].time == time){
++++++      flights[i].time = -1;//was flights[i] will this change correct one?
++++++      flights[i].capacity = 0;  
++++++      flights[i].available = 0;
++++++      break;
++++++    }
++++++  }
+++++ }
++++++
++++++
++++++void flight_schedule_schedule_seat(city_t city) {
++++++  
++++++}
+++++\ No newline at end of file
+++++
+++++commit e41186f0b9058ea4390a8f0fda78296861580f31
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 20:05:28 2020 -0400
+++++
+++++    updates to add_flight
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index aae10c7..d9c99ff 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++   }
+++++ }
+++++ 
+++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++++   struct flight_schedule *temp = flight_schedules_active;
++++++
+++++   while(temp != NULL){
+++++-    if (strcmp(city,temp->destination) == 0){
++++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++++       return(temp);
+++++     }
+++++     temp = temp->next;
+++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++ }
+++++ 
+++++ 
++++++void flight_schedule_add(city_t city){ //should this call get city
++++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++++  
++++++  if (flight_schedule_find) {
++++++    msg_city_exists(city);
++++++  }
++++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++++  
++++++  //p->destination = ch; 
++++++
++++++}
++++++
++++++
++++++void flight_schedule_remove(city_t city){
++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++  flight_schedule_free(temp);
++++++}
++++++
++++++
++++++
++++++void flight_schedule_listAll(void){
++++++  struct flight_schedule *temp = flight_schedules_active;
++++++  while(temp != NULL){
++++++    printf("%p", &temp);
++++++    temp = temp->next;
++++++  }
++++++
++++++}
++++++
++++++void flight_schedule_list(city_t city){
++++++  struct flight_schedule *temp = flight_schedules_active;
++++++  while(temp != NULL){
++++++    if (strcmp(city,temp->destination) == 0){
++++++      printf("%p", &temp);
++++++    }
++++++    temp = temp->next;
++++++  }
++++++}
++++++
++++++void flight_schedule_add_flight(city_t city){
++++++  flight_schedule_add(city);
++++++  struct flight_schedule *temp = flight_schedule_find(city);
++++++
++++++  int time = time_get();
++++++  int capacity = flight_capacity_get();
++++++  
++++++  if (time == 1 || capacity == 1 ){
++++++      return 1;
++++++  }
++++++
++++++  temp->flight->flights[];
++++++
++++++
++++++
++++++}
+++++
+++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 18:35:40 2020 -0400
+++++
+++++    correction of free, working on find
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index a03a0af..aae10c7 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++   int counter = 0;
+++++   struct flight_schedule *temp = flight_schedules_active;
+++++   while(temp != NULL) {
+++++-    if(temp == fs){
++++++    if(temp == fs){ //use flight schedule find instead
+++++       break;
+++++     }
+++++     temp = temp->next;
+++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     flight_schedule_reset(temp);
+++++ 
+++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++-    flight_schedule_free = temp;
++++++    flight_schedules_free = temp;
+++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++     //flight_schedule_reset(temp);
+++++ 
+++++   }
+++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++++     temp->prev->next = temp->next;
+++++     temp->next->prev = temp->prev;
+++++     temp->next = NULL;
+++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     flight_schedule_reset(temp);
+++++ 
+++++     temp->next = flight_schedules_free;
+++++-    flight_schedule_free = temp;
++++++    flight_schedules_free = temp;
+++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++   }
+++++   else{
+++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
+++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++ 
+++++     temp->next = flight_schedules_free;
+++++-    flight_schedule_free = temp;
++++++    flight_schedules_free = temp;
+++++     flight_schedules_free->next->prev = flight_schedules_free;
+++++     
+++++   }
+++++-}
+++++\ No newline at end of file
++++++}
++++++
++++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++++  struct flight_schedule *temp = flight_schedules_active;
++++++  while(temp != NULL){
++++++    if (strcmp(city,temp->destination) == 0){
++++++      return(temp);
++++++    }
++++++    temp = temp->next;
++++++  }
++++++}
++++++
++++++
+++++
+++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 15:08:53 2020 -0400
+++++
+++++    working on flight_schedule_free
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 1f30cd1..a03a0af 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
+++++ //flight schedule free
+++++ //takes schedule off active list, resets it, then places the node back on free list
+++++ void flight_schedule_free(struct flight_schedule *fs){
+++++-  struct flight_schedule *temp = flight
++++++  int counter = 0;
++++++  struct flight_schedule *temp = flight_schedules_active;
++++++  while(temp != NULL) {
++++++    if(temp == fs){
++++++      break;
++++++    }
++++++    temp = temp->next;
++++++    counter++;
++++++  }
++++++  
++++++  if (counter == 0){
++++++    flight_schedules_active = temp->next;
++++++    flight_schedules_active->prev = NULL;
++++++    temp->next = NULL;
++++++
++++++    flight_schedule_reset(temp);
++++++
++++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++++    flight_schedule_free = temp;
++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++    //flight_schedule_reset(temp);
++++++
++++++  }
++++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++++    temp->prev->next = temp->next;
++++++    temp->next->prev = temp->prev;
++++++    temp->next = NULL;
++++++    temp->prev = NULL;
++++++
++++++    flight_schedule_reset(temp);
++++++
++++++    temp->next = flight_schedules_free;
++++++    flight_schedule_free = temp;
++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++  }
++++++  else{
++++++    temp->prev = NULL;
++++++    flight_schedules_active->prev->next = NULL;
++++++
++++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++++
++++++    temp->next = flight_schedules_free;
++++++    flight_schedule_free = temp;
++++++    flight_schedules_free->next->prev = flight_schedules_free;
++++++    
++++++  }
+++++ }
+++++\ No newline at end of file
+++++
+++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Mon Sep 28 14:12:10 2020 -0400
+++++
+++++    correcting allocate
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index ec71f49..1f30cd1 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
+++++ //returns pointer to updated flight schedule
+++++ struct flight_schedule * flight_schedule_allocate(void){
+++++ 
+++++-  struct flight_schedule temp = 
++++++  struct flight_schedule *temp =  flight_schedules_free;
++++++  flight_schedules_free = flight_schedules_free->next;
++++++  flight_schedules_free->prev = NULL;
++++++  temp->next = flight_schedules_active;
++++++
++++++  flight_schedules_active = temp;
++++++  flight_schedules_active->next->prev = flight_schedules_active;
++++++  //temp->prev = NULL;
++++++  //struct flight_schedule *temp2 = flight_schedules_active
+++++   
+++++-  
+++++-  
+++++-  *flight_schedules_active = *flight_schedules_free->free;
+++++-
+++++-  
+++++-  //flight_schedules_active = flight_schedules_free;
+++++-  *flight_schedules_free = *flight_schedules_free->next;
+++++-  *flight_schedules_free->prev = NULL;
+++++-  return(flight_schedules_active->flights[]);
++++++  return(flight_schedules_active);
+++++ }
+++++ 
+++++ //flight schedule free
+++++ //takes schedule off active list, resets it, then places the node back on free list
+++++ void flight_schedule_free(struct flight_schedule *fs){
+++++-  
++++++  struct flight_schedule *temp = flight
+++++ }
+++++\ No newline at end of file
+++++
+++++commit 7c7197814c779e696458438563f16bc76b197fb2
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Fri Sep 25 18:25:04 2020 -0400
+++++
+++++    very confused, trying to use pointers to alt sched
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index ff89d23..ec71f49 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
+++++   return (af->time - bf->time);
+++++ }
+++++ 
+++++-WRITE SOME CODE!
++++++//WRITE SOME CODE!
+++++ //flight schedule allocate
++++++//takes a schedule off the free list and places it on the active list
++++++//returns pointer to updated flight schedule
+++++ struct flight_schedule * flight_schedule_allocate(void){
+++++-  *flight_schedules_active = *flight_schedules_free;
+++++-  *flight_schedules_free = *flight_schedules_free.next;
+++++-  return(flight_schedule);
+++++-}
+++++ 
++++++  struct flight_schedule temp = 
++++++  
++++++  
++++++  
++++++  *flight_schedules_active = *flight_schedules_free->free;
+++++ 
++++++  
++++++  //flight_schedules_active = flight_schedules_free;
++++++  *flight_schedules_free = *flight_schedules_free->next;
++++++  *flight_schedules_free->prev = NULL;
++++++  return(flight_schedules_active->flights[]);
++++++}
+++++ 
+++++ //flight schedule free
+++++-
++++++//takes schedule off active list, resets it, then places the node back on free list
+++++ void flight_schedule_free(struct flight_schedule *fs){
+++++-  *flight_schedule_active = *flight_schedule_free;
+++++-  *fs = 
++++++  
+++++ }
+++++\ No newline at end of file
+++++
+++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
+++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++++Date:   Fri Sep 25 12:05:56 2020 -0400
+++++
+++++    starting work on first 3 helper functions
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 31abde4..ff89d23 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
+++++ }
+++++ 
+++++ WRITE SOME CODE!
++++++//flight schedule allocate
++++++struct flight_schedule * flight_schedule_allocate(void){
++++++  *flight_schedules_active = *flight_schedules_free;
++++++  *flight_schedules_free = *flight_schedules_free.next;
++++++  return(flight_schedule);
++++++}
++++++
++++++
++++++
++++++//flight schedule free
++++++
++++++void flight_schedule_free(struct flight_schedule *fs){
++++++  *flight_schedule_active = *flight_schedule_free;
++++++  *fs = 
++++++}
+++++\ No newline at end of file
+++++
+++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
+++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++Date:   Thu Sep 24 18:32:49 2020 -0400
+++++
+++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
+++++
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++index 2f5c360..31abde4 100644
+++++--- a/assignment-3.c
++++++++ b/assignment-3.c
+++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++ // Structure to hold all the information for a single flight
+++++ //   A city's schedule has an array of these
+++++ struct flight {
+++++-  int time;       // departure time of the flight
++++++  time_t time;       // departure time of the flight
+++++   int available;  // number of seats currently available on the flight
+++++   int capacity;   // maximum seat capacity of the flight
+++++ };
+++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++     array[i+1].prev = &array[i];
+++++   }
+++++   // Takes care of last node.  
+++++-  // Its prev pointer will be set in the loop,
+++++-  // we just have to set its next to NULL.
++++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
+++++   array[n-1].next = NULL;
++++++  array[n-1].prev = &array[n-2];
+++++   flight_schedules_free = &array[0];
+++++ }
+++++ 
+++++diff --git a/reference b/reference
+++++index ee9132a..b11f6c6 100755
+++++Binary files a/reference and b/reference differ
+++++
+++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
+++++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++++Date:   Mon Sep 21 21:02:39 2020 -0400
+++++
+++++    Initial Commit to seed assignment 3. Have fun!
+++++
+++++diff --git a/.gitignore b/.gitignore
+++++new file mode 100644
+++++index 0000000..8ff04a2
+++++--- /dev/null
++++++++ b/.gitignore
+++++@@ -0,0 +1,4 @@
++++++*
++++++!assignment-3.c
++++++!gitlog.txt
++++++
+++++diff --git a/.vscode/launch.json b/.vscode/launch.json
+++++new file mode 100644
+++++index 0000000..5f223b9
+++++--- /dev/null
++++++++ b/.vscode/launch.json
+++++@@ -0,0 +1,30 @@
++++++{
++++++    // Use IntelliSense to learn about possible attributes.
++++++    // Hover to view descriptions of existing attributes.
++++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
++++++    "version": "0.2.0",
++++++    "configurations": [
++++++    
++++++
++++++        {
++++++            "name": "(gdb) Launch",
++++++            "type": "cppdbg",
++++++            "request": "launch",
++++++            "program": "${workspaceFolder}/assignment-3",
++++++            "args": [],
++++++            "stopAtEntry": true,
++++++            "cwd": "${workspaceFolder}",
++++++            "environment": [],
++++++            "externalConsole": false,
++++++            "MIMode": "gdb",
++++++            "setupCommands": [
++++++                {
++++++                    "description": "Enable pretty-printing for gdb",
++++++                    "text": "-enable-pretty-printing",
++++++                    "ignoreFailures": true
++++++                }
++++++            ],
++++++            "preLaunchTask": "Build"
++++++        }
++++++    ]
++++++}
+++++diff --git a/.vscode/settings.json b/.vscode/settings.json
+++++new file mode 100644
+++++index 0000000..495436f
+++++--- /dev/null
++++++++ b/.vscode/settings.json
+++++@@ -0,0 +1,21 @@
++++++{
++++++    "git.ignoreLegacyWarning": true,
++++++    "files.autoSave": "afterDelay",
++++++    "files.exclude": {
++++++        ".vscode": true,
++++++        "**/*.o": true,
++++++        "reference": true,
++++++        "assignment-3": true,
++++++        "test.sh":true,
++++++        "gitlog.txt":true,
++++++        ".gitignore":true
++++++    },
++++++    "editor.renderControlCharacters": true,
++++++    "C_Cpp.default.cStandard": "c99",
++++++    "C_Cpp.default.cppStandard": "gnu++11",
++++++    "C_Cpp.default.defines": [],
++++++    "C_Cpp.intelliSenseEngine": "Disabled",
++++++    "C_Cpp.workspaceParsingPriority": "low",
++++++    "C_Cpp.intelliSenseCacheSize": 100,
++++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
++++++}
+++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+++++new file mode 100644
+++++index 0000000..d02618f
+++++--- /dev/null
++++++++ b/.vscode/tasks.json
+++++@@ -0,0 +1,28 @@
++++++{
++++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++++++    // for the documentation about the tasks.json format
++++++    "version": "2.0.0",
++++++    "tasks": [
++++++        {
++++++            "label": "Build",
++++++            "type": "shell",
++++++            "command": "make",
++++++            "options": {
++++++                "cwd": "${workspaceFolder}"
++++++            },
++++++            "group": {
++++++                "kind": "build",
++++++                "isDefault": true
++++++            },
++++++            "presentation": {
++++++                "reveal": "always",
++++++                "panel": "shared"
++++++            },
++++++            "problemMatcher": {
++++++                "base": "$gcc",
++++++                "fileLocation": ["relative", "${workspaceRoot}/"]
++++++            }
++++++        }
++++++        
++++++    ]
++++++}
+++++diff --git a/Makefile b/Makefile
+++++new file mode 100644
+++++index 0000000..1c3a3d1
+++++--- /dev/null
++++++++ b/Makefile
+++++@@ -0,0 +1,69 @@
++++++.PHONY: all clean test gitlog
++++++
++++++all: assignment-3
++++++
++++++assignment-3: assignment-3.c
++++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
++++++
++++++test: assignment-3 gitlog
++++++	./test.sh
++++++
++++++test1: assignment-3
++++++	./test.sh 1
++++++
++++++test2: assignment-3
++++++	./test.sh 2
++++++
++++++test3: assignment-3
++++++	./test.sh 3
++++++
++++++test4: assignment-3
++++++	./test.sh 4
++++++
++++++test5: assignment-3
++++++	./test.sh 5
++++++
++++++test6: assignment-3
++++++	./test.sh 6
++++++
++++++test7: assignment-3
++++++	./test.sh 7
++++++
++++++test8: assignment-3
++++++	./test.sh 8
++++++
++++++test9: assignment-3
++++++	./test.sh 9
++++++
++++++test10: assignment-3
++++++	./test.sh 10
++++++
++++++test11: assignment-3
++++++	./test.sh 11
++++++
++++++test12: assignment-3
++++++	./test.sh 12
++++++
++++++test13: assignment-3
++++++	./test.sh 13
++++++
++++++test14: assignment-3
++++++	./test.sh 14
++++++
++++++test15: assignment-3
++++++	./test.sh 15
++++++
++++++test16: assignment-3
++++++	./test.sh 16
++++++
++++++bonus1: assignment-3
++++++	./test.sh 1 bonus
++++++
++++++bonus2: assignment-3
++++++	./test.sh 2 bonus
++++++
++++++gitlog:
++++++	git log -p > gitlog.txt
++++++
++++++clean:
++++++	-${RM} assignment-3
+++++diff --git a/assignment-3.c b/assignment-3.c
+++++new file mode 100644
+++++index 0000000..2f5c360
+++++--- /dev/null
++++++++ b/assignment-3.c
+++++@@ -0,0 +1,375 @@
++++++/**
++++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
++++++ *  Let's use our knowledge to write a simple flight management system!
++++++ **/
++++++
++++++#include <stdio.h>
++++++#include <string.h>
++++++#include <stdlib.h>
++++++#include <stdbool.h>
++++++#include <assert.h>
++++++
++++++// Limit constants
++++++#define MAX_CITY_NAME_LEN 20
++++++#define MAX_FLIGHTS_PER_CITY 5
++++++#define MAX_DEFAULT_SCHEDULES 50
++++++
++++++// Time definitions
++++++#define TIME_MIN 0
++++++#define TIME_MAX ((60 * 24)-1)
++++++#define TIME_NULL -1
++++++
++++++
++++++/******************************************************************************
++++++ * Structure and Type definitions                                             *
++++++ ******************************************************************************/
++++++typedef int time_t;                        // integers used for time values
++++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++++ 
++++++// Structure to hold all the information for a single flight
++++++//   A city's schedule has an array of these
++++++struct flight {
++++++  int time;       // departure time of the flight
++++++  int available;  // number of seats currently available on the flight
++++++  int capacity;   // maximum seat capacity of the flight
++++++};
++++++
++++++// Structure for an individual flight schedule
++++++// The main data structure of the program is an Array of these structures
++++++// Each structure will be placed on one of two linked lists:
++++++//                free or active
++++++// Initially the active list will be empty and all the schedules
++++++// will be on the free list.  Adding a schedule is finding the first
++++++// free schedule on the free list, removing it from the free list,
++++++// setting its destination city and putting it on the active list
++++++struct flight_schedule {
++++++  city_t destination;                          // destination city name
++++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
++++++  struct flight_schedule *next;                // link list next pointer
++++++  struct flight_schedule *prev;                // link list prev pointer
++++++};
++++++
++++++/******************************************************************************
++++++ * Global / External variables                                                *
++++++ ******************************************************************************/
++++++// This program uses two global linked lists of Schedules.  See comments
++++++// of struct flight_schedule above for details
++++++struct flight_schedule *flight_schedules_free = NULL;
++++++struct flight_schedule *flight_schedules_active = NULL;
++++++
++++++
++++++/******************************************************************************
++++++ * Function Prototypes                                                        *
++++++ ******************************************************************************/
++++++// Misc utility io functions
++++++int city_read(city_t city);           
++++++bool time_get(time_t *time_ptr);      
++++++bool flight_capacity_get(int *capacity_ptr);
++++++void print_command_help(void);
++++++
++++++// Core functions of the program
++++++void flight_schedule_initialize(struct flight_schedule array[], int n);
++++++struct flight_schedule * flight_schedule_find(city_t city);
++++++struct flight_schedule * flight_schedule_allocate(void);
++++++void flight_schedule_free(struct flight_schedule *fs);
++++++void flight_schedule_add(city_t city);
++++++void flight_schedule_listAll(void);
++++++void flight_schedule_list(city_t city);
++++++void flight_schedule_add_flight(city_t city);
++++++void flight_schedule_remove_flight(city_t city);
++++++void flight_schedule_schedule_seat(city_t city);
++++++void flight_schedule_unschedule_seat(city_t city);
++++++void flight_schedule_remove(city_t city);
++++++
++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
++++++int  flight_compare_time(const void *a, const void *b);
++++++
++++++
++++++int main(int argc, char *argv[]) 
++++++{
++++++  long n = MAX_DEFAULT_SCHEDULES;
++++++  char command;
++++++  city_t city;
++++++
++++++  if (argc > 1) {
++++++    // If the program was passed an argument then try and convert the first
++++++    // argument in the a number that will override the default max number
++++++    // of schedule we will support
++++++    char *end;
++++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
++++++    if (n==0) {
++++++      printf("ERROR: Bad number of default max scedules specified.\n");
++++++      exit(EXIT_FAILURE);
++++++    }
++++++  }
++++++
++++++  // C99 lets us allocate an array of a fixed length as a local 
++++++  // variable.  Since we are doing this in main and a call to main will be 
++++++  // active for the entire time of the program's execution this
++++++  // array will be alive for the entire time -- its memory and values
++++++  // will be stable for the entire program execution.
++++++  struct flight_schedule flight_schedules[n];
++++++ 
++++++  // Initialize our global lists of free and active schedules using
++++++  // the elements of the flight_schedules array
++++++  flight_schedule_initialize(flight_schedules, n);
++++++
++++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
++++++  //  When possible, if we know that some particular thing should have happened
++++++  //  we think of that as an assertion and write code to test them.
++++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
++++++  // the free list to a non-null value and the the active list is a null value.
++++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
++++++
++++++  // Print the instruction in the beginning
++++++  print_command_help();
++++++
++++++  // Command processing loop
++++++  while (scanf(" %c", &command) == 1) {
++++++    switch (command) {
++++++    case 'A': 
++++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
++++++      city_read(city);
++++++      flight_schedule_add(city);
++++++
++++++      break;
++++++    case 'L':
++++++      // List all active flight schedules eg. "L\n"
++++++      flight_schedule_listAll();
++++++      break;
++++++    case 'l': 
++++++      // List the flights for a particular city eg. "l\n"
++++++      city_read(city);
++++++      flight_schedule_list(city);
++++++      break;
++++++    case 'a':
++++++      // Adds a flight for a particular city "a Toronto\n
++++++      //                                      360 100\n"
++++++      city_read(city);
++++++      flight_schedule_add_flight(city);
++++++      break;
++++++    case 'r':
++++++      // Remove a flight for a particular city "r Toronto\n
++++++      //                                        360\n"
++++++      city_read(city);
++++++      flight_schedule_remove_flight(city);
++++++	break;
++++++    case 's':
++++++      // schedule a seat on a flight for a particular city "s Toronto\n
++++++      //                                                    300\n"
++++++      city_read(city);
++++++      flight_schedule_schedule_seat(city);
++++++      break;
++++++    case 'u':
++++++      // unschedule a seat on a flight for a particular city "u Toronto\n
++++++      //                                                      360\n"
++++++        city_read(city);
++++++        flight_schedule_unschedule_seat(city);
++++++        break;
++++++    case 'R':
++++++      // remove the schedule for a particular city "R Toronto\n"
++++++      city_read(city);
++++++      flight_schedule_remove(city);  
++++++      break;
++++++    case 'h':
++++++        print_command_help();
++++++        break;
++++++    case 'q':
++++++      goto done;
++++++    default:
++++++      printf("Bad command. Use h to see help.\n");
++++++    }
++++++  }
++++++ done:
++++++  return EXIT_SUCCESS;
++++++}
++++++
++++++/**********************************************************************
++++++ * city_read: Takes in and processes a given city following a command *
++++++ *********************************************************************/
++++++int city_read(city_t city) {
++++++  int ch, i=0;
++++++
++++++  // skip leading non letter characters
++++++  while (true) {
++++++    ch = getchar();
++++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
++++++      city[i++] = ch;
++++++      break;
++++++    }
++++++  }
++++++  while ((ch = getchar()) != '\n') {
++++++    if (i < MAX_CITY_NAME_LEN) {
++++++      city[i++] = ch;
++++++    }
++++++  }
++++++  city[i] = '\0';
++++++  return i;
++++++}
++++++
++++++
++++++/****************************************************************
++++++ * Message functions so that your messages match what we expect *
++++++ ****************************************************************/
++++++void msg_city_bad(char *city) {
++++++  printf("No schedule for %s\n", city);
++++++}
++++++
++++++void msg_city_exists(char *city) {
++++++  printf("There is a schedule of %s already.\n", city);
++++++}
++++++
++++++void msg_schedule_no_free(void) {
++++++  printf("Sorry no more free schedules.\n");
++++++}
++++++
++++++void msg_city_flights(char *city) {
++++++  printf("The flights for %s are:", city);
++++++}
++++++
++++++void msg_flight_info(int time, int avail, int capacity) {
++++++  printf(" (%d, %d, %d)", time, avail, capacity);
++++++}
++++++
++++++void msg_city_max_flights_reached(char *city) {
++++++  printf("Sorry we cannot add more flights on this city.\n");
++++++}
++++++
++++++void msg_flight_bad_time(void) {
++++++  printf("Sorry there's no flight scheduled on this time.\n");
++++++}
++++++
++++++void msg_flight_no_seats(void) {
++++++    printf("Sorry there's no more seats available!\n");
++++++}
++++++
++++++void msg_flight_all_seats_empty(void) {
++++++  printf("All the seats on this flights are empty!\n");
++++++}
++++++
++++++void msg_time_bad() {
++++++  printf("Invalid time value\n");
++++++}
++++++
++++++void msg_capacity_bad() {
++++++  printf("Invalid capacity value\n");
++++++}
++++++
++++++void print_command_help()
++++++{
++++++  printf("Here are the possible commands:\n"
++++++	 "A <city name>     - Add an active empty flight schedule for\n"
++++++	 "                    <city name>\n"
++++++	 "L                 - List cities which have an active schedule\n"
++++++	 "l <city name>     - List the flights for <city name>\n"
++++++	 "a <city name>\n"
++++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
++++++	 "                    with <capacity> seats\n"  
++++++	 "r <city name>\n"
++++++         "<time>            - Remove a flight form <city name> whose time is\n"
++++++	 "                    <time>\n"
++++++	 "s <city name>\n"
++++++	 "<time>            - Attempt to schedule seat on flight to \n"
++++++	 "                    <city name> at <time> or next closest time on\n"
++++++	 "                    which their is an available seat\n"
++++++	 "u <city name>\n"
++++++	 "<time>            - unschedule a seat from flight to <city name>\n"
++++++	 "                    at <time>\n"
++++++	 "R <city name>     - Remove schedule for <city name>\n"
++++++	 "h                 - print this help message\n"
++++++	 "q                 - quit\n"
++++++);
++++++}
++++++
++++++
++++++/****************************************************************
++++++ * Resets a flight schedule                                     *
++++++ ****************************************************************/
++++++void flight_schedule_reset(struct flight_schedule *fs) {
++++++    fs->destination[0] = 0;
++++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
++++++      fs->flights[i].time = TIME_NULL;
++++++      fs->flights[i].available = 0;
++++++      fs->flights[i].capacity = 0;
++++++    }
++++++    fs->next = NULL;
++++++    fs->prev = NULL;
++++++}
++++++
++++++/******************************************************************
++++++* Initializes the flight_schedule array that will hold any flight *
++++++* schedules created by the user. This is called in main for you.  *
++++++ *****************************************************************/
++++++
++++++void flight_schedule_initialize(struct flight_schedule array[], int n)
++++++{
++++++  flight_schedules_active = NULL;
++++++  flight_schedules_free = NULL;
++++++
++++++  // takes care of empty array case
++++++  if (n==0) return;
++++++
++++++  // Loop through the Array connecting them
++++++  // as a linear doubly linked list
++++++  array[0].prev = NULL;
++++++  for (int i=0; i<n-1; i++) {
++++++    flight_schedule_reset(&array[i]);
++++++    array[i].next = &array[i+1];
++++++    array[i+1].prev = &array[i];
++++++  }
++++++  // Takes care of last node.  
++++++  // Its prev pointer will be set in the loop,
++++++  // we just have to set its next to NULL.
++++++  array[n-1].next = NULL;
++++++  flight_schedules_free = &array[0];
++++++}
++++++
++++++/***********************************************************
++++++ * time_get: read a time from the user
++++++   Time in this program is a minute number 0-((24*60)-1)=1439
++++++   -1 is used to indicate the NULL empty time 
++++++   This function should read in a time value and check its 
++++++   validity.  If it is not valid eg. not -1 or not 0-1439
++++++   It should print "Invalid Time" and return false.
++++++   othewise it should return the value in the integer pointed
++++++   to by time_ptr.
++++++ ***********************************************************/
++++++bool time_get(int *time_ptr) {
++++++  if (scanf("%d", time_ptr)==1) {
++++++    return (TIME_NULL == *time_ptr || 
++++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
++++++  } 
++++++  msg_time_bad();
++++++  return false;
++++++}
++++++
++++++/***********************************************************
++++++ * flight_capacity_get: read the capacity of a flight from the user
++++++   This function should read in a capacity value and check its 
++++++   validity.  If it is not greater than 0, it should print 
++++++   "Invalid capacity value" and return false. Othewise it should 
++++++   return the value in the integer pointed to by cap_ptr.
++++++ ***********************************************************/
++++++bool flight_capacity_get(int *cap_ptr) {
++++++  if (scanf("%d", cap_ptr)==1) {
++++++    return *cap_ptr > 0;
++++++  }
++++++  msg_capacity_bad();
++++++  return false;
++++++}
++++++
++++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
++++++{
++++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
++++++	flight_compare_time);
++++++}
++++++
++++++int flight_compare_time(const void *a, const void *b) 
++++++{
++++++  const struct flight *af = a;
++++++  const struct flight *bf = b;
++++++  
++++++  return (af->time - bf->time);
++++++}
++++++
++++++WRITE SOME CODE!
+++++diff --git a/gitlog.txt b/gitlog.txt
+++++new file mode 100644
+++++index 0000000..e69de29
+++++diff --git a/reference b/reference
+++++new file mode 100755
+++++index 0000000..ee9132a
+++++Binary files /dev/null and b/reference differ
+++++diff --git a/test.sh b/test.sh
+++++new file mode 100755
+++++index 0000000..f8ecbf4
+++++--- /dev/null
++++++++ b/test.sh
+++++@@ -0,0 +1,328 @@
++++++#!/bin/bash
++++++#set -x
++++++
++++++REFERENCE=./reference
++++++PGM=./assignment-3
++++++
++++++# To add a test you can add an element the REQUIRED arrays 
++++++# or BONUS Arrays
++++++# Each test can have a descripttion, input and optionally a num
++++++# num is passed as the argument on the command line to set
++++++# the default max schedule size
++++++
++++++# Required tests
++++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
++++++REQUIRED_INPUT[0]="L
++++++A Toronto
++++++L"
++++++
++++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
++++++REQUIRED_INPUT[1]="L
++++++A Toronto
++++++l Toronto
++++++a Toronto
++++++1000 5
++++++l Toronto"
++++++
++++++REQUIRED_NUM[2]="2"
++++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
++++++REQUIRED_INPUT[2]="L
++++++A City1
++++++A City2
++++++L
++++++A City3
++++++L"
++++++
++++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
++++++REQUIRED_INPUT[3]="A Naples
++++++A Addis Ababa
++++++L
++++++R Naples
++++++L"
++++++
++++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
++++++REQUIRED_INPUT[4]="A San Jose
++++++a San Jose
++++++360 100
++++++l San Jose
++++++r San Jose
++++++360
++++++l San Jose"
++++++
++++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
++++++REQUIRED_INPUT[5]="A Hanoi
++++++r Hanoi
++++++100"
++++++
++++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
++++++REQUIRED_INPUT[6]="A Cartagena
++++++a Cartagena
++++++720 100
++++++a Cartagena
++++++840 120
++++++s Cartagena
++++++480
++++++l Cartagena"
++++++
++++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
++++++REQUIRED_INPUT[7]="L
++++++A Abu Dhabi
++++++a Abu Dhabi
++++++360 50
++++++a Abu Dhabi
++++++840 100
++++++s Abu Dhabi
++++++700
++++++l Abu Dhabi
++++++u Abu Dhabi
++++++840
++++++l Abu Dhabi"
++++++
++++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
++++++REQUIRED_INPUT[8]="L
++++++A Belgrade
++++++a Belgrade
++++++400 1
++++++s Belgrade
++++++400
++++++l Belgrade
++++++s Belgrade
++++++400
++++++l Belgrade"
++++++
++++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
++++++REQUIRED_INPUT[9]="L
++++++A Kyoto
++++++a Kyoto
++++++300 5
++++++l Kyoto
++++++u Kyoto
++++++300
++++++l Kyoto"
++++++
++++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
++++++REQUIRED_INPUT[10]="L
++++++A Mumbai
++++++a Mumbai
++++++900 3
++++++l Mumbai
++++++u Mumbai
++++++300
++++++l Mumbai"
++++++
++++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
++++++REQUIRED_INPUT[11]="L
++++++A Prague
++++++a Prague
++++++360 5
++++++a Prague
++++++720 100
++++++l Prague
++++++s Prague
++++++900
++++++l Prague"
++++++
++++++REQUIRED_NUM[12]="2"
++++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
++++++REQUIRED_INPUT[12]="L
++++++A City1
++++++L
++++++A City2
++++++L
++++++A City3
++++++L
++++++R City1
++++++L
++++++R City2
++++++L
++++++R City3
++++++L
++++++A City1
++++++L"
++++++
++++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
++++++REQUIRED_INPUT[13]="L
++++++A City1
++++++a City1
++++++60 5
++++++l City1
++++++a City1
++++++120 5
++++++l City1
++++++a City1
++++++180 5
++++++l City1
++++++a City1
++++++240 5
++++++l City1
++++++a City1
++++++300 5
++++++l City1
++++++a City1
++++++360 5
++++++l City1
++++++r City1
++++++360
++++++l City1
++++++r City1
++++++300
++++++l City1
++++++r City1
++++++240
++++++l City1
++++++r City1
++++++180
++++++l City1
++++++r City1
++++++120
++++++l City1
++++++r City1
++++++60
++++++l City1
++++++a City1
++++++60 5
++++++l City1"
++++++
++++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
++++++REQUIRED_INPUT[14]="L
++++++A City1
++++++a City1
++++++60 3
++++++l City1
++++++s City1
++++++60
++++++l City1
++++++s City1
++++++60
++++++l City1
++++++s City1
++++++60
++++++l City1
++++++s City1
++++++60
++++++l City1
++++++u City1
++++++60
++++++l City1
++++++u City1
++++++60
++++++l City1
++++++u City1
++++++60
++++++l City1
++++++u City1
++++++60
++++++l City1"
++++++
++++++REQUIRED_DESC[15]="Required 16: A bigger test "
++++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
++++++REQUIRED_VALUE[15]=5
++++++
++++++
++++++# Bonus tests
++++++BONUS_DESC[0]="Bonus 1: Medium sized test"
++++++BONUS_INPUT[0]="$(cat testMedium.txt)"
++++++BONUS_VALUE[0]=3
++++++
++++++BONUS_DESC[1]="Bonus 2: Large sized test"
++++++BONUS_INPUT[1]="$(cat testBig.txt)"
++++++BONUS_VALUE[1]=5
++++++
++++++
++++++function run_test()
++++++{
++++++   description="$1"
++++++   input="$2"
++++++   num="$3"
++++++
++++++   echo -n "$description : "
++++++   [[ -n $VERBOSE ]] &&  echo "Input:"
++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++   [[ -n $VERBOSE ]] &&  echo "$input"
++++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++++
++++++   solution=$($REFERENCE $num <<EOF
++++++$input
++++++EOF
++++++)
++++++
++++++   answer=$($PGM $num<<EOF
++++++$input
++++++EOF
++++++)
++++++
++++++  if [[ -n $DEBUG ]]; then
++++++      echo "$solution"
++++++  else
++++++    if [[ "$answer" == "$solution" ]]; then
++++++       echo "PASS"
++++++       return 0
++++++    fi
++++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
++++++    echo "FAIL"
++++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++    [[ -n $VERBOSE ]] && echo "$answers"    
++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++    [[ -n $VERBOSE ]] && echo "$solution"
++++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++++    [[ -n $VERBOSE ]] && echo ""
++++++  fi
++++++  return 1
++++++}
++++++
++++++testnum=$1
++++++type=$2
++++++
++++++total=0
++++++correct=0
++++++
++++++if [[ -z $testnum ]]; then
++++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
++++++	value="${REQUIRED_VALUE[$i]}"
++++++	[[ -z $value ]] && value=1
++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++	    (( correct += $value ))
++++++	fi
++++++	(( total += value ))
++++++    done
++++++    
++++++    
++++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
++++++	value="${BONUS_VALUE[$i]}"
++++++	[[ -z $value ]] && value=1
++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++	    (( correct += $value ))
++++++	fi
++++++    done
++++++else
++++++    VERBOSE=1
++++++    (( i=$testnum - 1 ))
++++++    if [[ -z "$type" ]]; then
++++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
++++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
++++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
++++++	    exit -1
++++++	fi
++++++	value="${REQUIRED_VALUE[$i]}"
++++++	[[ -z $value ]] && value=1
++++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++++	    (( correct += $value ))
++++++	fi
++++++	(( total += value ))
++++++    else
++++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
++++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
++++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
++++++	    exit -1
++++++	fi	
++++++	value="${BONUS_VALUE[$i]}"
++++++	[[ -z $value ]] && value=1
++++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++++         (( correct += $value ))
++++++	fi
++++++    fi
++++++fi
++++++echo "score: ${correct}/${total}"
+++++diff --git a/testBig.txt b/testBig.txt
+++++new file mode 100644
+++++index 0000000..90170d5
+++++--- /dev/null
++++++++ b/testBig.txt
+++++@@ -0,0 +1,1251 @@
++++++L
++++++A Qingdao
++++++A Paris
++++++A Lima
++++++A Los Angeles
++++++A Khartoum
++++++A Barcelona
++++++A Santiago
++++++A Tokyo
++++++A Delhi
++++++A Guangzhou
++++++A Johannesburg
++++++A Paris
++++++A Dhaka
++++++A Chennai
++++++A Jinan
++++++A Luanda
++++++A Surat
++++++A Hyderabad
++++++A Beijing
++++++A Atlanta
++++++A Chennai
++++++A Dar es Salaam
++++++A Osaka
++++++A Hong Kong
++++++A Toronto
++++++A Saint Petersburg
++++++A Manila
++++++A Washington, D.C.
++++++A Tehran
++++++A Miami
++++++A Khartoum
++++++A Seoul
++++++A Dar es Salaam
++++++A Sao Paulo
++++++A Baghdad
++++++A Guadalajara
++++++A Ahmedabad
++++++A Moscow
++++++A Philadelphia
++++++A Fukuoka
++++++a Tokyo
++++++1414 113
++++++a Guadalajara
++++++385 170
++++++a Qingdao
++++++782 37
++++++a Ahmedabad
++++++1411 50
++++++a Los Angeles
++++++517 84
++++++a Tehran
++++++86 61
++++++a Osaka
++++++1289 162
++++++a Barcelona
++++++1261 158
++++++a Fukuoka
++++++550 191
++++++a Seoul
++++++207 1
++++++a Manila
++++++364 96
++++++a Khartoum
++++++56 194
++++++a Tokyo
++++++98 1
++++++a Saint Petersburg
++++++1330 107
++++++a Baghdad
++++++15 15
++++++a Chennai
++++++1169 127
++++++a Beijing
++++++807 97
++++++a Seoul
++++++1134 34
++++++a Jinan
++++++220 102
++++++a Dhaka
++++++122 101
++++++a Luanda
++++++1342 71
++++++a Guadalajara
++++++195 35
++++++a Fukuoka
++++++28 37
++++++a Beijing
++++++678 83
++++++a Khartoum
++++++947 39
++++++a Hyderabad
++++++490 104
++++++a Sao Paulo
++++++62 83
++++++a Baghdad
++++++1319 24
++++++a Delhi
++++++718 115
++++++a Baghdad
++++++204 114
++++++a Surat
++++++430 74
++++++a Miami
++++++918 87
++++++a Surat
++++++455 95
++++++a Fukuoka
++++++1077 131
++++++a Luanda
++++++311 21
++++++a Seoul
++++++1132 155
++++++a Lima
++++++432 177
++++++a Surat
++++++494 102
++++++a Washington, D.C.
++++++667 12
++++++a Hong Kong
++++++200 55
++++++a Los Angeles
++++++1195 4
++++++a Ahmedabad
++++++610 161
++++++a Delhi
++++++508 110
++++++a Atlanta
++++++17 21
++++++a Washington, D.C.
++++++162 23
++++++a Luanda
++++++1216 15
++++++a Tokyo
++++++1095 117
++++++a Philadelphia
++++++1436 117
++++++a Atlanta
++++++277 164
++++++a Manila
++++++720 147
++++++a Tokyo
++++++1017 25
++++++a Jinan
++++++76 66
++++++a Toronto
++++++844 84
++++++a Santiago
++++++7 115
++++++a Surat
++++++388 55
++++++a Tehran
++++++836 174
++++++a Paris
++++++371 110
++++++a Sao Paulo
++++++516 113
++++++a Luanda
++++++1041 174
++++++a Dhaka
++++++1076 34
++++++a Guadalajara
++++++162 144
++++++a Los Angeles
++++++424 33
++++++a Philadelphia
++++++565 167
++++++a Luanda
++++++1411 44
++++++a Osaka
++++++1005 82
++++++a Fukuoka
++++++1253 194
++++++a Atlanta
++++++141 102
++++++a Fukuoka
++++++1119 112
++++++a Toronto
++++++782 150
++++++a Dhaka
++++++1006 96
++++++a Miami
++++++961 126
++++++a Lima
++++++360 41
++++++a Lima
++++++14 50
++++++a Dhaka
++++++1028 191
++++++a Philadelphia
++++++502 115
++++++a Washington, D.C.
++++++1380 59
++++++a Atlanta
++++++548 113
++++++a Fukuoka
++++++694 183
++++++a Saint Petersburg
++++++261 26
++++++a Jinan
++++++196 53
++++++a Delhi
++++++315 78
++++++a Delhi
++++++625 92
++++++a Ahmedabad
++++++105 98
++++++a Philadelphia
++++++111 15
++++++a Atlanta
++++++321 31
++++++a Ahmedabad
++++++1244 59
++++++a Osaka
++++++799 173
++++++a Khartoum
++++++302 7
++++++a Luanda
++++++823 190
++++++a Chennai
++++++754 139
++++++a Los Angeles
++++++1028 78
++++++a Miami
++++++1123 183
++++++a Dar es Salaam
++++++1353 102
++++++a Beijing
++++++473 88
++++++a Paris
++++++698 95
++++++a Barcelona
++++++545 170
++++++a Chennai
++++++382 85
++++++a Miami
++++++821 114
++++++a Luanda
++++++584 161
++++++a Fukuoka
++++++38 26
++++++a Jinan
++++++536 148
++++++a Manila
++++++1403 133
++++++a Washington, D.C.
++++++917 130
++++++a Sao Paulo
++++++1169 81
++++++a Santiago
++++++689 42
++++++a Ahmedabad
++++++279 30
++++++a Los Angeles
++++++881 35
++++++a Jinan
++++++1293 148
++++++a Guangzhou
++++++1366 38
++++++a Santiago
++++++317 123
++++++a Tokyo
++++++454 104
++++++a Atlanta
++++++626 177
++++++a Surat
++++++69 135
++++++a Luanda
++++++1426 19
++++++a Barcelona
++++++879 46
++++++a Los Angeles
++++++1329 90
++++++a Beijing
++++++402 60
++++++a Lima
++++++727 161
++++++a Hyderabad
++++++601 186
++++++a Khartoum
++++++294 183
++++++a Hyderabad
++++++267 131
++++++a Manila
++++++771 102
++++++a Osaka
++++++103 68
++++++a Atlanta
++++++848 147
++++++a Atlanta
++++++811 179
++++++a Toronto
++++++402 131
++++++a Guadalajara
++++++804 28
++++++a Qingdao
++++++16 114
++++++a Beijing
++++++1218 14
++++++a Moscow
++++++498 195
++++++a Surat
++++++528 48
++++++a Manila
++++++865 4
++++++a Guangzhou
++++++328 24
++++++a Dhaka
++++++227 50
++++++a Manila
++++++124 91
++++++a Philadelphia
++++++218 104
++++++a Dar es Salaam
++++++209 34
++++++a Chennai
++++++641 179
++++++a Barcelona
++++++1433 171
++++++a Lima
++++++957 60
++++++a Dhaka
++++++1292 111
++++++a Qingdao
++++++647 40
++++++a Khartoum
++++++417 3
++++++a Tehran
++++++751 180
++++++a Barcelona
++++++778 118
++++++a Luanda
++++++204 59
++++++a Ahmedabad
++++++541 34
++++++a Ahmedabad
++++++539 33
++++++a Los Angeles
++++++824 193
++++++a Tehran
++++++1412 39
++++++s Luanda
++++++1418
++++++s Toronto
++++++857
++++++s Lima
++++++22
++++++s Tehran
++++++100
++++++s Washington
++++++175
++++++s Dhaka
++++++132
++++++s Jinan
++++++90
++++++s Beijing
++++++812
++++++s Barcelona
++++++1268
++++++s Dhaka
++++++228
++++++s Dhaka
++++++229
++++++s Osaka
++++++1295
++++++s Los Angeles
++++++527
++++++s Ahmedabad
++++++620
++++++s Tokyo
++++++461
++++++s Luanda
++++++588
++++++s Tehran
++++++1420
++++++s Jinan
++++++228
++++++s Hyderabad
++++++497
++++++s Manila
++++++879
++++++s Delhi
++++++720
++++++s Surat
++++++442
++++++s Lima
++++++21
++++++s Delhi
++++++630
++++++s Tehran
++++++836
++++++s Dhaka
++++++1042
++++++s Atlanta
++++++558
++++++s Khartoum
++++++300
++++++s Luanda
++++++1050
++++++s Lima
++++++445
++++++s Hong Kong
++++++213
++++++s Delhi
++++++318
++++++s Manila
++++++725
++++++s Dhaka
++++++1300
++++++s Tokyo
++++++1028
++++++s Lima
++++++23
++++++s Qingdao
++++++24
++++++s Ahmedabad
++++++542
++++++s Barcelona
++++++1274
++++++s Santiago
++++++7
++++++s Surat
++++++467
++++++s Chennai
++++++392
++++++s Fukuoka
++++++551
++++++s Fukuoka
++++++704
++++++s Fukuoka
++++++34
++++++s Fukuoka
++++++1131
++++++s Ahmedabad
++++++541
++++++s Philadelphia
++++++566
++++++s Surat
++++++506
++++++s Khartoum
++++++952
++++++s Guadalajara
++++++389
++++++s Tokyo
++++++1031
++++++s Baghdad
++++++24
++++++s Khartoum
++++++307
++++++s Lima
++++++370
++++++s Atlanta
++++++812
++++++s Sao Paulo
++++++1176
++++++s Manila
++++++1411
++++++s Khartoum
++++++294
++++++s Seoul
++++++1148
++++++s Guadalajara
++++++814
++++++s Khartoum
++++++314
++++++s Manila
++++++1410
++++++s Khartoum
++++++302
++++++s Philadelphia
++++++230
++++++s Lima
++++++728
++++++s Ahmedabad
++++++548
++++++s Fukuoka
++++++1121
++++++s Baghdad
++++++206
++++++s Ahmedabad
++++++1424
++++++s Santiago
++++++11
++++++s Lima
++++++364
++++++s Manila
++++++128
++++++s Tokyo
++++++460
++++++s Surat
++++++469
++++++s Barcelona
++++++1274
++++++s Guadalajara
++++++816
++++++s Guadalajara
++++++811
++++++s Luanda
++++++597
++++++s Atlanta
++++++852
++++++s Guadalajara
++++++811
++++++s Manila
++++++1409
++++++s Miami
++++++918
++++++s Luanda
++++++593
++++++s Barcelona
++++++1440
++++++s Dhaka
++++++132
++++++s Lima
++++++363
++++++s Ahmedabad
++++++1251
++++++s Los Angeles
++++++521
++++++s Fukuoka
++++++38
++++++s Beijing
++++++686
++++++s Fukuoka
++++++1126
++++++s Guadalajara
++++++196
++++++s Baghdad
++++++206
++++++s Los Angeles
++++++522
++++++s Ahmedabad
++++++553
++++++s Ahmedabad
++++++1416
++++++s Philadelphia
++++++113
++++++s Dar es Salaam
++++++217
++++++s Lima
++++++958
++++++s Tehran
++++++752
++++++s Washington
++++++680
++++++s Tehran
++++++756
++++++s Khartoum
++++++299
++++++s Dhaka
++++++1084
++++++s Manila
++++++878
++++++s Ahmedabad
++++++541
++++++s Ahmedabad
++++++119
++++++s Ahmedabad
++++++616
++++++s Tehran
++++++756
++++++s Tehran
++++++765
++++++s Philadelphia
++++++569
++++++s Ahmedabad
++++++283
++++++s Washington
++++++1387
++++++s Saint Petersburg
++++++274
++++++s Dhaka
++++++1037
++++++s Philadelphia
++++++506
++++++s Luanda
++++++593
++++++s Philadelphia
++++++232
++++++s Dhaka
++++++233
++++++s Baghdad
++++++1329
++++++s Chennai
++++++768
++++++s Barcelona
++++++546
++++++s Sao Paulo
++++++529
++++++s Jinan
++++++543
++++++s Philadelphia
++++++121
++++++s Tehran
++++++759
++++++s Lima
++++++964
++++++s Miami
++++++923
++++++s Los Angeles
++++++1195
++++++s Jinan
++++++200
++++++s Jinan
++++++224
++++++s Beijing
++++++1220
++++++s Lima
++++++368
++++++s Philadelphia
++++++1436
++++++s Tehran
++++++95
++++++s Miami
++++++928
++++++s Baghdad
++++++1326
++++++s Beijing
++++++483
++++++s Qingdao
++++++647
++++++s Fukuoka
++++++42
++++++s Los Angeles
++++++1033
++++++s Los Angeles
++++++836
++++++s Osaka
++++++1010
++++++s Manila
++++++865
++++++s Miami
++++++825
++++++s Barcelona
++++++553
++++++s Tehran
++++++757
++++++s Jinan
++++++88
++++++s Luanda
++++++1355
++++++s Saint Petersburg
++++++266
++++++s Surat
++++++459
++++++s Philadelphia
++++++576
++++++s Philadelphia
++++++1441
++++++s Paris
++++++709
++++++s Manila
++++++734
++++++s Toronto
++++++785
++++++s Manila
++++++135
++++++s Lima
++++++368
++++++s Lima
++++++967
++++++s Delhi
++++++731
++++++s Beijing
++++++403
++++++s Santiago
++++++692
++++++s Tehran
++++++1416
++++++s Dar es Salaam
++++++1358
++++++s Seoul
++++++1134
++++++s Philadelphia
++++++579
++++++s Guangzhou
++++++342
++++++s Osaka
++++++116
++++++s Guadalajara
++++++397
++++++s Dhaka
++++++1040
++++++s Toronto
++++++793
++++++s Qingdao
++++++25
++++++s Baghdad
++++++1332
++++++s Osaka
++++++1017
++++++s Los Angeles
++++++1338
++++++s Ahmedabad
++++++551
++++++s Guangzhou
++++++331
++++++s Tehran
++++++1420
++++++s Dar es Salaam
++++++215
++++++s Tokyo
++++++462
++++++s Atlanta
++++++859
++++++s Fukuoka
++++++554
++++++s Ahmedabad
++++++1423
++++++s Jinan
++++++229
++++++s Dhaka
++++++1294
++++++s Ahmedabad
++++++1250
++++++s Ahmedabad
++++++621
++++++s Delhi
++++++626
++++++s Manila
++++++129
++++++s Luanda
++++++204
++++++s Surat
++++++440
++++++s Atlanta
++++++22
++++++s Ahmedabad
++++++1251
++++++s Khartoum
++++++302
++++++s Surat
++++++73
++++++s Guadalajara
++++++209
++++++s Manila
++++++721
++++++s Toronto
++++++793
++++++s Dar es Salaam
++++++216
++++++s Manila
++++++785
++++++s Ahmedabad
++++++116
++++++s Barcelona
++++++548
++++++s Dhaka
++++++1041
++++++s Khartoum
++++++305
++++++s Los Angeles
++++++1208
++++++s Dhaka
++++++1079
++++++s Tokyo
++++++1422
++++++s Manila
++++++722
++++++s Osaka
++++++1298
++++++s Surat
++++++431
++++++s Khartoum
++++++294
++++++s Barcelona
++++++1445
++++++s Luanda
++++++589
++++++s Chennai
++++++645
++++++s Luanda
++++++835
++++++s Manila
++++++773
++++++s Fukuoka
++++++1256
++++++s Dhaka
++++++1300
++++++s Philadelphia
++++++230
++++++s Philadelphia
++++++571
++++++s Hong Kong
++++++209
++++++s Khartoum
++++++419
++++++s Paris
++++++706
++++++s Sao Paulo
++++++516
++++++s Tehran
++++++843
++++++s Khartoum
++++++429
++++++s Khartoum
++++++66
++++++s Guadalajara
++++++815
++++++s Khartoum
++++++63
++++++s Guadalajara
++++++397
++++++s Baghdad
++++++218
++++++s Saint Petersburg
++++++274
++++++s Dar es Salaam
++++++1359
++++++s Lima
++++++439
++++++s Khartoum
++++++312
++++++s Luanda
++++++1345
++++++s Seoul
++++++220
++++++s Tokyo
++++++1020
++++++s Atlanta
++++++25
++++++s Sao Paulo
++++++1179
++++++s Manila
++++++732
++++++s Philadelphia
++++++122
++++++s Manila
++++++723
++++++s Baghdad
++++++205
++++++s Osaka
++++++1018
++++++s Tehran
++++++762
++++++s Luanda
++++++1412
++++++s Toronto
++++++845
++++++s Qingdao
++++++24
++++++s Surat
++++++528
++++++s Chennai
++++++385
++++++s Ahmedabad
++++++542
++++++s Philadelphia
++++++1447
++++++s Lima
++++++733
++++++s Guadalajara
++++++205
++++++s Delhi
++++++326
++++++s Chennai
++++++754
++++++s Atlanta
++++++823
++++++s Manila
++++++377
++++++s Khartoum
++++++303
++++++s Delhi
++++++512
++++++s Surat
++++++498
++++++s Guadalajara
++++++165
++++++s Manila
++++++720
++++++s Washington
++++++170
++++++s Hyderabad
++++++280
++++++s Lima
++++++370
++++++s Tokyo
++++++98
++++++s Toronto
++++++854
++++++s Ahmedabad
++++++618
++++++s Toronto
++++++858
++++++s Tehran
++++++1421
++++++s Qingdao
++++++783
++++++s Barcelona
++++++784
++++++s Santiago
++++++690
++++++s Fukuoka
++++++1082
++++++s Jinan
++++++232
++++++s Chennai
++++++385
++++++s Paris
++++++710
++++++s Tokyo
++++++1427
++++++s Chennai
++++++754
++++++s Miami
++++++920
++++++s Toronto
++++++407
++++++s Guadalajara
++++++806
++++++s Miami
++++++923
++++++s Philadelphia
++++++226
++++++s Manila
++++++720
++++++s Manila
++++++133
++++++s Toronto
++++++852
++++++s Barcelona
++++++886
++++++s Sao Paulo
++++++68
++++++s Delhi
++++++630
++++++s Los Angeles
++++++428
++++++s Washington
++++++917
++++++s Atlanta
++++++322
++++++s Atlanta
++++++549
++++++s Manila
++++++137
++++++s Miami
++++++1135
++++++s Guadalajara
++++++399
++++++A Dar es Salaam
++++++a Qingdao
++++++1015 95
++++++u Toronto
++++++402
++++++A Lagos
++++++L
++++++a Qingdao
++++++910 139
++++++R Dar es Salaam
++++++r Washington
++++++917
++++++u Osaka
++++++103
++++++R Tokyo
++++++a Baghdad
++++++309 68
++++++L
++++++R Jinan
++++++L
++++++s Washington
++++++170
++++++L
++++++R Hyderabad
++++++r Lima
++++++727
++++++u Khartoum
++++++302
++++++A Nagoya
++++++u Los Angeles
++++++1329
++++++a Luanda
++++++1364 38
++++++r Philadelphia
++++++1436
++++++A Johannesburg
++++++A New York City
++++++a Los Angeles
++++++270 149
++++++A Los Angeles
++++++R Manila
++++++r Beijing
++++++473
++++++A Beijing
++++++r Tokyo
++++++1414
++++++a Lima
++++++1003 11
++++++r Dhaka
++++++227
++++++s Fukuoka
++++++38
++++++s Moscow
++++++499
++++++u Delhi
++++++508
++++++r Jinan
++++++220
++++++L
++++++a Qingdao
++++++314 81
++++++s Manila
++++++878
++++++a Sao Paulo
++++++457 134
++++++L
++++++R Hong Kong
++++++A Nagoya
++++++s Lima
++++++962
++++++u Baghdad
++++++1319
++++++L
++++++R Dhaka
++++++L
++++++u Lima
++++++432
++++++a Barcelona
++++++756 138
++++++s Toronto
++++++784
++++++u Dar es Salaam
++++++209
++++++R Miami
++++++u Washington
++++++1380
++++++s Manila
++++++784
++++++A London
++++++s Surat
++++++459
++++++L
++++++A Manila
++++++A Istanbul
++++++r Toronto
++++++782
++++++r Saint Petersburg
++++++1330
++++++s Guadalajara
++++++396
++++++A Tianjin
++++++r Tokyo
++++++98
++++++R Luanda
++++++r Dhaka
++++++122
++++++R Lagos
++++++u Fukuoka
++++++694
++++++r Jinan
++++++76
++++++u Sao Paulo
++++++457
++++++a Philadelphia
++++++455 175
++++++L
++++++u Delhi
++++++718
++++++r Osaka
++++++1005
++++++A Harbin
++++++u Luanda
++++++584
++++++r Los Angeles
++++++424
++++++L
++++++u Los Angeles
++++++824
++++++L
++++++R Khartoum
++++++r Barcelona
++++++545
++++++r Philadelphia
++++++502
++++++R Moscow
++++++r Hyderabad
++++++601
++++++u Los Angeles
++++++824
++++++A Nagoya
++++++R Washington, D.C.
++++++L
++++++L
++++++s Qingdao
++++++790
++++++R Sao Paulo
++++++A Shanghai
++++++A Paris
++++++u Beijing
++++++402
++++++r Philadelphia
++++++455
++++++s Luanda
++++++1053
++++++a Saint Petersburg
++++++322 141
++++++r Osaka
++++++103
++++++r Barcelona
++++++879
++++++a Baghdad
++++++732 76
++++++r Baghdad
++++++309
++++++a Tehran
++++++1213 65
++++++a Tehran
++++++270 7
++++++R Manila
++++++L
++++++A Nanjing
++++++r Luanda
++++++204
++++++L
++++++u Los Angeles
++++++824
++++++a Seoul
++++++161 99
++++++s Ahmedabad
++++++546
++++++a Atlanta
++++++920 91
++++++a Tianjin
++++++85 108
++++++a Lima
++++++1345 173
++++++r Manila
++++++865
++++++r Luanda
++++++584
++++++A Singapore
++++++L
++++++u Manila
++++++364
++++++L
++++++A Kolkata
++++++a Nanjing
++++++1014 161
++++++u Jinan
++++++1293
++++++u Miami
++++++918
++++++L
++++++R Johannesburg
++++++L
++++++L
++++++A Kuala Lumpur
++++++u Miami
++++++961
++++++R Atlanta
++++++A Ahmedabad
++++++A Istanbul
++++++u Baghdad
++++++732
++++++a New York City
++++++1256 182
++++++R Qingdao
++++++r Guadalajara
++++++385
++++++R Guadalajara
++++++s Surat
++++++463
++++++r Nanjing
++++++1014
++++++A Hangzhou
++++++A Lahore
++++++s Los Angeles
++++++1198
++++++R Seoul
++++++A Fukuoka
++++++A Foshan
++++++u Sao Paulo
++++++62
++++++L
++++++a Beijing
++++++9 165
++++++a Istanbul
++++++877 85
++++++R Kolkata
++++++R Foshan
++++++R Toronto
++++++a Barcelona
++++++1008 74
++++++s Sao Paulo
++++++1183
++++++A Shenzhen
++++++A Hong Kong
++++++A Shenzhen
++++++R Philadelphia
++++++u Toronto
++++++844
++++++R Nagoya
++++++a London
++++++599 14
++++++A Chengdu
++++++a Paris
++++++1063 129
++++++r Lima
++++++14
++++++L
++++++s Luanda
++++++1374
++++++a Tehran
++++++371 109
++++++r Miami
++++++918
++++++a New York City
++++++272 66
++++++L
++++++a Harbin
++++++633 24
++++++R Tehran
++++++A Khartoum
++++++a Shenzhen
++++++930 112
++++++a Istanbul
++++++1125 123
++++++u Qingdao
++++++782
++++++L
++++++R Shanghai
++++++s Osaka
++++++808
++++++a Baghdad
++++++658 29
++++++u Tianjin
++++++85
++++++r Atlanta
++++++321
++++++r Khartoum
++++++302
++++++A Los Angeles
++++++A Dhaka
++++++L
++++++s Qingdao
++++++660
++++++A Toronto
++++++u Luanda
++++++1041
++++++u Guadalajara
++++++195
++++++L
++++++a Hangzhou
++++++553 187
++++++s Fukuoka
++++++1256
++++++L
++++++L
++++++u Osaka
++++++799
+++++diff --git a/testMedium.txt b/testMedium.txt
+++++new file mode 100644
+++++index 0000000..3ddcea1
+++++--- /dev/null
++++++++ b/testMedium.txt
+++++@@ -0,0 +1,766 @@
++++++L
++++++A Manila
++++++A Jakarta
++++++A Saint Petersburg
++++++A Atlanta
++++++A Hong Kong
++++++A Philadelphia
++++++A Chicago
++++++A Foshan
++++++A Fukuoka
++++++A Chennai
++++++A Dallas
++++++A Guangzhou
++++++A Chengdu
++++++A Ho Chi Minh City
++++++A Bangkok
++++++A Nanjing
++++++A Moscow
++++++A Chengdu
++++++A Lahore
++++++A Philadelphia
++++++A Bogota
++++++A Pune
++++++A Suzhou
++++++A Dongguan
++++++A Paris
++++++A Chennai
++++++A Dongguan
++++++A Lima
++++++A Qingdao
++++++A Kolkata
++++++a Nanjing
++++++1262 198
++++++a Dongguan
++++++72 86
++++++a Foshan
++++++776 178
++++++a Bangkok
++++++1177 9
++++++a Saint Petersburg
++++++59 145
++++++a Pune
++++++925 113
++++++a Chicago
++++++155 192
++++++a Atlanta
++++++1400 4
++++++a Jakarta
++++++795 145
++++++a Atlanta
++++++1177 147
++++++a Suzhou
++++++93 109
++++++a Paris
++++++95 197
++++++a Nanjing
++++++916 142
++++++a Pune
++++++1133 134
++++++a Chennai
++++++307 49
++++++a Qingdao
++++++91 177
++++++a Dallas
++++++500 174
++++++a Atlanta
++++++457 94
++++++a Lima
++++++993 151
++++++a Chengdu
++++++1108 189
++++++a Fukuoka
++++++44 70
++++++a Paris
++++++1107 25
++++++a Lima
++++++1052 62
++++++a Guangzhou
++++++1410 160
++++++a Manila
++++++602 45
++++++a Nanjing
++++++1410 105
++++++a Guangzhou
++++++1211 170
++++++a Foshan
++++++1427 175
++++++a Fukuoka
++++++279 183
++++++a Philadelphia
++++++329 169
++++++a Moscow
++++++1385 5
++++++a Chennai
++++++1258 163
++++++a Chicago
++++++1304 114
++++++a Dongguan
++++++1221 26
++++++a Philadelphia
++++++182 26
++++++a Suzhou
++++++396 159
++++++a Chengdu
++++++524 33
++++++a Ho Chi Minh City
++++++869 63
++++++a Kolkata
++++++656 1
++++++a Atlanta
++++++246 41
++++++a Chengdu
++++++626 182
++++++a Saint Petersburg
++++++1133 134
++++++a Suzhou
++++++348 13
++++++a Chicago
++++++1337 18
++++++a Philadelphia
++++++1224 23
++++++a Fukuoka
++++++68 193
++++++a Philadelphia
++++++793 20
++++++a Saint Petersburg
++++++229 197
++++++a Bogota
++++++818 86
++++++a Chengdu
++++++826 46
++++++a Bangkok
++++++575 16
++++++a Paris
++++++101 180
++++++a Fukuoka
++++++406 174
++++++a Ho Chi Minh City
++++++1114 108
++++++a Lahore
++++++1163 131
++++++a Ho Chi Minh City
++++++118 111
++++++a Foshan
++++++333 156
++++++a Kolkata
++++++287 0
++++++a Lahore
++++++1263 28
++++++a Bogota
++++++980 116
++++++a Bogota
++++++1392 84
++++++a Suzhou
++++++111 84
++++++a Hong Kong
++++++726 56
++++++a Kolkata
++++++663 118
++++++a Saint Petersburg
++++++1369 41
++++++a Atlanta
++++++1138 89
++++++a Qingdao
++++++406 78
++++++a Lima
++++++1019 194
++++++a Kolkata
++++++1242 80
++++++a Foshan
++++++810 6
++++++a Atlanta
++++++936 36
++++++a Manila
++++++933 147
++++++a Ho Chi Minh City
++++++612 31
++++++a Bangkok
++++++1383 70
++++++a Kolkata
++++++324 94
++++++a Atlanta
++++++1318 62
++++++a Fukuoka
++++++1136 56
++++++a Atlanta
++++++348 41
++++++a Moscow
++++++1335 129
++++++a Manila
++++++1222 33
++++++a Chengdu
++++++1374 183
++++++a Foshan
++++++313 20
++++++a Philadelphia
++++++1211 143
++++++a Dongguan
++++++40 104
++++++a Atlanta
++++++539 85
++++++a Chicago
++++++756 22
++++++a Suzhou
++++++20 113
++++++a Kolkata
++++++172 34
++++++a Moscow
++++++1306 15
++++++a Qingdao
++++++465 13
++++++a Moscow
++++++921 144
++++++a Saint Petersburg
++++++1264 189
++++++a Bangkok
++++++965 179
++++++a Pune
++++++21 100
++++++a Saint Petersburg
++++++1227 183
++++++a Lahore
++++++752 15
++++++a Chicago
++++++643 117
++++++a Suzhou
++++++18 66
++++++a Guangzhou
++++++110 16
++++++a Dongguan
++++++1279 94
++++++s Jakarta
++++++802
++++++s Foshan
++++++787
++++++s Nanjing
++++++1263
++++++s Manila
++++++941
++++++s Lima
++++++1060
++++++s Chengdu
++++++1120
++++++s Qingdao
++++++99
++++++s Philadelphia
++++++329
++++++s Nanjing
++++++1266
++++++s Manila
++++++1235
++++++s Qingdao
++++++96
++++++s Atlanta
++++++257
++++++s Kolkata
++++++666
++++++s Kolkata
++++++663
++++++s Chengdu
++++++636
++++++s Ho Chi Minh City
++++++1120
++++++s Bogota
++++++1394
++++++s Lahore
++++++1171
++++++s Paris
++++++108
++++++s Ho Chi Minh City
++++++1120
++++++s Foshan
++++++342
++++++s Qingdao
++++++417
++++++s Chennai
++++++315
++++++s Foshan
++++++1431
++++++s Guangzhou
++++++1224
++++++s Nanjing
++++++928
++++++s Ho Chi Minh City
++++++1125
++++++s Kolkata
++++++338
++++++s Dongguan
++++++1281
++++++s Moscow
++++++1314
++++++s Foshan
++++++343
++++++s Dongguan
++++++1221
++++++s Paris
++++++1110
++++++s Bangkok
++++++1178
++++++s Manila
++++++1229
++++++s Ho Chi Minh City
++++++121
++++++s Paris
++++++109
++++++s Manila
++++++614
++++++s Foshan
++++++789
++++++s Ho Chi Minh City
++++++120
++++++s Jakarta
++++++803
++++++s Chicago
++++++770
++++++s Kolkata
++++++660
++++++s Moscow
++++++1335
++++++s Saint Petersburg
++++++1147
++++++s Philadelphia
++++++192
++++++s Nanjing
++++++916
++++++s Dallas
++++++514
++++++s Ho Chi Minh City
++++++626
++++++s Philadelphia
++++++1225
++++++s Saint Petersburg
++++++1377
++++++s Suzhou
++++++402
++++++s Bogota
++++++993
++++++s Chennai
++++++1271
++++++s Chennai
++++++307
++++++s Paris
++++++106
++++++s Moscow
++++++1318
++++++s Nanjing
++++++1267
++++++s Bogota
++++++991
++++++s Atlanta
++++++1139
++++++s Suzhou
++++++34
++++++s Paris
++++++104
++++++s Chennai
++++++1272
++++++s Ho Chi Minh City
++++++623
++++++s Dongguan
++++++1287
++++++s Saint Petersburg
++++++1372
++++++s Atlanta
++++++1142
++++++s Foshan
++++++320
++++++s Chicago
++++++1338
++++++s Jakarta
++++++803
++++++s Foshan
++++++816
++++++s Ho Chi Minh City
++++++122
++++++s Atlanta
++++++549
++++++s Dongguan
++++++83
++++++s Saint Petersburg
++++++70
++++++s Chengdu
++++++1384
++++++s Philadelphia
++++++796
++++++s Ho Chi Minh City
++++++1123
++++++s Atlanta
++++++248
++++++s Atlanta
++++++1147
++++++s Suzhou
++++++115
++++++s Dongguan
++++++72
++++++s Qingdao
++++++410
++++++s Chicago
++++++766
++++++s Philadelphia
++++++1221
++++++s Lima
++++++1005
++++++s Atlanta
++++++1146
++++++s Lima
++++++1003
++++++s Ho Chi Minh City
++++++1117
++++++s Paris
++++++109
++++++s Atlanta
++++++1190
++++++s Moscow
++++++1388
++++++s Kolkata
++++++666
++++++s Dallas
++++++506
++++++s Chennai
++++++314
++++++s Pune
++++++925
++++++s Lahore
++++++1274
++++++s Nanjing
++++++927
++++++s Philadelphia
++++++799
++++++s Dallas
++++++505
++++++s Hong Kong
++++++727
++++++s Moscow
++++++925
++++++s Qingdao
++++++417
++++++s Philadelphia
++++++336
++++++s Bangkok
++++++1178
++++++s Moscow
++++++1347
++++++s Atlanta
++++++540
++++++s Guangzhou
++++++122
++++++s Atlanta
++++++1323
++++++s Philadelphia
++++++1224
++++++s Fukuoka
++++++1140
++++++s Chicago
++++++167
++++++s Bogota
++++++1401
++++++s Foshan
++++++813
++++++s Bogota
++++++1403
++++++s Qingdao
++++++465
++++++s Atlanta
++++++469
++++++s Pune
++++++1133
++++++s Qingdao
++++++93
++++++s Moscow
++++++1316
++++++s Dongguan
++++++49
++++++s Suzhou
++++++23
++++++s Qingdao
++++++468
++++++s Kolkata
++++++335
++++++s Atlanta
++++++542
++++++s Kolkata
++++++666
++++++s Lima
++++++996
++++++s Foshan
++++++1441
++++++s Philadelphia
++++++184
++++++s Qingdao
++++++104
++++++s Atlanta
++++++1406
++++++s Foshan
++++++335
++++++s Atlanta
++++++256
++++++s Suzhou
++++++28
++++++s Lima
++++++1025
++++++s Saint Petersburg
++++++1277
++++++s Bogota
++++++987
++++++s Bogota
++++++981
++++++s Ho Chi Minh City
++++++623
++++++s Kolkata
++++++337
++++++s Bogota
++++++1398
++++++s Atlanta
++++++1145
++++++s Bangkok
++++++973
++++++s Manila
++++++940
++++++s Atlanta
++++++351
++++++s Ho Chi Minh City
++++++622
++++++s Kolkata
++++++667
++++++s Paris
++++++104
++++++s Chennai
++++++1265
++++++s Ho Chi Minh City
++++++881
++++++s Foshan
++++++1427
++++++s Guangzhou
++++++1225
++++++s Kolkata
++++++1251
++++++s Manila
++++++941
++++++s Jakarta
++++++808
++++++s Hong Kong
++++++736
++++++s Foshan
++++++1438
++++++s Dongguan
++++++1289
++++++s Saint Petersburg
++++++1370
++++++s Hong Kong
++++++737
++++++s Dongguan
++++++75
++++++s Philadelphia
++++++340
++++++s Suzhou
++++++118
++++++s Qingdao
++++++414
++++++s Bogota
++++++823
++++++s Chengdu
++++++828
++++++s Foshan
++++++317
++++++s Suzhou
++++++27
++++++s Saint Petersburg
++++++1379
++++++s Ho Chi Minh City
++++++618
++++++s Lahore
++++++766
++++++s Chicago
++++++1304
++++++s Bangkok
++++++1179
++++++s Manila
++++++609
++++++s Chengdu
++++++630
++++++s Paris
++++++1108
++++++s Kolkata
++++++662
++++++s Hong Kong
++++++732
++++++s Pune
++++++932
++++++s Chennai
++++++1258
++++++s Paris
++++++95
++++++s Pune
++++++938
++++++s Chengdu
++++++635
++++++s Paris
++++++1118
++++++s Ho Chi Minh City
++++++612
++++++s Ho Chi Minh City
++++++1117
++++++s Ho Chi Minh City
++++++612
++++++s Kolkata
++++++667
++++++s Chennai
++++++1266
++++++s Foshan
++++++782
++++++s Philadelphia
++++++330
++++++s Manila
++++++1227
++++++s Lahore
++++++1170
++++++s Guangzhou
++++++114
++++++s Foshan
++++++788
++++++s Guangzhou
++++++122
++++++s Atlanta
++++++544
++++++s Paris
++++++1113
++++++s Pune
++++++938
++++++s Dallas
++++++502
++++++A Jinan
++++++a Dallas
++++++368 9
++++++r Lahore
++++++1163
++++++A Guadalajara
++++++s Kolkata
++++++335
++++++R Saint Petersburg
++++++a Chicago
++++++1209 107
++++++L
++++++r Fukuoka
++++++44
++++++u Nanjing
++++++916
++++++R Hong Kong
++++++u Guangzhou
++++++1211
++++++s Atlanta
++++++946
++++++A Rio de Janeiro
++++++u Bangkok
++++++575
++++++s Saint Petersburg
++++++240
++++++a Paris
++++++47 91
++++++u Kolkata
++++++656
++++++a Rio de Janeiro
++++++344 21
++++++a Dongguan
++++++822 109
++++++a Jakarta
++++++301 168
++++++L
++++++R Kolkata
++++++L
++++++u Fukuoka
++++++406
++++++A Chennai
++++++r Jakarta
++++++301
++++++A Delhi
++++++L
++++++u Philadelphia
++++++329
++++++L
++++++a Suzhou
++++++410 59
++++++u Atlanta
++++++1177
++++++L
++++++a Suzhou
++++++1324 112
++++++R Jakarta
++++++R Chicago
++++++a Manila
++++++433 124
++++++a Bangkok
++++++1360 44
++++++A Dar es Salaam
++++++r Saint Petersburg
++++++1227
++++++u Dongguan
++++++40
++++++a Paris
++++++53 137
++++++a Dongguan
++++++477 27
++++++a Chennai
++++++1271 197
++++++R Qingdao
++++++r Bangkok
++++++1383
++++++a Chennai
++++++149 23
++++++L
++++++r Saint Petersburg
++++++229
++++++a Chennai
++++++283 168
++++++s Lima
++++++1021
++++++a Fukuoka
++++++273 11
++++++A Mexico City
++++++a Delhi
++++++1276 157
++++++a Ho Chi Minh City
++++++729 61
++++++u Suzhou
++++++20
++++++r Guangzhou
++++++1410
++++++L
++++++u Bogota
++++++980
++++++a Chengdu
++++++276 132
++++++a Rio de Janeiro
++++++590 30
++++++r Chicago
++++++1337
++++++s Saint Petersburg
++++++1369
++++++u Qingdao
++++++91
++++++u Ho Chi Minh City
++++++612
++++++R Pune
++++++s Dongguan
++++++484
++++++u Nanjing
++++++1410
++++++u Chengdu
++++++1108
++++++a Chennai
++++++341 192
++++++R Dallas
++++++s Dongguan
++++++75
++++++L
++++++a Ho Chi Minh City
++++++184 26
++++++r Ho Chi Minh City
++++++612
++++++r Ho Chi Minh City
++++++1114
++++++a Philadelphia
++++++1294 136
++++++L
++++++r Nanjing
++++++1262
+++++diff --git a/testSmall.txt b/testSmall.txt
+++++new file mode 100644
+++++index 0000000..f4ec80b
+++++--- /dev/null
++++++++ b/testSmall.txt
+++++@@ -0,0 +1,405 @@
++++++L
++++++A Barcelona
++++++A Surat
++++++A Hong Kong
++++++A Paris
++++++A Moscow
++++++A Chennai
++++++A Dalian
++++++A Dallas
++++++A Johannesburg
++++++A Santiago
++++++A Tehran
++++++A Country
++++++A Dalian
++++++A Madrid
++++++A Lima
++++++A Baghdad
++++++A London
++++++A Manila
++++++A Wuhan
++++++A Khartoum
++++++a Santiago
++++++1367 161
++++++a Hong Kong
++++++1264 40
++++++a Country
++++++689 165
++++++a Dalian
++++++1233 85
++++++a Surat
++++++852 188
++++++a Manila
++++++1204 151
++++++a Manila
++++++976 88
++++++a London
++++++52 159
++++++a London
++++++931 144
++++++a Baghdad
++++++971 50
++++++a Moscow
++++++391 42
++++++a Country
++++++404 93
++++++a Chennai
++++++277 87
++++++a Moscow
++++++877 194
++++++a Surat
++++++122 42
++++++a Baghdad
++++++1304 176
++++++a Baghdad
++++++291 159
++++++a Lima
++++++859 128
++++++a Manila
++++++1039 11
++++++a Wuhan
++++++1059 72
++++++a Dallas
++++++638 109
++++++a Lima
++++++1053 174
++++++a Dallas
++++++1344 172
++++++a Barcelona
++++++997 102
++++++a Moscow
++++++15 84
++++++a Moscow
++++++1256 57
++++++a Barcelona
++++++69 169
++++++a London
++++++848 77
++++++a Wuhan
++++++348 32
++++++a Surat
++++++146 190
++++++a Moscow
++++++374 85
++++++a Khartoum
++++++166 145
++++++a Manila
++++++1349 35
++++++a Country
++++++659 100
++++++a Dalian
++++++460 88
++++++a Dalian
++++++542 56
++++++a Paris
++++++298 48
++++++a Wuhan
++++++906 106
++++++a Chennai
++++++446 195
++++++a Khartoum
++++++755 86
++++++a Madrid
++++++255 162
++++++a Khartoum
++++++774 189
++++++a Manila
++++++753 82
++++++a Baghdad
++++++56 162
++++++a Dalian
++++++1259 196
++++++a Hong Kong
++++++97 2
++++++a Manila
++++++1084 43
++++++a Paris
++++++518 29
++++++a Moscow
++++++710 196
++++++a Tehran
++++++375 108
++++++a Chennai
++++++836 14
++++++a Santiago
++++++1186 103
++++++a Madrid
++++++815 186
++++++a Barcelona
++++++761 55
++++++a Paris
++++++1223 86
++++++a Hong Kong
++++++190 8
++++++a Manila
++++++1331 53
++++++a Country
++++++1277 0
++++++a Madrid
++++++269 7
++++++a Santiago
++++++94 189
++++++s Barcelona
++++++770
++++++s Wuhan
++++++1064
++++++s Santiago
++++++1375
++++++s Dalian
++++++1241
++++++s London
++++++851
++++++s Moscow
++++++718
++++++s London
++++++56
++++++s Hong Kong
++++++1273
++++++s Chennai
++++++841
++++++s Khartoum
++++++167
++++++s Surat
++++++853
++++++s Moscow
++++++1259
++++++s Baghdad
++++++984
++++++s Hong Kong
++++++102
++++++s Manila
++++++978
++++++s Madrid
++++++256
++++++s Barcelona
++++++1011
++++++s Dalian
++++++553
++++++s Dallas
++++++646
++++++s Wuhan
++++++354
++++++s London
++++++939
++++++s Barcelona
++++++769
++++++s Hong Kong
++++++1277
++++++s Santiago
++++++1187
++++++s Moscow
++++++393
++++++s Country
++++++661
++++++s Surat
++++++860
++++++s Manila
++++++1355
++++++s Country
++++++691
++++++s Moscow
++++++19
++++++s Country
++++++667
++++++s Manila
++++++977
++++++s Surat
++++++156
++++++s Barcelona
++++++1004
++++++s Dallas
++++++638
++++++s Moscow
++++++399
++++++s Dalian
++++++1264
++++++s Country
++++++1280
++++++s Wuhan
++++++907
++++++s Madrid
++++++828
++++++s Santiago
++++++1375
++++++s Paris
++++++311
++++++s Chennai
++++++456
++++++s Madrid
++++++825
++++++s Madrid
++++++823
++++++s Chennai
++++++460
++++++s London
++++++937
++++++s Baghdad
++++++1307
++++++s Wuhan
++++++349
++++++s Country
++++++691
++++++s Dalian
++++++550
++++++s Manila
++++++1353
++++++s Baghdad
++++++61
++++++s Moscow
++++++1256
++++++s Surat
++++++129
++++++s Khartoum
++++++172
++++++s Moscow
++++++882
++++++s Baghdad
++++++977
++++++s Surat
++++++134
++++++s Hong Kong
++++++1273
++++++s Country
++++++659
++++++s Khartoum
++++++777
++++++s Manila
++++++1040
++++++s Wuhan
++++++1059
++++++s Surat
++++++865
++++++s Country
++++++408
++++++s Baghdad
++++++973
++++++s Paris
++++++1226
++++++s Santiago
++++++100
++++++s Paris
++++++1227
++++++s London
++++++940
++++++s Moscow
++++++1269
++++++s Khartoum
++++++774
++++++s Barcelona
++++++69
++++++s Manila
++++++977
++++++s Wuhan
++++++354
++++++s London
++++++942
++++++s Barcelona
++++++763
++++++s Moscow
++++++18
++++++s Hong Kong
++++++204
++++++s Manila
++++++767
++++++s London
++++++56
++++++s Moscow
++++++386
++++++s Santiago
++++++108
++++++s Manila
++++++1339
++++++s Manila
++++++1040
++++++s Santiago
++++++1187
++++++s Country
++++++1288
++++++s Wuhan
++++++1062
++++++s Baghdad
++++++295
++++++s Madrid
++++++264
++++++s Chennai
++++++457
++++++s Surat
++++++866
++++++s Moscow
++++++378
++++++s Dalian
++++++1268
++++++s Manila
++++++1351
++++++s Dallas
++++++1354
++++++s Paris
++++++301
++++++s Manila
++++++976
++++++s Moscow
++++++398
++++++A Dongguan
++++++u Surat
++++++852
++++++R Barcelona
++++++A Osaka
++++++u Santiago
++++++1367
++++++s Dalian
++++++468
++++++r Baghdad
++++++56
++++++L
++++++a Madrid
++++++451 154
++++++A Country
++++++A Belo Horizonte
++++++r Baghdad
++++++291
++++++a Belo Horizonte
++++++1079 103
++++++L
++++++s Wuhan
++++++352
++++++r Baghdad
++++++1304
++++++r Surat
++++++146
++++++R Baghdad
++++++r Baghdad
++++++971
++++++s Manila
++++++989
++++++r Surat
++++++122
++++++u Dallas
++++++1344
++++++A Jakarta
++++++a Surat
++++++1137 83
++++++u Manila
++++++753
++++++s Lima
++++++865
++++++L
++++++s Dalian
++++++1241
++++++r Manila
++++++1204
++++++u Santiago
++++++1186
++++++A Dhaka
++++++L
++++++R Dongguan
++++++s Lima
++++++862
++++++s Moscow
++++++387
++++++L
++++++A London
++++++R Madrid
++++++a Jakarta
++++++261 84
++++++a Manila
++++++360 171
++++diff --git a/test.sh b/test.sh
++++index f8ecbf4..1753085 100755
++++--- a/test.sh
+++++++ b/test.sh
++++@@ -262,7 +262,7 @@ EOF
++++     echo "FAIL"
++++     [[ -n $VERBOSE ]] && echo "Your program produced:"
++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++-    [[ -n $VERBOSE ]] && echo "$answers"    
+++++    [[ -n $VERBOSE ]] && echo "$answer"    
++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++     [[ -n $VERBOSE ]] && echo "Output should have been:"
++++     [[ -n $VERBOSE ]] && echo "--------------------------"
++++
+++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++ Date:   Mon Sep 28 22:04:59 2020 -0400
+++
++ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Thu Oct 1 18:48:16 2020 -0400
++
+ commit da6661f7aace13f7460f1854b7f421ec09bce194
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Thu Oct 1 20:00:10 2020 -0400
+
 commit 1fc06886442458df6df848e0f90ac6e155b1d853
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Fri Oct 2 10:20:31 2020 -0400

commit af539dbaa08ca795fca0bfbcd28aaedc02d3d95d
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Oct 2 11:01:38 2020 -0400

    working on debugging

diff --git a/assignment-3.c b/assignment-3.c
index dceff55..09d6332 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -405,11 +405,6 @@ struct flight_schedule * flight_schedule_allocate(void){
   }
    flight_schedules_active = temp;
 
-
-
-
-
-
   /*
   flight_schedules_free-> prev->next = flight_schedules_active;
   
@@ -487,13 +482,17 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
     }
     temp = temp->next;
   }
-  return (temp);
+  return (temp); //this might return null 
 }
 
 
 void flight_schedule_add(city_t city){ //should this call get city
 
   //first cheeck to see if city exists
+  if (flight_schedules_free ==NULL){
+    msg_schedule_no_free();
+  }
+
   struct flight_schedule *fs = flight_schedule_find(city);
   if (fs != NULL)  {
     msg_city_exists(city);
@@ -547,14 +546,14 @@ void flight_schedule_add_flight(city_t city){
   
   if(time_get(t) == 0) { //or just t
     msg_flight_bad_time();      
-    return;
+    return; //maybe use go to end
    }
 
-  int *c;
-  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+  int c = 15;
+  flight_capacity_get(&c);  //this also has to be done as above to get appropraite io
   
-  if (flight_capacity_get(c) == 0){ //show message plane is full
-      msg_flight_no_seats();
+  if (flight_capacity_get(&c) == 0){ //show message plane is full
+      //msg_flight_no_seats();
       return;
   }
 
@@ -566,14 +565,14 @@ void flight_schedule_add_flight(city_t city){
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
     if(flights[i].time == -1){
       flights[i].time = *t;//was flights[i] will this change correct one?
-      flights[i].capacity = *c;
+      flights[i].capacity = c;
       break;
     }
   }
   //else return that it failed
+}
 
 
-}
 
 void flight_schedule_remove_flight(city_t city){
   struct flight_schedule *temp = flight_schedule_find(city);
@@ -584,9 +583,9 @@ void flight_schedule_remove_flight(city_t city){
    if(time_get(t) == 0) {
      return;
    }
-  int *c;
-  flight_capacity_get(c); 
-  if(flight_capacity_get(c) == 0){
+  int c =15;
+  flight_capacity_get(&c); 
+  if(flight_capacity_get(&c) == 0){
       return;
   }
   
@@ -612,6 +611,7 @@ void flight_schedule_schedule_seat(city_t city) {
   int *t;
   time_get(t);
   if(time_get(t) == 0) {
+     msg_flight_bad_time();
      return;
    }
 
diff --git a/gitlog.txt b/gitlog.txt
index 1364b9f..3fd9781 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4351 @@
+commit 1fc06886442458df6df848e0f90ac6e155b1d853
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Oct 2 10:20:31 2020 -0400
+
+    working on add_flight
+
+diff --git a/assignment-3.c b/assignment-3.c
+index e50b45e..dceff55 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
+ 
+ void flight_schedule_remove(city_t city){
+   struct flight_schedule *temp = flight_schedule_find(city);
++  if(temp == NULL){
++
++  }
+   flight_schedule_free(temp);
+ }
+ 
+@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
+ }
+ 
+ void flight_schedule_add_flight(city_t city){
+-  flight_schedule_add(city);
++  //flight_schedule_add(city);
+   struct flight_schedule *temp = flight_schedule_find(city);
+ 
+-
+   int *t;
+   time_get(t); //do this then check if t is 0 to see if valid or not 
+   
+   if(time_get(t) == 0) { //or just t
+-     return;
++    msg_flight_bad_time();      
++    return;
+    }
+ 
+   int *c;
+   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+   
+-  if (flight_capacity_get(c) == 0){
++  if (flight_capacity_get(c) == 0){ //show message plane is full
++      msg_flight_no_seats();
+       return;
+   }
+ 
+@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
+   int *c;
+   flight_capacity_get(c); 
+   if(flight_capacity_get(c) == 0){
+-
++      return;
+   }
+   
+   struct flight *flights;
+diff --git a/gitlog.txt b/gitlog.txt
+index 29ef0ec..1364b9f 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4286 @@
++commit da6661f7aace13f7460f1854b7f421ec09bce194
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Thu Oct 1 20:00:10 2020 -0400
++
++    fixed aloocate, add and list
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 6644548..e50b45e 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
++ //returns pointer to updated flight schedule
++ struct flight_schedule * flight_schedule_allocate(void){
++ 
++-  struct flight_schedule *temp;// =  flight_schedules_free;
+++  struct flight_schedule *temp =  flight_schedules_free;
+++  struct flight_schedule *fs;
+++  if (flight_schedules_free != NULL){
+++    flight_schedules_free = temp->next;
+++    flight_schedules_free->prev = NULL;
+++  }
+++
+++
+++  temp->next = flight_schedules_active;
+++  //if active not null set active prev to temp
+++  if(flight_schedules_active != NULL){
+++    flight_schedules_active->prev = temp;
+++  }
+++   flight_schedules_active = temp;
+++
+++
+++
+++
++ 
++ 
++-  flight_schedules_free = flight_schedules_free->next;
+++  /*
++   flight_schedules_free-> prev->next = flight_schedules_active;
++   
++   //temp->next = flight_schedules_active;
++@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
++ 
++   //flight_schedules_active = temp;
++   temp = flight_schedules_active;
+++  */
++   return(temp); //return temp?
++ }
++ 
++@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++ 
++   while(temp != NULL){
++     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++-      return(temp);
+++      break; //return(temp);
++     }
++     temp = temp->next;
++   }
+++  return (temp);
++ }
++ 
++ 
++ void flight_schedule_add(city_t city){ //should this call get city
+++
+++  //first cheeck to see if city exists
+++  struct flight_schedule *fs = flight_schedule_find(city);
+++  if (fs != NULL)  {
+++    msg_city_exists(city);
+++  }
+++
+++  if (fs == NULL){
++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++-  
++-  //if (flight_schedule_find == city)  {
++-  //  msg_city_exists(city);
++- // } //
++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++   
++   //p->destination = ch; 
++ 
+++  }
++ }
++ 
++ 
++@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
++ 
++ 
++ void flight_schedule_listAll(void){
++-  struct flight_schedule *temp = flight_schedules_active;
+++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
++   while(temp != NULL){
++-    printf("%p", temp); // print temp is disaplying memory address
+++    printf("%s\n", temp->destination); // print temp is disaplying memory address
++     temp = temp->next;
++   }
++ 
++ }
++ 
++ void flight_schedule_list(city_t city){
++-  struct flight_schedule *temp = flight_schedules_active;
+++  struct flight_schedule *temp = flight_schedules_active; 
++   while(temp != NULL){
++     if (strcmp(city,temp->destination) == 0){
++-      printf("%p", *temp); //displaying memory address
+++      printf("%s\n", temp->destination); //displaying memory address
++     }
++     temp = temp->next;
++   }
++diff --git a/gitlog.txt b/gitlog.txt
++index c3e37f7..29ef0ec 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -1,3 +1,4170 @@
+++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Thu Oct 1 18:48:16 2020 -0400
+++
+++    editing and debugging
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 881c536..6644548 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++ 
+++   // Loop through the Array connecting them
+++   // as a linear doubly linked list
++++  if (n == 1) {
++++    flight_schedule_reset(&array[0]);
++++    array[0].next = NULL;
++++    array[0].prev = NULL;
++++    flight_schedules_free = &array[0];
++++    return;
++++  }
++++
++++  flight_schedule_reset(&array[0]);
++++  array[0].next = &array[1];
+++   array[0].prev = NULL;
+++-  for (int i=0; i<n-1; i++) {
++++
++++  for (int i=1; i<n-1; i++) {
+++     flight_schedule_reset(&array[i]);
+++     array[i].next = &array[i+1];
+++-    array[i+1].prev = &array[i];
++++    array[i].prev = &array[i-1];
+++   }
++++
+++   // Takes care of last node.  
+++   flight_schedule_reset(&array[n-1]); // reset clears all fields
+++   array[n-1].next = NULL;
+++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
+++ //returns pointer to updated flight schedule
+++ struct flight_schedule * flight_schedule_allocate(void){
+++ 
+++-  struct flight_schedule *temp =  flight_schedules_free;
++++  struct flight_schedule *temp;// =  flight_schedules_free;
++++
++++
+++   flight_schedules_free = flight_schedules_free->next;
++++  flight_schedules_free-> prev->next = flight_schedules_active;
++++  
++++  //temp->next = flight_schedules_active;
++++  flight_schedules_active = flight_schedules_free->prev;
+++   flight_schedules_free->prev = NULL;
+++-  temp->next = flight_schedules_active;
+++-
+++-  flight_schedules_active = temp;
+++-  flight_schedules_active->next->prev = flight_schedules_active;
++++  
+++   //temp->prev = NULL;
+++   //struct flight_schedule *temp2 = flight_schedules_active
+++-  
+++-  return(flight_schedules_active);
++++
++++  if(flight_schedules_active -> next != NULL){
++++    flight_schedules_active->next->prev = flight_schedules_active;
++++  }
++++
++++  //flight_schedules_active = temp;
++++  temp = flight_schedules_active;
++++  return(temp); //return temp?
+++ }
+++ 
+++ //flight schedule free
+++ //takes schedule off active list, resets it, then places the node back on free list
+++ void flight_schedule_free(struct flight_schedule *fs){
+++-  int counter = 0;
++++  flight_schedules_active = flight_schedules_active->next;
++++  flight_schedule_reset(fs);
++++  fs->next = flight_schedules_free;
++++  flight_schedules_free = fs;
++++  fs->next->prev = fs;
++++
++++
++++  /*int counter = 0;
+++   struct flight_schedule *temp = flight_schedules_active;
+++   while(temp != NULL) {
+++     if(temp == fs){ //use flight schedule find instead
+++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     temp = temp->next;
+++     counter++;
+++   }
+++-  
+++   if (counter == 0){
+++     flight_schedules_active = temp->next;
+++     flight_schedules_active->prev = NULL;
+++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     //flight_schedule_reset(temp);
+++ 
+++   }
+++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++-    temp->prev->next = temp->next;
++++  else{ 
++++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
+++     temp->next->prev = temp->prev;
+++     temp->next = NULL;
+++     temp->prev = NULL;
+++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     flight_schedules_free = temp;
+++     flight_schedules_free->next->prev = flight_schedules_free;
+++   }
+++-  else{
+++-    temp->prev = NULL;
+++-    flight_schedules_active->prev->next = NULL;
+++-
+++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++-
+++-    temp->next = flight_schedules_free;
+++-    flight_schedules_free = temp;
+++-    flight_schedules_free->next->prev = flight_schedules_free;
+++-    
+++-  }
++++}
++++*/
+++ }
+++ 
+++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+++ void flight_schedule_add(city_t city){ //should this call get city
+++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++   
+++-  if (flight_schedule_find) {
+++-    msg_city_exists(city);
+++-  }
++++  //if (flight_schedule_find == city)  {
++++  //  msg_city_exists(city);
++++ // } //
+++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++   
+++   //p->destination = ch; 
+++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
+++ void flight_schedule_listAll(void){
+++   struct flight_schedule *temp = flight_schedules_active;
+++   while(temp != NULL){
+++-    printf("%p", &temp);
++++    printf("%p", temp); // print temp is disaplying memory address
+++     temp = temp->next;
+++   }
+++ 
+++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
+++   struct flight_schedule *temp = flight_schedules_active;
+++   while(temp != NULL){
+++     if (strcmp(city,temp->destination) == 0){
+++-      printf("%p", &temp);
++++      printf("%p", *temp); //displaying memory address
+++     }
+++     temp = temp->next;
+++   }
+++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
+++ 
+++   int *t;
+++   time_get(t); //do this then check if t is 0 to see if valid or not 
+++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++   
+++-  if (time == 1 || capacity == 1 ){
+++-      return 1;
++++  if(time_get(t) == 0) { //or just t
++++     return;
++++   }
++++
++++  int *c;
++++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++++  
++++  if (flight_capacity_get(c) == 0){
++++      return;
+++   }
+++ 
+++   struct flight *flights;
+++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++     if(flights[i].time == -1){
+++-      flights[i].time = time;//was flights[i] will this change correct one?
+++-      flights[i].capacity = capacity;
++++      flights[i].time = *t;//was flights[i] will this change correct one?
++++      flights[i].capacity = *c;
+++       break;
+++     }
+++   }
+++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++  //idk if this is the right time to call or even need too
+++ 
+++-
+++-
+++   int *t;
+++   time_get(t); //if 1 continue; else tell user
+++    if(time_get(t) == 0) {
+++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
+++    }
+++   int *c;
+++   flight_capacity_get(c); 
++++  if(flight_capacity_get(c) == 0){
++++
++++  }
+++   
+++   struct flight *flights;
+++   flights = temp->flights;
+++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
+++ 
+++   struct flight *flights;
+++   flights = temp->flights;
++++  int *t;
++++  time_get(t);
++++  if(time_get(t) == 0) {
++++     return;
++++   }
+++ 
+++-  int time = time_get();
+++   int nearest = 0;
+++   int position = 0;
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++-    if(flights[i].time >= time){
+++-      if(flights[i].time - nearest <= nearest - time){
++++    if(flights[i].time >= *t){
++++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
+++         nearest = flights[i].time;
+++         position = i;
+++       }
+++@@ -573,18 +602,21 @@ flights[position].available--;
+++   
+++ }
+++ 
+++-flight_schedule_unschedule_seat(city_t city){
++++ void flight_schedule_unschedule_seat(city_t city){
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++ 
+++   struct flight *flights;
+++   flights = temp->flights;
+++-
+++-  int time = time_get();
++++  int *t;
++++  time_get(t);
++++  if(time_get(t) == 0) {
++++     return;
++++   }
+++   int nearest = 0;
+++   int position = 0;
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++-    if(flights[i].time == time){
++++    if(flights[i].time == *t){ //origrinally was time 
+++      flights[i].available--;
+++     }
+++   }
+++diff --git a/gitlog.txt b/gitlog.txt
+++index e69de29..c3e37f7 100644
+++--- a/gitlog.txt
++++++ b/gitlog.txt
+++@@ -0,0 +1,3895 @@
++++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 22:04:59 2020 -0400
++++
++++    finshing up scheduling/unscheduling and debuggin
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 322ef6c..881c536 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
++++   flight_schedule_add(city);
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++ 
++++-  time_t time = time_get();
++++-  int capacity = flight_capacity_get();
+++++
+++++  int *t;
+++++  time_get(t); //do this then check if t is 0 to see if valid or not 
+++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++++   
++++   if (time == 1 || capacity == 1 ){
++++       return 1;
++++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
++++ 
++++ 
++++ 
++++-  time_t time = time_get();
++++-  int capacity = flight_capacity_get(); 
+++++  int *t;
+++++  time_get(t); //if 1 continue; else tell user
+++++   if(time_get(t) == 0) {
+++++     return;
+++++   }
+++++  int *c;
+++++  flight_capacity_get(c); 
++++   
++++   struct flight *flights;
++++   flights = temp->flights;
++++ 
++++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++-    if(flights[i].time == time){
+++++    if(flights[i].time == *t){
++++       flights[i].time = -1;//was flights[i] will this change correct one?
++++       flights[i].capacity = 0;  
++++       flights[i].available = 0;
++++
++++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 21:51:04 2020 -0400
++++
++++    schedule and unschedule seat
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 6db86b9..322ef6c 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
++++ 
++++ 
++++ void flight_schedule_schedule_seat(city_t city) {
+++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++
+++++  struct flight *flights;
+++++  flights = temp->flights;
+++++
+++++  int time = time_get();
+++++  int nearest = 0;
+++++  int position = 0;
+++++
+++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++    if(flights[i].time >= time){
+++++      if(flights[i].time - nearest <= nearest - time){
+++++        nearest = flights[i].time;
+++++        position = i;
+++++      }
+++++    }
+++++  }
+++++flights[position].available--;
++++   
++++-}
++++\ No newline at end of file
+++++}
+++++
+++++flight_schedule_unschedule_seat(city_t city){
+++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++
+++++  struct flight *flights;
+++++  flights = temp->flights;
+++++
+++++  int time = time_get();
+++++  int nearest = 0;
+++++  int position = 0;
+++++
+++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++    if(flights[i].time == time){
+++++     flights[i].available--;
+++++    }
+++++  }
+++++}
+++++
++++
++++commit 4490dcc205f2959c8fa299368be096d99f756e27
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 21:23:54 2020 -0400
++++
++++    continuing work on add and remove flights
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index d9c99ff..6db86b9 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
++++   flight_schedule_add(city);
++++   struct flight_schedule *temp = flight_schedule_find(city);
++++ 
++++-  int time = time_get();
+++++  time_t time = time_get();
++++   int capacity = flight_capacity_get();
++++   
++++   if (time == 1 || capacity == 1 ){
++++       return 1;
++++   }
++++ 
++++-  temp->flight->flights[];
+++++  struct flight *flights;
+++++  flights = temp->flights;
+++++  //flights[i]
+++++  //loop thru flights until open flight then add flight
++++ 
+++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++    if(flights[i].time == -1){
+++++      flights[i].time = time;//was flights[i] will this change correct one?
+++++      flights[i].capacity = capacity;
+++++      break;
+++++    }
+++++  }
+++++  //else return that it failed
+++++
+++++
+++++}
+++++
+++++void flight_schedule_remove_flight(city_t city){
+++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++ //idk if this is the right time to call or even need too
++++ 
++++ 
+++++
+++++  time_t time = time_get();
+++++  int capacity = flight_capacity_get(); 
+++++  
+++++  struct flight *flights;
+++++  flights = temp->flights;
+++++
+++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++++    if(flights[i].time == time){
+++++      flights[i].time = -1;//was flights[i] will this change correct one?
+++++      flights[i].capacity = 0;  
+++++      flights[i].available = 0;
+++++      break;
+++++    }
+++++  }
++++ }
+++++
+++++
+++++void flight_schedule_schedule_seat(city_t city) {
+++++  
+++++}
++++\ No newline at end of file
++++
++++commit e41186f0b9058ea4390a8f0fda78296861580f31
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 20:05:28 2020 -0400
++++
++++    updates to add_flight
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index aae10c7..d9c99ff 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
++++   }
++++ }
++++ 
++++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++++   struct flight_schedule *temp = flight_schedules_active;
+++++
++++   while(temp != NULL){
++++-    if (strcmp(city,temp->destination) == 0){
+++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++++       return(temp);
++++     }
++++     temp = temp->next;
++++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++ }
++++ 
++++ 
+++++void flight_schedule_add(city_t city){ //should this call get city
+++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++++  
+++++  if (flight_schedule_find) {
+++++    msg_city_exists(city);
+++++  }
+++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++++  
+++++  //p->destination = ch; 
+++++
+++++}
+++++
+++++
+++++void flight_schedule_remove(city_t city){
+++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++  flight_schedule_free(temp);
+++++}
+++++
+++++
+++++
+++++void flight_schedule_listAll(void){
+++++  struct flight_schedule *temp = flight_schedules_active;
+++++  while(temp != NULL){
+++++    printf("%p", &temp);
+++++    temp = temp->next;
+++++  }
+++++
+++++}
+++++
+++++void flight_schedule_list(city_t city){
+++++  struct flight_schedule *temp = flight_schedules_active;
+++++  while(temp != NULL){
+++++    if (strcmp(city,temp->destination) == 0){
+++++      printf("%p", &temp);
+++++    }
+++++    temp = temp->next;
+++++  }
+++++}
+++++
+++++void flight_schedule_add_flight(city_t city){
+++++  flight_schedule_add(city);
+++++  struct flight_schedule *temp = flight_schedule_find(city);
+++++
+++++  int time = time_get();
+++++  int capacity = flight_capacity_get();
+++++  
+++++  if (time == 1 || capacity == 1 ){
+++++      return 1;
+++++  }
+++++
+++++  temp->flight->flights[];
+++++
+++++
+++++
+++++}
++++
++++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 18:35:40 2020 -0400
++++
++++    correction of free, working on find
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index a03a0af..aae10c7 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++   int counter = 0;
++++   struct flight_schedule *temp = flight_schedules_active;
++++   while(temp != NULL) {
++++-    if(temp == fs){
+++++    if(temp == fs){ //use flight schedule find instead
++++       break;
++++     }
++++     temp = temp->next;
++++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     flight_schedule_reset(temp);
++++ 
++++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++-    flight_schedule_free = temp;
+++++    flight_schedules_free = temp;
++++     flight_schedules_free->next->prev = flight_schedules_free;
++++     //flight_schedule_reset(temp);
++++ 
++++   }
++++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++++     temp->prev->next = temp->next;
++++     temp->next->prev = temp->prev;
++++     temp->next = NULL;
++++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     flight_schedule_reset(temp);
++++ 
++++     temp->next = flight_schedules_free;
++++-    flight_schedule_free = temp;
+++++    flight_schedules_free = temp;
++++     flight_schedules_free->next->prev = flight_schedules_free;
++++   }
++++   else{
++++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
++++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++ 
++++     temp->next = flight_schedules_free;
++++-    flight_schedule_free = temp;
+++++    flight_schedules_free = temp;
++++     flight_schedules_free->next->prev = flight_schedules_free;
++++     
++++   }
++++-}
++++\ No newline at end of file
+++++}
+++++
+++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++++  struct flight_schedule *temp = flight_schedules_active;
+++++  while(temp != NULL){
+++++    if (strcmp(city,temp->destination) == 0){
+++++      return(temp);
+++++    }
+++++    temp = temp->next;
+++++  }
+++++}
+++++
+++++
++++
++++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 15:08:53 2020 -0400
++++
++++    working on flight_schedule_free
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 1f30cd1..a03a0af 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
++++ //flight schedule free
++++ //takes schedule off active list, resets it, then places the node back on free list
++++ void flight_schedule_free(struct flight_schedule *fs){
++++-  struct flight_schedule *temp = flight
+++++  int counter = 0;
+++++  struct flight_schedule *temp = flight_schedules_active;
+++++  while(temp != NULL) {
+++++    if(temp == fs){
+++++      break;
+++++    }
+++++    temp = temp->next;
+++++    counter++;
+++++  }
+++++  
+++++  if (counter == 0){
+++++    flight_schedules_active = temp->next;
+++++    flight_schedules_active->prev = NULL;
+++++    temp->next = NULL;
+++++
+++++    flight_schedule_reset(temp);
+++++
+++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++++    flight_schedule_free = temp;
+++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++    //flight_schedule_reset(temp);
+++++
+++++  }
+++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++++    temp->prev->next = temp->next;
+++++    temp->next->prev = temp->prev;
+++++    temp->next = NULL;
+++++    temp->prev = NULL;
+++++
+++++    flight_schedule_reset(temp);
+++++
+++++    temp->next = flight_schedules_free;
+++++    flight_schedule_free = temp;
+++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++  }
+++++  else{
+++++    temp->prev = NULL;
+++++    flight_schedules_active->prev->next = NULL;
+++++
+++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++++
+++++    temp->next = flight_schedules_free;
+++++    flight_schedule_free = temp;
+++++    flight_schedules_free->next->prev = flight_schedules_free;
+++++    
+++++  }
++++ }
++++\ No newline at end of file
++++
++++commit 4da1a4230cc78e7821817c597d531316ac1feee4
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Mon Sep 28 14:12:10 2020 -0400
++++
++++    correcting allocate
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index ec71f49..1f30cd1 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
++++ //returns pointer to updated flight schedule
++++ struct flight_schedule * flight_schedule_allocate(void){
++++ 
++++-  struct flight_schedule temp = 
+++++  struct flight_schedule *temp =  flight_schedules_free;
+++++  flight_schedules_free = flight_schedules_free->next;
+++++  flight_schedules_free->prev = NULL;
+++++  temp->next = flight_schedules_active;
+++++
+++++  flight_schedules_active = temp;
+++++  flight_schedules_active->next->prev = flight_schedules_active;
+++++  //temp->prev = NULL;
+++++  //struct flight_schedule *temp2 = flight_schedules_active
++++   
++++-  
++++-  
++++-  *flight_schedules_active = *flight_schedules_free->free;
++++-
++++-  
++++-  //flight_schedules_active = flight_schedules_free;
++++-  *flight_schedules_free = *flight_schedules_free->next;
++++-  *flight_schedules_free->prev = NULL;
++++-  return(flight_schedules_active->flights[]);
+++++  return(flight_schedules_active);
++++ }
++++ 
++++ //flight schedule free
++++ //takes schedule off active list, resets it, then places the node back on free list
++++ void flight_schedule_free(struct flight_schedule *fs){
++++-  
+++++  struct flight_schedule *temp = flight
++++ }
++++\ No newline at end of file
++++
++++commit 7c7197814c779e696458438563f16bc76b197fb2
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Fri Sep 25 18:25:04 2020 -0400
++++
++++    very confused, trying to use pointers to alt sched
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index ff89d23..ec71f49 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
++++   return (af->time - bf->time);
++++ }
++++ 
++++-WRITE SOME CODE!
+++++//WRITE SOME CODE!
++++ //flight schedule allocate
+++++//takes a schedule off the free list and places it on the active list
+++++//returns pointer to updated flight schedule
++++ struct flight_schedule * flight_schedule_allocate(void){
++++-  *flight_schedules_active = *flight_schedules_free;
++++-  *flight_schedules_free = *flight_schedules_free.next;
++++-  return(flight_schedule);
++++-}
++++ 
+++++  struct flight_schedule temp = 
+++++  
+++++  
+++++  
+++++  *flight_schedules_active = *flight_schedules_free->free;
++++ 
+++++  
+++++  //flight_schedules_active = flight_schedules_free;
+++++  *flight_schedules_free = *flight_schedules_free->next;
+++++  *flight_schedules_free->prev = NULL;
+++++  return(flight_schedules_active->flights[]);
+++++}
++++ 
++++ //flight schedule free
++++-
+++++//takes schedule off active list, resets it, then places the node back on free list
++++ void flight_schedule_free(struct flight_schedule *fs){
++++-  *flight_schedule_active = *flight_schedule_free;
++++-  *fs = 
+++++  
++++ }
++++\ No newline at end of file
++++
++++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
++++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++++Date:   Fri Sep 25 12:05:56 2020 -0400
++++
++++    starting work on first 3 helper functions
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 31abde4..ff89d23 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
++++ }
++++ 
++++ WRITE SOME CODE!
+++++//flight schedule allocate
+++++struct flight_schedule * flight_schedule_allocate(void){
+++++  *flight_schedules_active = *flight_schedules_free;
+++++  *flight_schedules_free = *flight_schedules_free.next;
+++++  return(flight_schedule);
+++++}
+++++
+++++
+++++
+++++//flight schedule free
+++++
+++++void flight_schedule_free(struct flight_schedule *fs){
+++++  *flight_schedule_active = *flight_schedule_free;
+++++  *fs = 
+++++}
++++\ No newline at end of file
++++
++++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++Date:   Thu Sep 24 18:32:49 2020 -0400
++++
++++    An update to assignment-3. Fix to assignment-3.c and new refence binary
++++
++++diff --git a/assignment-3.c b/assignment-3.c
++++index 2f5c360..31abde4 100644
++++--- a/assignment-3.c
+++++++ b/assignment-3.c
++++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++ // Structure to hold all the information for a single flight
++++ //   A city's schedule has an array of these
++++ struct flight {
++++-  int time;       // departure time of the flight
+++++  time_t time;       // departure time of the flight
++++   int available;  // number of seats currently available on the flight
++++   int capacity;   // maximum seat capacity of the flight
++++ };
++++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++++     array[i+1].prev = &array[i];
++++   }
++++   // Takes care of last node.  
++++-  // Its prev pointer will be set in the loop,
++++-  // we just have to set its next to NULL.
+++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
++++   array[n-1].next = NULL;
+++++  array[n-1].prev = &array[n-2];
++++   flight_schedules_free = &array[0];
++++ }
++++ 
++++diff --git a/reference b/reference
++++index ee9132a..b11f6c6 100755
++++Binary files a/reference and b/reference differ
++++
++++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
++++Author: Jonathan Appavoo <jappavoo@bu.edu>
++++Date:   Mon Sep 21 21:02:39 2020 -0400
++++
++++    Initial Commit to seed assignment 3. Have fun!
++++
++++diff --git a/.gitignore b/.gitignore
++++new file mode 100644
++++index 0000000..8ff04a2
++++--- /dev/null
+++++++ b/.gitignore
++++@@ -0,0 +1,4 @@
+++++*
+++++!assignment-3.c
+++++!gitlog.txt
+++++
++++diff --git a/.vscode/launch.json b/.vscode/launch.json
++++new file mode 100644
++++index 0000000..5f223b9
++++--- /dev/null
+++++++ b/.vscode/launch.json
++++@@ -0,0 +1,30 @@
+++++{
+++++    // Use IntelliSense to learn about possible attributes.
+++++    // Hover to view descriptions of existing attributes.
+++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+++++    "version": "0.2.0",
+++++    "configurations": [
+++++    
+++++
+++++        {
+++++            "name": "(gdb) Launch",
+++++            "type": "cppdbg",
+++++            "request": "launch",
+++++            "program": "${workspaceFolder}/assignment-3",
+++++            "args": [],
+++++            "stopAtEntry": true,
+++++            "cwd": "${workspaceFolder}",
+++++            "environment": [],
+++++            "externalConsole": false,
+++++            "MIMode": "gdb",
+++++            "setupCommands": [
+++++                {
+++++                    "description": "Enable pretty-printing for gdb",
+++++                    "text": "-enable-pretty-printing",
+++++                    "ignoreFailures": true
+++++                }
+++++            ],
+++++            "preLaunchTask": "Build"
+++++        }
+++++    ]
+++++}
++++diff --git a/.vscode/settings.json b/.vscode/settings.json
++++new file mode 100644
++++index 0000000..495436f
++++--- /dev/null
+++++++ b/.vscode/settings.json
++++@@ -0,0 +1,21 @@
+++++{
+++++    "git.ignoreLegacyWarning": true,
+++++    "files.autoSave": "afterDelay",
+++++    "files.exclude": {
+++++        ".vscode": true,
+++++        "**/*.o": true,
+++++        "reference": true,
+++++        "assignment-3": true,
+++++        "test.sh":true,
+++++        "gitlog.txt":true,
+++++        ".gitignore":true
+++++    },
+++++    "editor.renderControlCharacters": true,
+++++    "C_Cpp.default.cStandard": "c99",
+++++    "C_Cpp.default.cppStandard": "gnu++11",
+++++    "C_Cpp.default.defines": [],
+++++    "C_Cpp.intelliSenseEngine": "Disabled",
+++++    "C_Cpp.workspaceParsingPriority": "low",
+++++    "C_Cpp.intelliSenseCacheSize": 100,
+++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
+++++}
++++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
++++new file mode 100644
++++index 0000000..d02618f
++++--- /dev/null
+++++++ b/.vscode/tasks.json
++++@@ -0,0 +1,28 @@
+++++{
+++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
+++++    // for the documentation about the tasks.json format
+++++    "version": "2.0.0",
+++++    "tasks": [
+++++        {
+++++            "label": "Build",
+++++            "type": "shell",
+++++            "command": "make",
+++++            "options": {
+++++                "cwd": "${workspaceFolder}"
+++++            },
+++++            "group": {
+++++                "kind": "build",
+++++                "isDefault": true
+++++            },
+++++            "presentation": {
+++++                "reveal": "always",
+++++                "panel": "shared"
+++++            },
+++++            "problemMatcher": {
+++++                "base": "$gcc",
+++++                "fileLocation": ["relative", "${workspaceRoot}/"]
+++++            }
+++++        }
+++++        
+++++    ]
+++++}
++++diff --git a/Makefile b/Makefile
++++new file mode 100644
++++index 0000000..1c3a3d1
++++--- /dev/null
+++++++ b/Makefile
++++@@ -0,0 +1,69 @@
+++++.PHONY: all clean test gitlog
+++++
+++++all: assignment-3
+++++
+++++assignment-3: assignment-3.c
+++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
+++++
+++++test: assignment-3 gitlog
+++++	./test.sh
+++++
+++++test1: assignment-3
+++++	./test.sh 1
+++++
+++++test2: assignment-3
+++++	./test.sh 2
+++++
+++++test3: assignment-3
+++++	./test.sh 3
+++++
+++++test4: assignment-3
+++++	./test.sh 4
+++++
+++++test5: assignment-3
+++++	./test.sh 5
+++++
+++++test6: assignment-3
+++++	./test.sh 6
+++++
+++++test7: assignment-3
+++++	./test.sh 7
+++++
+++++test8: assignment-3
+++++	./test.sh 8
+++++
+++++test9: assignment-3
+++++	./test.sh 9
+++++
+++++test10: assignment-3
+++++	./test.sh 10
+++++
+++++test11: assignment-3
+++++	./test.sh 11
+++++
+++++test12: assignment-3
+++++	./test.sh 12
+++++
+++++test13: assignment-3
+++++	./test.sh 13
+++++
+++++test14: assignment-3
+++++	./test.sh 14
+++++
+++++test15: assignment-3
+++++	./test.sh 15
+++++
+++++test16: assignment-3
+++++	./test.sh 16
+++++
+++++bonus1: assignment-3
+++++	./test.sh 1 bonus
+++++
+++++bonus2: assignment-3
+++++	./test.sh 2 bonus
+++++
+++++gitlog:
+++++	git log -p > gitlog.txt
+++++
+++++clean:
+++++	-${RM} assignment-3
++++diff --git a/assignment-3.c b/assignment-3.c
++++new file mode 100644
++++index 0000000..2f5c360
++++--- /dev/null
+++++++ b/assignment-3.c
++++@@ -0,0 +1,375 @@
+++++/**
+++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
+++++ *  Let's use our knowledge to write a simple flight management system!
+++++ **/
+++++
+++++#include <stdio.h>
+++++#include <string.h>
+++++#include <stdlib.h>
+++++#include <stdbool.h>
+++++#include <assert.h>
+++++
+++++// Limit constants
+++++#define MAX_CITY_NAME_LEN 20
+++++#define MAX_FLIGHTS_PER_CITY 5
+++++#define MAX_DEFAULT_SCHEDULES 50
+++++
+++++// Time definitions
+++++#define TIME_MIN 0
+++++#define TIME_MAX ((60 * 24)-1)
+++++#define TIME_NULL -1
+++++
+++++
+++++/******************************************************************************
+++++ * Structure and Type definitions                                             *
+++++ ******************************************************************************/
+++++typedef int time_t;                        // integers used for time values
+++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++++ 
+++++// Structure to hold all the information for a single flight
+++++//   A city's schedule has an array of these
+++++struct flight {
+++++  int time;       // departure time of the flight
+++++  int available;  // number of seats currently available on the flight
+++++  int capacity;   // maximum seat capacity of the flight
+++++};
+++++
+++++// Structure for an individual flight schedule
+++++// The main data structure of the program is an Array of these structures
+++++// Each structure will be placed on one of two linked lists:
+++++//                free or active
+++++// Initially the active list will be empty and all the schedules
+++++// will be on the free list.  Adding a schedule is finding the first
+++++// free schedule on the free list, removing it from the free list,
+++++// setting its destination city and putting it on the active list
+++++struct flight_schedule {
+++++  city_t destination;                          // destination city name
+++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
+++++  struct flight_schedule *next;                // link list next pointer
+++++  struct flight_schedule *prev;                // link list prev pointer
+++++};
+++++
+++++/******************************************************************************
+++++ * Global / External variables                                                *
+++++ ******************************************************************************/
+++++// This program uses two global linked lists of Schedules.  See comments
+++++// of struct flight_schedule above for details
+++++struct flight_schedule *flight_schedules_free = NULL;
+++++struct flight_schedule *flight_schedules_active = NULL;
+++++
+++++
+++++/******************************************************************************
+++++ * Function Prototypes                                                        *
+++++ ******************************************************************************/
+++++// Misc utility io functions
+++++int city_read(city_t city);           
+++++bool time_get(time_t *time_ptr);      
+++++bool flight_capacity_get(int *capacity_ptr);
+++++void print_command_help(void);
+++++
+++++// Core functions of the program
+++++void flight_schedule_initialize(struct flight_schedule array[], int n);
+++++struct flight_schedule * flight_schedule_find(city_t city);
+++++struct flight_schedule * flight_schedule_allocate(void);
+++++void flight_schedule_free(struct flight_schedule *fs);
+++++void flight_schedule_add(city_t city);
+++++void flight_schedule_listAll(void);
+++++void flight_schedule_list(city_t city);
+++++void flight_schedule_add_flight(city_t city);
+++++void flight_schedule_remove_flight(city_t city);
+++++void flight_schedule_schedule_seat(city_t city);
+++++void flight_schedule_unschedule_seat(city_t city);
+++++void flight_schedule_remove(city_t city);
+++++
+++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
+++++int  flight_compare_time(const void *a, const void *b);
+++++
+++++
+++++int main(int argc, char *argv[]) 
+++++{
+++++  long n = MAX_DEFAULT_SCHEDULES;
+++++  char command;
+++++  city_t city;
+++++
+++++  if (argc > 1) {
+++++    // If the program was passed an argument then try and convert the first
+++++    // argument in the a number that will override the default max number
+++++    // of schedule we will support
+++++    char *end;
+++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
+++++    if (n==0) {
+++++      printf("ERROR: Bad number of default max scedules specified.\n");
+++++      exit(EXIT_FAILURE);
+++++    }
+++++  }
+++++
+++++  // C99 lets us allocate an array of a fixed length as a local 
+++++  // variable.  Since we are doing this in main and a call to main will be 
+++++  // active for the entire time of the program's execution this
+++++  // array will be alive for the entire time -- its memory and values
+++++  // will be stable for the entire program execution.
+++++  struct flight_schedule flight_schedules[n];
+++++ 
+++++  // Initialize our global lists of free and active schedules using
+++++  // the elements of the flight_schedules array
+++++  flight_schedule_initialize(flight_schedules, n);
+++++
+++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
+++++  //  When possible, if we know that some particular thing should have happened
+++++  //  we think of that as an assertion and write code to test them.
+++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
+++++  // the free list to a non-null value and the the active list is a null value.
+++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
+++++
+++++  // Print the instruction in the beginning
+++++  print_command_help();
+++++
+++++  // Command processing loop
+++++  while (scanf(" %c", &command) == 1) {
+++++    switch (command) {
+++++    case 'A': 
+++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
+++++      city_read(city);
+++++      flight_schedule_add(city);
+++++
+++++      break;
+++++    case 'L':
+++++      // List all active flight schedules eg. "L\n"
+++++      flight_schedule_listAll();
+++++      break;
+++++    case 'l': 
+++++      // List the flights for a particular city eg. "l\n"
+++++      city_read(city);
+++++      flight_schedule_list(city);
+++++      break;
+++++    case 'a':
+++++      // Adds a flight for a particular city "a Toronto\n
+++++      //                                      360 100\n"
+++++      city_read(city);
+++++      flight_schedule_add_flight(city);
+++++      break;
+++++    case 'r':
+++++      // Remove a flight for a particular city "r Toronto\n
+++++      //                                        360\n"
+++++      city_read(city);
+++++      flight_schedule_remove_flight(city);
+++++	break;
+++++    case 's':
+++++      // schedule a seat on a flight for a particular city "s Toronto\n
+++++      //                                                    300\n"
+++++      city_read(city);
+++++      flight_schedule_schedule_seat(city);
+++++      break;
+++++    case 'u':
+++++      // unschedule a seat on a flight for a particular city "u Toronto\n
+++++      //                                                      360\n"
+++++        city_read(city);
+++++        flight_schedule_unschedule_seat(city);
+++++        break;
+++++    case 'R':
+++++      // remove the schedule for a particular city "R Toronto\n"
+++++      city_read(city);
+++++      flight_schedule_remove(city);  
+++++      break;
+++++    case 'h':
+++++        print_command_help();
+++++        break;
+++++    case 'q':
+++++      goto done;
+++++    default:
+++++      printf("Bad command. Use h to see help.\n");
+++++    }
+++++  }
+++++ done:
+++++  return EXIT_SUCCESS;
+++++}
+++++
+++++/**********************************************************************
+++++ * city_read: Takes in and processes a given city following a command *
+++++ *********************************************************************/
+++++int city_read(city_t city) {
+++++  int ch, i=0;
+++++
+++++  // skip leading non letter characters
+++++  while (true) {
+++++    ch = getchar();
+++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
+++++      city[i++] = ch;
+++++      break;
+++++    }
+++++  }
+++++  while ((ch = getchar()) != '\n') {
+++++    if (i < MAX_CITY_NAME_LEN) {
+++++      city[i++] = ch;
+++++    }
+++++  }
+++++  city[i] = '\0';
+++++  return i;
+++++}
+++++
+++++
+++++/****************************************************************
+++++ * Message functions so that your messages match what we expect *
+++++ ****************************************************************/
+++++void msg_city_bad(char *city) {
+++++  printf("No schedule for %s\n", city);
+++++}
+++++
+++++void msg_city_exists(char *city) {
+++++  printf("There is a schedule of %s already.\n", city);
+++++}
+++++
+++++void msg_schedule_no_free(void) {
+++++  printf("Sorry no more free schedules.\n");
+++++}
+++++
+++++void msg_city_flights(char *city) {
+++++  printf("The flights for %s are:", city);
+++++}
+++++
+++++void msg_flight_info(int time, int avail, int capacity) {
+++++  printf(" (%d, %d, %d)", time, avail, capacity);
+++++}
+++++
+++++void msg_city_max_flights_reached(char *city) {
+++++  printf("Sorry we cannot add more flights on this city.\n");
+++++}
+++++
+++++void msg_flight_bad_time(void) {
+++++  printf("Sorry there's no flight scheduled on this time.\n");
+++++}
+++++
+++++void msg_flight_no_seats(void) {
+++++    printf("Sorry there's no more seats available!\n");
+++++}
+++++
+++++void msg_flight_all_seats_empty(void) {
+++++  printf("All the seats on this flights are empty!\n");
+++++}
+++++
+++++void msg_time_bad() {
+++++  printf("Invalid time value\n");
+++++}
+++++
+++++void msg_capacity_bad() {
+++++  printf("Invalid capacity value\n");
+++++}
+++++
+++++void print_command_help()
+++++{
+++++  printf("Here are the possible commands:\n"
+++++	 "A <city name>     - Add an active empty flight schedule for\n"
+++++	 "                    <city name>\n"
+++++	 "L                 - List cities which have an active schedule\n"
+++++	 "l <city name>     - List the flights for <city name>\n"
+++++	 "a <city name>\n"
+++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
+++++	 "                    with <capacity> seats\n"  
+++++	 "r <city name>\n"
+++++         "<time>            - Remove a flight form <city name> whose time is\n"
+++++	 "                    <time>\n"
+++++	 "s <city name>\n"
+++++	 "<time>            - Attempt to schedule seat on flight to \n"
+++++	 "                    <city name> at <time> or next closest time on\n"
+++++	 "                    which their is an available seat\n"
+++++	 "u <city name>\n"
+++++	 "<time>            - unschedule a seat from flight to <city name>\n"
+++++	 "                    at <time>\n"
+++++	 "R <city name>     - Remove schedule for <city name>\n"
+++++	 "h                 - print this help message\n"
+++++	 "q                 - quit\n"
+++++);
+++++}
+++++
+++++
+++++/****************************************************************
+++++ * Resets a flight schedule                                     *
+++++ ****************************************************************/
+++++void flight_schedule_reset(struct flight_schedule *fs) {
+++++    fs->destination[0] = 0;
+++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
+++++      fs->flights[i].time = TIME_NULL;
+++++      fs->flights[i].available = 0;
+++++      fs->flights[i].capacity = 0;
+++++    }
+++++    fs->next = NULL;
+++++    fs->prev = NULL;
+++++}
+++++
+++++/******************************************************************
+++++* Initializes the flight_schedule array that will hold any flight *
+++++* schedules created by the user. This is called in main for you.  *
+++++ *****************************************************************/
+++++
+++++void flight_schedule_initialize(struct flight_schedule array[], int n)
+++++{
+++++  flight_schedules_active = NULL;
+++++  flight_schedules_free = NULL;
+++++
+++++  // takes care of empty array case
+++++  if (n==0) return;
+++++
+++++  // Loop through the Array connecting them
+++++  // as a linear doubly linked list
+++++  array[0].prev = NULL;
+++++  for (int i=0; i<n-1; i++) {
+++++    flight_schedule_reset(&array[i]);
+++++    array[i].next = &array[i+1];
+++++    array[i+1].prev = &array[i];
+++++  }
+++++  // Takes care of last node.  
+++++  // Its prev pointer will be set in the loop,
+++++  // we just have to set its next to NULL.
+++++  array[n-1].next = NULL;
+++++  flight_schedules_free = &array[0];
+++++}
+++++
+++++/***********************************************************
+++++ * time_get: read a time from the user
+++++   Time in this program is a minute number 0-((24*60)-1)=1439
+++++   -1 is used to indicate the NULL empty time 
+++++   This function should read in a time value and check its 
+++++   validity.  If it is not valid eg. not -1 or not 0-1439
+++++   It should print "Invalid Time" and return false.
+++++   othewise it should return the value in the integer pointed
+++++   to by time_ptr.
+++++ ***********************************************************/
+++++bool time_get(int *time_ptr) {
+++++  if (scanf("%d", time_ptr)==1) {
+++++    return (TIME_NULL == *time_ptr || 
+++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
+++++  } 
+++++  msg_time_bad();
+++++  return false;
+++++}
+++++
+++++/***********************************************************
+++++ * flight_capacity_get: read the capacity of a flight from the user
+++++   This function should read in a capacity value and check its 
+++++   validity.  If it is not greater than 0, it should print 
+++++   "Invalid capacity value" and return false. Othewise it should 
+++++   return the value in the integer pointed to by cap_ptr.
+++++ ***********************************************************/
+++++bool flight_capacity_get(int *cap_ptr) {
+++++  if (scanf("%d", cap_ptr)==1) {
+++++    return *cap_ptr > 0;
+++++  }
+++++  msg_capacity_bad();
+++++  return false;
+++++}
+++++
+++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
+++++{
+++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
+++++	flight_compare_time);
+++++}
+++++
+++++int flight_compare_time(const void *a, const void *b) 
+++++{
+++++  const struct flight *af = a;
+++++  const struct flight *bf = b;
+++++  
+++++  return (af->time - bf->time);
+++++}
+++++
+++++WRITE SOME CODE!
++++diff --git a/gitlog.txt b/gitlog.txt
++++new file mode 100644
++++index 0000000..e69de29
++++diff --git a/reference b/reference
++++new file mode 100755
++++index 0000000..ee9132a
++++Binary files /dev/null and b/reference differ
++++diff --git a/test.sh b/test.sh
++++new file mode 100755
++++index 0000000..f8ecbf4
++++--- /dev/null
+++++++ b/test.sh
++++@@ -0,0 +1,328 @@
+++++#!/bin/bash
+++++#set -x
+++++
+++++REFERENCE=./reference
+++++PGM=./assignment-3
+++++
+++++# To add a test you can add an element the REQUIRED arrays 
+++++# or BONUS Arrays
+++++# Each test can have a descripttion, input and optionally a num
+++++# num is passed as the argument on the command line to set
+++++# the default max schedule size
+++++
+++++# Required tests
+++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
+++++REQUIRED_INPUT[0]="L
+++++A Toronto
+++++L"
+++++
+++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
+++++REQUIRED_INPUT[1]="L
+++++A Toronto
+++++l Toronto
+++++a Toronto
+++++1000 5
+++++l Toronto"
+++++
+++++REQUIRED_NUM[2]="2"
+++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
+++++REQUIRED_INPUT[2]="L
+++++A City1
+++++A City2
+++++L
+++++A City3
+++++L"
+++++
+++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
+++++REQUIRED_INPUT[3]="A Naples
+++++A Addis Ababa
+++++L
+++++R Naples
+++++L"
+++++
+++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
+++++REQUIRED_INPUT[4]="A San Jose
+++++a San Jose
+++++360 100
+++++l San Jose
+++++r San Jose
+++++360
+++++l San Jose"
+++++
+++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
+++++REQUIRED_INPUT[5]="A Hanoi
+++++r Hanoi
+++++100"
+++++
+++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
+++++REQUIRED_INPUT[6]="A Cartagena
+++++a Cartagena
+++++720 100
+++++a Cartagena
+++++840 120
+++++s Cartagena
+++++480
+++++l Cartagena"
+++++
+++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
+++++REQUIRED_INPUT[7]="L
+++++A Abu Dhabi
+++++a Abu Dhabi
+++++360 50
+++++a Abu Dhabi
+++++840 100
+++++s Abu Dhabi
+++++700
+++++l Abu Dhabi
+++++u Abu Dhabi
+++++840
+++++l Abu Dhabi"
+++++
+++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
+++++REQUIRED_INPUT[8]="L
+++++A Belgrade
+++++a Belgrade
+++++400 1
+++++s Belgrade
+++++400
+++++l Belgrade
+++++s Belgrade
+++++400
+++++l Belgrade"
+++++
+++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
+++++REQUIRED_INPUT[9]="L
+++++A Kyoto
+++++a Kyoto
+++++300 5
+++++l Kyoto
+++++u Kyoto
+++++300
+++++l Kyoto"
+++++
+++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
+++++REQUIRED_INPUT[10]="L
+++++A Mumbai
+++++a Mumbai
+++++900 3
+++++l Mumbai
+++++u Mumbai
+++++300
+++++l Mumbai"
+++++
+++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
+++++REQUIRED_INPUT[11]="L
+++++A Prague
+++++a Prague
+++++360 5
+++++a Prague
+++++720 100
+++++l Prague
+++++s Prague
+++++900
+++++l Prague"
+++++
+++++REQUIRED_NUM[12]="2"
+++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
+++++REQUIRED_INPUT[12]="L
+++++A City1
+++++L
+++++A City2
+++++L
+++++A City3
+++++L
+++++R City1
+++++L
+++++R City2
+++++L
+++++R City3
+++++L
+++++A City1
+++++L"
+++++
+++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
+++++REQUIRED_INPUT[13]="L
+++++A City1
+++++a City1
+++++60 5
+++++l City1
+++++a City1
+++++120 5
+++++l City1
+++++a City1
+++++180 5
+++++l City1
+++++a City1
+++++240 5
+++++l City1
+++++a City1
+++++300 5
+++++l City1
+++++a City1
+++++360 5
+++++l City1
+++++r City1
+++++360
+++++l City1
+++++r City1
+++++300
+++++l City1
+++++r City1
+++++240
+++++l City1
+++++r City1
+++++180
+++++l City1
+++++r City1
+++++120
+++++l City1
+++++r City1
+++++60
+++++l City1
+++++a City1
+++++60 5
+++++l City1"
+++++
+++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
+++++REQUIRED_INPUT[14]="L
+++++A City1
+++++a City1
+++++60 3
+++++l City1
+++++s City1
+++++60
+++++l City1
+++++s City1
+++++60
+++++l City1
+++++s City1
+++++60
+++++l City1
+++++s City1
+++++60
+++++l City1
+++++u City1
+++++60
+++++l City1
+++++u City1
+++++60
+++++l City1
+++++u City1
+++++60
+++++l City1
+++++u City1
+++++60
+++++l City1"
+++++
+++++REQUIRED_DESC[15]="Required 16: A bigger test "
+++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
+++++REQUIRED_VALUE[15]=5
+++++
+++++
+++++# Bonus tests
+++++BONUS_DESC[0]="Bonus 1: Medium sized test"
+++++BONUS_INPUT[0]="$(cat testMedium.txt)"
+++++BONUS_VALUE[0]=3
+++++
+++++BONUS_DESC[1]="Bonus 2: Large sized test"
+++++BONUS_INPUT[1]="$(cat testBig.txt)"
+++++BONUS_VALUE[1]=5
+++++
+++++
+++++function run_test()
+++++{
+++++   description="$1"
+++++   input="$2"
+++++   num="$3"
+++++
+++++   echo -n "$description : "
+++++   [[ -n $VERBOSE ]] &&  echo "Input:"
+++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++   [[ -n $VERBOSE ]] &&  echo "$input"
+++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++++
+++++   solution=$($REFERENCE $num <<EOF
+++++$input
+++++EOF
+++++)
+++++
+++++   answer=$($PGM $num<<EOF
+++++$input
+++++EOF
+++++)
+++++
+++++  if [[ -n $DEBUG ]]; then
+++++      echo "$solution"
+++++  else
+++++    if [[ "$answer" == "$solution" ]]; then
+++++       echo "PASS"
+++++       return 0
+++++    fi
+++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
+++++    echo "FAIL"
+++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
+++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++    [[ -n $VERBOSE ]] && echo "$answers"    
+++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
+++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++    [[ -n $VERBOSE ]] && echo "$solution"
+++++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++++    [[ -n $VERBOSE ]] && echo ""
+++++  fi
+++++  return 1
+++++}
+++++
+++++testnum=$1
+++++type=$2
+++++
+++++total=0
+++++correct=0
+++++
+++++if [[ -z $testnum ]]; then
+++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
+++++	value="${REQUIRED_VALUE[$i]}"
+++++	[[ -z $value ]] && value=1
+++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++	    (( correct += $value ))
+++++	fi
+++++	(( total += value ))
+++++    done
+++++    
+++++    
+++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
+++++	value="${BONUS_VALUE[$i]}"
+++++	[[ -z $value ]] && value=1
+++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++	    (( correct += $value ))
+++++	fi
+++++    done
+++++else
+++++    VERBOSE=1
+++++    (( i=$testnum - 1 ))
+++++    if [[ -z "$type" ]]; then
+++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
+++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
+++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
+++++	    exit -1
+++++	fi
+++++	value="${REQUIRED_VALUE[$i]}"
+++++	[[ -z $value ]] && value=1
+++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++++	    (( correct += $value ))
+++++	fi
+++++	(( total += value ))
+++++    else
+++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
+++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
+++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
+++++	    exit -1
+++++	fi	
+++++	value="${BONUS_VALUE[$i]}"
+++++	[[ -z $value ]] && value=1
+++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++++         (( correct += $value ))
+++++	fi
+++++    fi
+++++fi
+++++echo "score: ${correct}/${total}"
++++diff --git a/testBig.txt b/testBig.txt
++++new file mode 100644
++++index 0000000..90170d5
++++--- /dev/null
+++++++ b/testBig.txt
++++@@ -0,0 +1,1251 @@
+++++L
+++++A Qingdao
+++++A Paris
+++++A Lima
+++++A Los Angeles
+++++A Khartoum
+++++A Barcelona
+++++A Santiago
+++++A Tokyo
+++++A Delhi
+++++A Guangzhou
+++++A Johannesburg
+++++A Paris
+++++A Dhaka
+++++A Chennai
+++++A Jinan
+++++A Luanda
+++++A Surat
+++++A Hyderabad
+++++A Beijing
+++++A Atlanta
+++++A Chennai
+++++A Dar es Salaam
+++++A Osaka
+++++A Hong Kong
+++++A Toronto
+++++A Saint Petersburg
+++++A Manila
+++++A Washington, D.C.
+++++A Tehran
+++++A Miami
+++++A Khartoum
+++++A Seoul
+++++A Dar es Salaam
+++++A Sao Paulo
+++++A Baghdad
+++++A Guadalajara
+++++A Ahmedabad
+++++A Moscow
+++++A Philadelphia
+++++A Fukuoka
+++++a Tokyo
+++++1414 113
+++++a Guadalajara
+++++385 170
+++++a Qingdao
+++++782 37
+++++a Ahmedabad
+++++1411 50
+++++a Los Angeles
+++++517 84
+++++a Tehran
+++++86 61
+++++a Osaka
+++++1289 162
+++++a Barcelona
+++++1261 158
+++++a Fukuoka
+++++550 191
+++++a Seoul
+++++207 1
+++++a Manila
+++++364 96
+++++a Khartoum
+++++56 194
+++++a Tokyo
+++++98 1
+++++a Saint Petersburg
+++++1330 107
+++++a Baghdad
+++++15 15
+++++a Chennai
+++++1169 127
+++++a Beijing
+++++807 97
+++++a Seoul
+++++1134 34
+++++a Jinan
+++++220 102
+++++a Dhaka
+++++122 101
+++++a Luanda
+++++1342 71
+++++a Guadalajara
+++++195 35
+++++a Fukuoka
+++++28 37
+++++a Beijing
+++++678 83
+++++a Khartoum
+++++947 39
+++++a Hyderabad
+++++490 104
+++++a Sao Paulo
+++++62 83
+++++a Baghdad
+++++1319 24
+++++a Delhi
+++++718 115
+++++a Baghdad
+++++204 114
+++++a Surat
+++++430 74
+++++a Miami
+++++918 87
+++++a Surat
+++++455 95
+++++a Fukuoka
+++++1077 131
+++++a Luanda
+++++311 21
+++++a Seoul
+++++1132 155
+++++a Lima
+++++432 177
+++++a Surat
+++++494 102
+++++a Washington, D.C.
+++++667 12
+++++a Hong Kong
+++++200 55
+++++a Los Angeles
+++++1195 4
+++++a Ahmedabad
+++++610 161
+++++a Delhi
+++++508 110
+++++a Atlanta
+++++17 21
+++++a Washington, D.C.
+++++162 23
+++++a Luanda
+++++1216 15
+++++a Tokyo
+++++1095 117
+++++a Philadelphia
+++++1436 117
+++++a Atlanta
+++++277 164
+++++a Manila
+++++720 147
+++++a Tokyo
+++++1017 25
+++++a Jinan
+++++76 66
+++++a Toronto
+++++844 84
+++++a Santiago
+++++7 115
+++++a Surat
+++++388 55
+++++a Tehran
+++++836 174
+++++a Paris
+++++371 110
+++++a Sao Paulo
+++++516 113
+++++a Luanda
+++++1041 174
+++++a Dhaka
+++++1076 34
+++++a Guadalajara
+++++162 144
+++++a Los Angeles
+++++424 33
+++++a Philadelphia
+++++565 167
+++++a Luanda
+++++1411 44
+++++a Osaka
+++++1005 82
+++++a Fukuoka
+++++1253 194
+++++a Atlanta
+++++141 102
+++++a Fukuoka
+++++1119 112
+++++a Toronto
+++++782 150
+++++a Dhaka
+++++1006 96
+++++a Miami
+++++961 126
+++++a Lima
+++++360 41
+++++a Lima
+++++14 50
+++++a Dhaka
+++++1028 191
+++++a Philadelphia
+++++502 115
+++++a Washington, D.C.
+++++1380 59
+++++a Atlanta
+++++548 113
+++++a Fukuoka
+++++694 183
+++++a Saint Petersburg
+++++261 26
+++++a Jinan
+++++196 53
+++++a Delhi
+++++315 78
+++++a Delhi
+++++625 92
+++++a Ahmedabad
+++++105 98
+++++a Philadelphia
+++++111 15
+++++a Atlanta
+++++321 31
+++++a Ahmedabad
+++++1244 59
+++++a Osaka
+++++799 173
+++++a Khartoum
+++++302 7
+++++a Luanda
+++++823 190
+++++a Chennai
+++++754 139
+++++a Los Angeles
+++++1028 78
+++++a Miami
+++++1123 183
+++++a Dar es Salaam
+++++1353 102
+++++a Beijing
+++++473 88
+++++a Paris
+++++698 95
+++++a Barcelona
+++++545 170
+++++a Chennai
+++++382 85
+++++a Miami
+++++821 114
+++++a Luanda
+++++584 161
+++++a Fukuoka
+++++38 26
+++++a Jinan
+++++536 148
+++++a Manila
+++++1403 133
+++++a Washington, D.C.
+++++917 130
+++++a Sao Paulo
+++++1169 81
+++++a Santiago
+++++689 42
+++++a Ahmedabad
+++++279 30
+++++a Los Angeles
+++++881 35
+++++a Jinan
+++++1293 148
+++++a Guangzhou
+++++1366 38
+++++a Santiago
+++++317 123
+++++a Tokyo
+++++454 104
+++++a Atlanta
+++++626 177
+++++a Surat
+++++69 135
+++++a Luanda
+++++1426 19
+++++a Barcelona
+++++879 46
+++++a Los Angeles
+++++1329 90
+++++a Beijing
+++++402 60
+++++a Lima
+++++727 161
+++++a Hyderabad
+++++601 186
+++++a Khartoum
+++++294 183
+++++a Hyderabad
+++++267 131
+++++a Manila
+++++771 102
+++++a Osaka
+++++103 68
+++++a Atlanta
+++++848 147
+++++a Atlanta
+++++811 179
+++++a Toronto
+++++402 131
+++++a Guadalajara
+++++804 28
+++++a Qingdao
+++++16 114
+++++a Beijing
+++++1218 14
+++++a Moscow
+++++498 195
+++++a Surat
+++++528 48
+++++a Manila
+++++865 4
+++++a Guangzhou
+++++328 24
+++++a Dhaka
+++++227 50
+++++a Manila
+++++124 91
+++++a Philadelphia
+++++218 104
+++++a Dar es Salaam
+++++209 34
+++++a Chennai
+++++641 179
+++++a Barcelona
+++++1433 171
+++++a Lima
+++++957 60
+++++a Dhaka
+++++1292 111
+++++a Qingdao
+++++647 40
+++++a Khartoum
+++++417 3
+++++a Tehran
+++++751 180
+++++a Barcelona
+++++778 118
+++++a Luanda
+++++204 59
+++++a Ahmedabad
+++++541 34
+++++a Ahmedabad
+++++539 33
+++++a Los Angeles
+++++824 193
+++++a Tehran
+++++1412 39
+++++s Luanda
+++++1418
+++++s Toronto
+++++857
+++++s Lima
+++++22
+++++s Tehran
+++++100
+++++s Washington
+++++175
+++++s Dhaka
+++++132
+++++s Jinan
+++++90
+++++s Beijing
+++++812
+++++s Barcelona
+++++1268
+++++s Dhaka
+++++228
+++++s Dhaka
+++++229
+++++s Osaka
+++++1295
+++++s Los Angeles
+++++527
+++++s Ahmedabad
+++++620
+++++s Tokyo
+++++461
+++++s Luanda
+++++588
+++++s Tehran
+++++1420
+++++s Jinan
+++++228
+++++s Hyderabad
+++++497
+++++s Manila
+++++879
+++++s Delhi
+++++720
+++++s Surat
+++++442
+++++s Lima
+++++21
+++++s Delhi
+++++630
+++++s Tehran
+++++836
+++++s Dhaka
+++++1042
+++++s Atlanta
+++++558
+++++s Khartoum
+++++300
+++++s Luanda
+++++1050
+++++s Lima
+++++445
+++++s Hong Kong
+++++213
+++++s Delhi
+++++318
+++++s Manila
+++++725
+++++s Dhaka
+++++1300
+++++s Tokyo
+++++1028
+++++s Lima
+++++23
+++++s Qingdao
+++++24
+++++s Ahmedabad
+++++542
+++++s Barcelona
+++++1274
+++++s Santiago
+++++7
+++++s Surat
+++++467
+++++s Chennai
+++++392
+++++s Fukuoka
+++++551
+++++s Fukuoka
+++++704
+++++s Fukuoka
+++++34
+++++s Fukuoka
+++++1131
+++++s Ahmedabad
+++++541
+++++s Philadelphia
+++++566
+++++s Surat
+++++506
+++++s Khartoum
+++++952
+++++s Guadalajara
+++++389
+++++s Tokyo
+++++1031
+++++s Baghdad
+++++24
+++++s Khartoum
+++++307
+++++s Lima
+++++370
+++++s Atlanta
+++++812
+++++s Sao Paulo
+++++1176
+++++s Manila
+++++1411
+++++s Khartoum
+++++294
+++++s Seoul
+++++1148
+++++s Guadalajara
+++++814
+++++s Khartoum
+++++314
+++++s Manila
+++++1410
+++++s Khartoum
+++++302
+++++s Philadelphia
+++++230
+++++s Lima
+++++728
+++++s Ahmedabad
+++++548
+++++s Fukuoka
+++++1121
+++++s Baghdad
+++++206
+++++s Ahmedabad
+++++1424
+++++s Santiago
+++++11
+++++s Lima
+++++364
+++++s Manila
+++++128
+++++s Tokyo
+++++460
+++++s Surat
+++++469
+++++s Barcelona
+++++1274
+++++s Guadalajara
+++++816
+++++s Guadalajara
+++++811
+++++s Luanda
+++++597
+++++s Atlanta
+++++852
+++++s Guadalajara
+++++811
+++++s Manila
+++++1409
+++++s Miami
+++++918
+++++s Luanda
+++++593
+++++s Barcelona
+++++1440
+++++s Dhaka
+++++132
+++++s Lima
+++++363
+++++s Ahmedabad
+++++1251
+++++s Los Angeles
+++++521
+++++s Fukuoka
+++++38
+++++s Beijing
+++++686
+++++s Fukuoka
+++++1126
+++++s Guadalajara
+++++196
+++++s Baghdad
+++++206
+++++s Los Angeles
+++++522
+++++s Ahmedabad
+++++553
+++++s Ahmedabad
+++++1416
+++++s Philadelphia
+++++113
+++++s Dar es Salaam
+++++217
+++++s Lima
+++++958
+++++s Tehran
+++++752
+++++s Washington
+++++680
+++++s Tehran
+++++756
+++++s Khartoum
+++++299
+++++s Dhaka
+++++1084
+++++s Manila
+++++878
+++++s Ahmedabad
+++++541
+++++s Ahmedabad
+++++119
+++++s Ahmedabad
+++++616
+++++s Tehran
+++++756
+++++s Tehran
+++++765
+++++s Philadelphia
+++++569
+++++s Ahmedabad
+++++283
+++++s Washington
+++++1387
+++++s Saint Petersburg
+++++274
+++++s Dhaka
+++++1037
+++++s Philadelphia
+++++506
+++++s Luanda
+++++593
+++++s Philadelphia
+++++232
+++++s Dhaka
+++++233
+++++s Baghdad
+++++1329
+++++s Chennai
+++++768
+++++s Barcelona
+++++546
+++++s Sao Paulo
+++++529
+++++s Jinan
+++++543
+++++s Philadelphia
+++++121
+++++s Tehran
+++++759
+++++s Lima
+++++964
+++++s Miami
+++++923
+++++s Los Angeles
+++++1195
+++++s Jinan
+++++200
+++++s Jinan
+++++224
+++++s Beijing
+++++1220
+++++s Lima
+++++368
+++++s Philadelphia
+++++1436
+++++s Tehran
+++++95
+++++s Miami
+++++928
+++++s Baghdad
+++++1326
+++++s Beijing
+++++483
+++++s Qingdao
+++++647
+++++s Fukuoka
+++++42
+++++s Los Angeles
+++++1033
+++++s Los Angeles
+++++836
+++++s Osaka
+++++1010
+++++s Manila
+++++865
+++++s Miami
+++++825
+++++s Barcelona
+++++553
+++++s Tehran
+++++757
+++++s Jinan
+++++88
+++++s Luanda
+++++1355
+++++s Saint Petersburg
+++++266
+++++s Surat
+++++459
+++++s Philadelphia
+++++576
+++++s Philadelphia
+++++1441
+++++s Paris
+++++709
+++++s Manila
+++++734
+++++s Toronto
+++++785
+++++s Manila
+++++135
+++++s Lima
+++++368
+++++s Lima
+++++967
+++++s Delhi
+++++731
+++++s Beijing
+++++403
+++++s Santiago
+++++692
+++++s Tehran
+++++1416
+++++s Dar es Salaam
+++++1358
+++++s Seoul
+++++1134
+++++s Philadelphia
+++++579
+++++s Guangzhou
+++++342
+++++s Osaka
+++++116
+++++s Guadalajara
+++++397
+++++s Dhaka
+++++1040
+++++s Toronto
+++++793
+++++s Qingdao
+++++25
+++++s Baghdad
+++++1332
+++++s Osaka
+++++1017
+++++s Los Angeles
+++++1338
+++++s Ahmedabad
+++++551
+++++s Guangzhou
+++++331
+++++s Tehran
+++++1420
+++++s Dar es Salaam
+++++215
+++++s Tokyo
+++++462
+++++s Atlanta
+++++859
+++++s Fukuoka
+++++554
+++++s Ahmedabad
+++++1423
+++++s Jinan
+++++229
+++++s Dhaka
+++++1294
+++++s Ahmedabad
+++++1250
+++++s Ahmedabad
+++++621
+++++s Delhi
+++++626
+++++s Manila
+++++129
+++++s Luanda
+++++204
+++++s Surat
+++++440
+++++s Atlanta
+++++22
+++++s Ahmedabad
+++++1251
+++++s Khartoum
+++++302
+++++s Surat
+++++73
+++++s Guadalajara
+++++209
+++++s Manila
+++++721
+++++s Toronto
+++++793
+++++s Dar es Salaam
+++++216
+++++s Manila
+++++785
+++++s Ahmedabad
+++++116
+++++s Barcelona
+++++548
+++++s Dhaka
+++++1041
+++++s Khartoum
+++++305
+++++s Los Angeles
+++++1208
+++++s Dhaka
+++++1079
+++++s Tokyo
+++++1422
+++++s Manila
+++++722
+++++s Osaka
+++++1298
+++++s Surat
+++++431
+++++s Khartoum
+++++294
+++++s Barcelona
+++++1445
+++++s Luanda
+++++589
+++++s Chennai
+++++645
+++++s Luanda
+++++835
+++++s Manila
+++++773
+++++s Fukuoka
+++++1256
+++++s Dhaka
+++++1300
+++++s Philadelphia
+++++230
+++++s Philadelphia
+++++571
+++++s Hong Kong
+++++209
+++++s Khartoum
+++++419
+++++s Paris
+++++706
+++++s Sao Paulo
+++++516
+++++s Tehran
+++++843
+++++s Khartoum
+++++429
+++++s Khartoum
+++++66
+++++s Guadalajara
+++++815
+++++s Khartoum
+++++63
+++++s Guadalajara
+++++397
+++++s Baghdad
+++++218
+++++s Saint Petersburg
+++++274
+++++s Dar es Salaam
+++++1359
+++++s Lima
+++++439
+++++s Khartoum
+++++312
+++++s Luanda
+++++1345
+++++s Seoul
+++++220
+++++s Tokyo
+++++1020
+++++s Atlanta
+++++25
+++++s Sao Paulo
+++++1179
+++++s Manila
+++++732
+++++s Philadelphia
+++++122
+++++s Manila
+++++723
+++++s Baghdad
+++++205
+++++s Osaka
+++++1018
+++++s Tehran
+++++762
+++++s Luanda
+++++1412
+++++s Toronto
+++++845
+++++s Qingdao
+++++24
+++++s Surat
+++++528
+++++s Chennai
+++++385
+++++s Ahmedabad
+++++542
+++++s Philadelphia
+++++1447
+++++s Lima
+++++733
+++++s Guadalajara
+++++205
+++++s Delhi
+++++326
+++++s Chennai
+++++754
+++++s Atlanta
+++++823
+++++s Manila
+++++377
+++++s Khartoum
+++++303
+++++s Delhi
+++++512
+++++s Surat
+++++498
+++++s Guadalajara
+++++165
+++++s Manila
+++++720
+++++s Washington
+++++170
+++++s Hyderabad
+++++280
+++++s Lima
+++++370
+++++s Tokyo
+++++98
+++++s Toronto
+++++854
+++++s Ahmedabad
+++++618
+++++s Toronto
+++++858
+++++s Tehran
+++++1421
+++++s Qingdao
+++++783
+++++s Barcelona
+++++784
+++++s Santiago
+++++690
+++++s Fukuoka
+++++1082
+++++s Jinan
+++++232
+++++s Chennai
+++++385
+++++s Paris
+++++710
+++++s Tokyo
+++++1427
+++++s Chennai
+++++754
+++++s Miami
+++++920
+++++s Toronto
+++++407
+++++s Guadalajara
+++++806
+++++s Miami
+++++923
+++++s Philadelphia
+++++226
+++++s Manila
+++++720
+++++s Manila
+++++133
+++++s Toronto
+++++852
+++++s Barcelona
+++++886
+++++s Sao Paulo
+++++68
+++++s Delhi
+++++630
+++++s Los Angeles
+++++428
+++++s Washington
+++++917
+++++s Atlanta
+++++322
+++++s Atlanta
+++++549
+++++s Manila
+++++137
+++++s Miami
+++++1135
+++++s Guadalajara
+++++399
+++++A Dar es Salaam
+++++a Qingdao
+++++1015 95
+++++u Toronto
+++++402
+++++A Lagos
+++++L
+++++a Qingdao
+++++910 139
+++++R Dar es Salaam
+++++r Washington
+++++917
+++++u Osaka
+++++103
+++++R Tokyo
+++++a Baghdad
+++++309 68
+++++L
+++++R Jinan
+++++L
+++++s Washington
+++++170
+++++L
+++++R Hyderabad
+++++r Lima
+++++727
+++++u Khartoum
+++++302
+++++A Nagoya
+++++u Los Angeles
+++++1329
+++++a Luanda
+++++1364 38
+++++r Philadelphia
+++++1436
+++++A Johannesburg
+++++A New York City
+++++a Los Angeles
+++++270 149
+++++A Los Angeles
+++++R Manila
+++++r Beijing
+++++473
+++++A Beijing
+++++r Tokyo
+++++1414
+++++a Lima
+++++1003 11
+++++r Dhaka
+++++227
+++++s Fukuoka
+++++38
+++++s Moscow
+++++499
+++++u Delhi
+++++508
+++++r Jinan
+++++220
+++++L
+++++a Qingdao
+++++314 81
+++++s Manila
+++++878
+++++a Sao Paulo
+++++457 134
+++++L
+++++R Hong Kong
+++++A Nagoya
+++++s Lima
+++++962
+++++u Baghdad
+++++1319
+++++L
+++++R Dhaka
+++++L
+++++u Lima
+++++432
+++++a Barcelona
+++++756 138
+++++s Toronto
+++++784
+++++u Dar es Salaam
+++++209
+++++R Miami
+++++u Washington
+++++1380
+++++s Manila
+++++784
+++++A London
+++++s Surat
+++++459
+++++L
+++++A Manila
+++++A Istanbul
+++++r Toronto
+++++782
+++++r Saint Petersburg
+++++1330
+++++s Guadalajara
+++++396
+++++A Tianjin
+++++r Tokyo
+++++98
+++++R Luanda
+++++r Dhaka
+++++122
+++++R Lagos
+++++u Fukuoka
+++++694
+++++r Jinan
+++++76
+++++u Sao Paulo
+++++457
+++++a Philadelphia
+++++455 175
+++++L
+++++u Delhi
+++++718
+++++r Osaka
+++++1005
+++++A Harbin
+++++u Luanda
+++++584
+++++r Los Angeles
+++++424
+++++L
+++++u Los Angeles
+++++824
+++++L
+++++R Khartoum
+++++r Barcelona
+++++545
+++++r Philadelphia
+++++502
+++++R Moscow
+++++r Hyderabad
+++++601
+++++u Los Angeles
+++++824
+++++A Nagoya
+++++R Washington, D.C.
+++++L
+++++L
+++++s Qingdao
+++++790
+++++R Sao Paulo
+++++A Shanghai
+++++A Paris
+++++u Beijing
+++++402
+++++r Philadelphia
+++++455
+++++s Luanda
+++++1053
+++++a Saint Petersburg
+++++322 141
+++++r Osaka
+++++103
+++++r Barcelona
+++++879
+++++a Baghdad
+++++732 76
+++++r Baghdad
+++++309
+++++a Tehran
+++++1213 65
+++++a Tehran
+++++270 7
+++++R Manila
+++++L
+++++A Nanjing
+++++r Luanda
+++++204
+++++L
+++++u Los Angeles
+++++824
+++++a Seoul
+++++161 99
+++++s Ahmedabad
+++++546
+++++a Atlanta
+++++920 91
+++++a Tianjin
+++++85 108
+++++a Lima
+++++1345 173
+++++r Manila
+++++865
+++++r Luanda
+++++584
+++++A Singapore
+++++L
+++++u Manila
+++++364
+++++L
+++++A Kolkata
+++++a Nanjing
+++++1014 161
+++++u Jinan
+++++1293
+++++u Miami
+++++918
+++++L
+++++R Johannesburg
+++++L
+++++L
+++++A Kuala Lumpur
+++++u Miami
+++++961
+++++R Atlanta
+++++A Ahmedabad
+++++A Istanbul
+++++u Baghdad
+++++732
+++++a New York City
+++++1256 182
+++++R Qingdao
+++++r Guadalajara
+++++385
+++++R Guadalajara
+++++s Surat
+++++463
+++++r Nanjing
+++++1014
+++++A Hangzhou
+++++A Lahore
+++++s Los Angeles
+++++1198
+++++R Seoul
+++++A Fukuoka
+++++A Foshan
+++++u Sao Paulo
+++++62
+++++L
+++++a Beijing
+++++9 165
+++++a Istanbul
+++++877 85
+++++R Kolkata
+++++R Foshan
+++++R Toronto
+++++a Barcelona
+++++1008 74
+++++s Sao Paulo
+++++1183
+++++A Shenzhen
+++++A Hong Kong
+++++A Shenzhen
+++++R Philadelphia
+++++u Toronto
+++++844
+++++R Nagoya
+++++a London
+++++599 14
+++++A Chengdu
+++++a Paris
+++++1063 129
+++++r Lima
+++++14
+++++L
+++++s Luanda
+++++1374
+++++a Tehran
+++++371 109
+++++r Miami
+++++918
+++++a New York City
+++++272 66
+++++L
+++++a Harbin
+++++633 24
+++++R Tehran
+++++A Khartoum
+++++a Shenzhen
+++++930 112
+++++a Istanbul
+++++1125 123
+++++u Qingdao
+++++782
+++++L
+++++R Shanghai
+++++s Osaka
+++++808
+++++a Baghdad
+++++658 29
+++++u Tianjin
+++++85
+++++r Atlanta
+++++321
+++++r Khartoum
+++++302
+++++A Los Angeles
+++++A Dhaka
+++++L
+++++s Qingdao
+++++660
+++++A Toronto
+++++u Luanda
+++++1041
+++++u Guadalajara
+++++195
+++++L
+++++a Hangzhou
+++++553 187
+++++s Fukuoka
+++++1256
+++++L
+++++L
+++++u Osaka
+++++799
++++diff --git a/testMedium.txt b/testMedium.txt
++++new file mode 100644
++++index 0000000..3ddcea1
++++--- /dev/null
+++++++ b/testMedium.txt
++++@@ -0,0 +1,766 @@
+++++L
+++++A Manila
+++++A Jakarta
+++++A Saint Petersburg
+++++A Atlanta
+++++A Hong Kong
+++++A Philadelphia
+++++A Chicago
+++++A Foshan
+++++A Fukuoka
+++++A Chennai
+++++A Dallas
+++++A Guangzhou
+++++A Chengdu
+++++A Ho Chi Minh City
+++++A Bangkok
+++++A Nanjing
+++++A Moscow
+++++A Chengdu
+++++A Lahore
+++++A Philadelphia
+++++A Bogota
+++++A Pune
+++++A Suzhou
+++++A Dongguan
+++++A Paris
+++++A Chennai
+++++A Dongguan
+++++A Lima
+++++A Qingdao
+++++A Kolkata
+++++a Nanjing
+++++1262 198
+++++a Dongguan
+++++72 86
+++++a Foshan
+++++776 178
+++++a Bangkok
+++++1177 9
+++++a Saint Petersburg
+++++59 145
+++++a Pune
+++++925 113
+++++a Chicago
+++++155 192
+++++a Atlanta
+++++1400 4
+++++a Jakarta
+++++795 145
+++++a Atlanta
+++++1177 147
+++++a Suzhou
+++++93 109
+++++a Paris
+++++95 197
+++++a Nanjing
+++++916 142
+++++a Pune
+++++1133 134
+++++a Chennai
+++++307 49
+++++a Qingdao
+++++91 177
+++++a Dallas
+++++500 174
+++++a Atlanta
+++++457 94
+++++a Lima
+++++993 151
+++++a Chengdu
+++++1108 189
+++++a Fukuoka
+++++44 70
+++++a Paris
+++++1107 25
+++++a Lima
+++++1052 62
+++++a Guangzhou
+++++1410 160
+++++a Manila
+++++602 45
+++++a Nanjing
+++++1410 105
+++++a Guangzhou
+++++1211 170
+++++a Foshan
+++++1427 175
+++++a Fukuoka
+++++279 183
+++++a Philadelphia
+++++329 169
+++++a Moscow
+++++1385 5
+++++a Chennai
+++++1258 163
+++++a Chicago
+++++1304 114
+++++a Dongguan
+++++1221 26
+++++a Philadelphia
+++++182 26
+++++a Suzhou
+++++396 159
+++++a Chengdu
+++++524 33
+++++a Ho Chi Minh City
+++++869 63
+++++a Kolkata
+++++656 1
+++++a Atlanta
+++++246 41
+++++a Chengdu
+++++626 182
+++++a Saint Petersburg
+++++1133 134
+++++a Suzhou
+++++348 13
+++++a Chicago
+++++1337 18
+++++a Philadelphia
+++++1224 23
+++++a Fukuoka
+++++68 193
+++++a Philadelphia
+++++793 20
+++++a Saint Petersburg
+++++229 197
+++++a Bogota
+++++818 86
+++++a Chengdu
+++++826 46
+++++a Bangkok
+++++575 16
+++++a Paris
+++++101 180
+++++a Fukuoka
+++++406 174
+++++a Ho Chi Minh City
+++++1114 108
+++++a Lahore
+++++1163 131
+++++a Ho Chi Minh City
+++++118 111
+++++a Foshan
+++++333 156
+++++a Kolkata
+++++287 0
+++++a Lahore
+++++1263 28
+++++a Bogota
+++++980 116
+++++a Bogota
+++++1392 84
+++++a Suzhou
+++++111 84
+++++a Hong Kong
+++++726 56
+++++a Kolkata
+++++663 118
+++++a Saint Petersburg
+++++1369 41
+++++a Atlanta
+++++1138 89
+++++a Qingdao
+++++406 78
+++++a Lima
+++++1019 194
+++++a Kolkata
+++++1242 80
+++++a Foshan
+++++810 6
+++++a Atlanta
+++++936 36
+++++a Manila
+++++933 147
+++++a Ho Chi Minh City
+++++612 31
+++++a Bangkok
+++++1383 70
+++++a Kolkata
+++++324 94
+++++a Atlanta
+++++1318 62
+++++a Fukuoka
+++++1136 56
+++++a Atlanta
+++++348 41
+++++a Moscow
+++++1335 129
+++++a Manila
+++++1222 33
+++++a Chengdu
+++++1374 183
+++++a Foshan
+++++313 20
+++++a Philadelphia
+++++1211 143
+++++a Dongguan
+++++40 104
+++++a Atlanta
+++++539 85
+++++a Chicago
+++++756 22
+++++a Suzhou
+++++20 113
+++++a Kolkata
+++++172 34
+++++a Moscow
+++++1306 15
+++++a Qingdao
+++++465 13
+++++a Moscow
+++++921 144
+++++a Saint Petersburg
+++++1264 189
+++++a Bangkok
+++++965 179
+++++a Pune
+++++21 100
+++++a Saint Petersburg
+++++1227 183
+++++a Lahore
+++++752 15
+++++a Chicago
+++++643 117
+++++a Suzhou
+++++18 66
+++++a Guangzhou
+++++110 16
+++++a Dongguan
+++++1279 94
+++++s Jakarta
+++++802
+++++s Foshan
+++++787
+++++s Nanjing
+++++1263
+++++s Manila
+++++941
+++++s Lima
+++++1060
+++++s Chengdu
+++++1120
+++++s Qingdao
+++++99
+++++s Philadelphia
+++++329
+++++s Nanjing
+++++1266
+++++s Manila
+++++1235
+++++s Qingdao
+++++96
+++++s Atlanta
+++++257
+++++s Kolkata
+++++666
+++++s Kolkata
+++++663
+++++s Chengdu
+++++636
+++++s Ho Chi Minh City
+++++1120
+++++s Bogota
+++++1394
+++++s Lahore
+++++1171
+++++s Paris
+++++108
+++++s Ho Chi Minh City
+++++1120
+++++s Foshan
+++++342
+++++s Qingdao
+++++417
+++++s Chennai
+++++315
+++++s Foshan
+++++1431
+++++s Guangzhou
+++++1224
+++++s Nanjing
+++++928
+++++s Ho Chi Minh City
+++++1125
+++++s Kolkata
+++++338
+++++s Dongguan
+++++1281
+++++s Moscow
+++++1314
+++++s Foshan
+++++343
+++++s Dongguan
+++++1221
+++++s Paris
+++++1110
+++++s Bangkok
+++++1178
+++++s Manila
+++++1229
+++++s Ho Chi Minh City
+++++121
+++++s Paris
+++++109
+++++s Manila
+++++614
+++++s Foshan
+++++789
+++++s Ho Chi Minh City
+++++120
+++++s Jakarta
+++++803
+++++s Chicago
+++++770
+++++s Kolkata
+++++660
+++++s Moscow
+++++1335
+++++s Saint Petersburg
+++++1147
+++++s Philadelphia
+++++192
+++++s Nanjing
+++++916
+++++s Dallas
+++++514
+++++s Ho Chi Minh City
+++++626
+++++s Philadelphia
+++++1225
+++++s Saint Petersburg
+++++1377
+++++s Suzhou
+++++402
+++++s Bogota
+++++993
+++++s Chennai
+++++1271
+++++s Chennai
+++++307
+++++s Paris
+++++106
+++++s Moscow
+++++1318
+++++s Nanjing
+++++1267
+++++s Bogota
+++++991
+++++s Atlanta
+++++1139
+++++s Suzhou
+++++34
+++++s Paris
+++++104
+++++s Chennai
+++++1272
+++++s Ho Chi Minh City
+++++623
+++++s Dongguan
+++++1287
+++++s Saint Petersburg
+++++1372
+++++s Atlanta
+++++1142
+++++s Foshan
+++++320
+++++s Chicago
+++++1338
+++++s Jakarta
+++++803
+++++s Foshan
+++++816
+++++s Ho Chi Minh City
+++++122
+++++s Atlanta
+++++549
+++++s Dongguan
+++++83
+++++s Saint Petersburg
+++++70
+++++s Chengdu
+++++1384
+++++s Philadelphia
+++++796
+++++s Ho Chi Minh City
+++++1123
+++++s Atlanta
+++++248
+++++s Atlanta
+++++1147
+++++s Suzhou
+++++115
+++++s Dongguan
+++++72
+++++s Qingdao
+++++410
+++++s Chicago
+++++766
+++++s Philadelphia
+++++1221
+++++s Lima
+++++1005
+++++s Atlanta
+++++1146
+++++s Lima
+++++1003
+++++s Ho Chi Minh City
+++++1117
+++++s Paris
+++++109
+++++s Atlanta
+++++1190
+++++s Moscow
+++++1388
+++++s Kolkata
+++++666
+++++s Dallas
+++++506
+++++s Chennai
+++++314
+++++s Pune
+++++925
+++++s Lahore
+++++1274
+++++s Nanjing
+++++927
+++++s Philadelphia
+++++799
+++++s Dallas
+++++505
+++++s Hong Kong
+++++727
+++++s Moscow
+++++925
+++++s Qingdao
+++++417
+++++s Philadelphia
+++++336
+++++s Bangkok
+++++1178
+++++s Moscow
+++++1347
+++++s Atlanta
+++++540
+++++s Guangzhou
+++++122
+++++s Atlanta
+++++1323
+++++s Philadelphia
+++++1224
+++++s Fukuoka
+++++1140
+++++s Chicago
+++++167
+++++s Bogota
+++++1401
+++++s Foshan
+++++813
+++++s Bogota
+++++1403
+++++s Qingdao
+++++465
+++++s Atlanta
+++++469
+++++s Pune
+++++1133
+++++s Qingdao
+++++93
+++++s Moscow
+++++1316
+++++s Dongguan
+++++49
+++++s Suzhou
+++++23
+++++s Qingdao
+++++468
+++++s Kolkata
+++++335
+++++s Atlanta
+++++542
+++++s Kolkata
+++++666
+++++s Lima
+++++996
+++++s Foshan
+++++1441
+++++s Philadelphia
+++++184
+++++s Qingdao
+++++104
+++++s Atlanta
+++++1406
+++++s Foshan
+++++335
+++++s Atlanta
+++++256
+++++s Suzhou
+++++28
+++++s Lima
+++++1025
+++++s Saint Petersburg
+++++1277
+++++s Bogota
+++++987
+++++s Bogota
+++++981
+++++s Ho Chi Minh City
+++++623
+++++s Kolkata
+++++337
+++++s Bogota
+++++1398
+++++s Atlanta
+++++1145
+++++s Bangkok
+++++973
+++++s Manila
+++++940
+++++s Atlanta
+++++351
+++++s Ho Chi Minh City
+++++622
+++++s Kolkata
+++++667
+++++s Paris
+++++104
+++++s Chennai
+++++1265
+++++s Ho Chi Minh City
+++++881
+++++s Foshan
+++++1427
+++++s Guangzhou
+++++1225
+++++s Kolkata
+++++1251
+++++s Manila
+++++941
+++++s Jakarta
+++++808
+++++s Hong Kong
+++++736
+++++s Foshan
+++++1438
+++++s Dongguan
+++++1289
+++++s Saint Petersburg
+++++1370
+++++s Hong Kong
+++++737
+++++s Dongguan
+++++75
+++++s Philadelphia
+++++340
+++++s Suzhou
+++++118
+++++s Qingdao
+++++414
+++++s Bogota
+++++823
+++++s Chengdu
+++++828
+++++s Foshan
+++++317
+++++s Suzhou
+++++27
+++++s Saint Petersburg
+++++1379
+++++s Ho Chi Minh City
+++++618
+++++s Lahore
+++++766
+++++s Chicago
+++++1304
+++++s Bangkok
+++++1179
+++++s Manila
+++++609
+++++s Chengdu
+++++630
+++++s Paris
+++++1108
+++++s Kolkata
+++++662
+++++s Hong Kong
+++++732
+++++s Pune
+++++932
+++++s Chennai
+++++1258
+++++s Paris
+++++95
+++++s Pune
+++++938
+++++s Chengdu
+++++635
+++++s Paris
+++++1118
+++++s Ho Chi Minh City
+++++612
+++++s Ho Chi Minh City
+++++1117
+++++s Ho Chi Minh City
+++++612
+++++s Kolkata
+++++667
+++++s Chennai
+++++1266
+++++s Foshan
+++++782
+++++s Philadelphia
+++++330
+++++s Manila
+++++1227
+++++s Lahore
+++++1170
+++++s Guangzhou
+++++114
+++++s Foshan
+++++788
+++++s Guangzhou
+++++122
+++++s Atlanta
+++++544
+++++s Paris
+++++1113
+++++s Pune
+++++938
+++++s Dallas
+++++502
+++++A Jinan
+++++a Dallas
+++++368 9
+++++r Lahore
+++++1163
+++++A Guadalajara
+++++s Kolkata
+++++335
+++++R Saint Petersburg
+++++a Chicago
+++++1209 107
+++++L
+++++r Fukuoka
+++++44
+++++u Nanjing
+++++916
+++++R Hong Kong
+++++u Guangzhou
+++++1211
+++++s Atlanta
+++++946
+++++A Rio de Janeiro
+++++u Bangkok
+++++575
+++++s Saint Petersburg
+++++240
+++++a Paris
+++++47 91
+++++u Kolkata
+++++656
+++++a Rio de Janeiro
+++++344 21
+++++a Dongguan
+++++822 109
+++++a Jakarta
+++++301 168
+++++L
+++++R Kolkata
+++++L
+++++u Fukuoka
+++++406
+++++A Chennai
+++++r Jakarta
+++++301
+++++A Delhi
+++++L
+++++u Philadelphia
+++++329
+++++L
+++++a Suzhou
+++++410 59
+++++u Atlanta
+++++1177
+++++L
+++++a Suzhou
+++++1324 112
+++++R Jakarta
+++++R Chicago
+++++a Manila
+++++433 124
+++++a Bangkok
+++++1360 44
+++++A Dar es Salaam
+++++r Saint Petersburg
+++++1227
+++++u Dongguan
+++++40
+++++a Paris
+++++53 137
+++++a Dongguan
+++++477 27
+++++a Chennai
+++++1271 197
+++++R Qingdao
+++++r Bangkok
+++++1383
+++++a Chennai
+++++149 23
+++++L
+++++r Saint Petersburg
+++++229
+++++a Chennai
+++++283 168
+++++s Lima
+++++1021
+++++a Fukuoka
+++++273 11
+++++A Mexico City
+++++a Delhi
+++++1276 157
+++++a Ho Chi Minh City
+++++729 61
+++++u Suzhou
+++++20
+++++r Guangzhou
+++++1410
+++++L
+++++u Bogota
+++++980
+++++a Chengdu
+++++276 132
+++++a Rio de Janeiro
+++++590 30
+++++r Chicago
+++++1337
+++++s Saint Petersburg
+++++1369
+++++u Qingdao
+++++91
+++++u Ho Chi Minh City
+++++612
+++++R Pune
+++++s Dongguan
+++++484
+++++u Nanjing
+++++1410
+++++u Chengdu
+++++1108
+++++a Chennai
+++++341 192
+++++R Dallas
+++++s Dongguan
+++++75
+++++L
+++++a Ho Chi Minh City
+++++184 26
+++++r Ho Chi Minh City
+++++612
+++++r Ho Chi Minh City
+++++1114
+++++a Philadelphia
+++++1294 136
+++++L
+++++r Nanjing
+++++1262
++++diff --git a/testSmall.txt b/testSmall.txt
++++new file mode 100644
++++index 0000000..f4ec80b
++++--- /dev/null
+++++++ b/testSmall.txt
++++@@ -0,0 +1,405 @@
+++++L
+++++A Barcelona
+++++A Surat
+++++A Hong Kong
+++++A Paris
+++++A Moscow
+++++A Chennai
+++++A Dalian
+++++A Dallas
+++++A Johannesburg
+++++A Santiago
+++++A Tehran
+++++A Country
+++++A Dalian
+++++A Madrid
+++++A Lima
+++++A Baghdad
+++++A London
+++++A Manila
+++++A Wuhan
+++++A Khartoum
+++++a Santiago
+++++1367 161
+++++a Hong Kong
+++++1264 40
+++++a Country
+++++689 165
+++++a Dalian
+++++1233 85
+++++a Surat
+++++852 188
+++++a Manila
+++++1204 151
+++++a Manila
+++++976 88
+++++a London
+++++52 159
+++++a London
+++++931 144
+++++a Baghdad
+++++971 50
+++++a Moscow
+++++391 42
+++++a Country
+++++404 93
+++++a Chennai
+++++277 87
+++++a Moscow
+++++877 194
+++++a Surat
+++++122 42
+++++a Baghdad
+++++1304 176
+++++a Baghdad
+++++291 159
+++++a Lima
+++++859 128
+++++a Manila
+++++1039 11
+++++a Wuhan
+++++1059 72
+++++a Dallas
+++++638 109
+++++a Lima
+++++1053 174
+++++a Dallas
+++++1344 172
+++++a Barcelona
+++++997 102
+++++a Moscow
+++++15 84
+++++a Moscow
+++++1256 57
+++++a Barcelona
+++++69 169
+++++a London
+++++848 77
+++++a Wuhan
+++++348 32
+++++a Surat
+++++146 190
+++++a Moscow
+++++374 85
+++++a Khartoum
+++++166 145
+++++a Manila
+++++1349 35
+++++a Country
+++++659 100
+++++a Dalian
+++++460 88
+++++a Dalian
+++++542 56
+++++a Paris
+++++298 48
+++++a Wuhan
+++++906 106
+++++a Chennai
+++++446 195
+++++a Khartoum
+++++755 86
+++++a Madrid
+++++255 162
+++++a Khartoum
+++++774 189
+++++a Manila
+++++753 82
+++++a Baghdad
+++++56 162
+++++a Dalian
+++++1259 196
+++++a Hong Kong
+++++97 2
+++++a Manila
+++++1084 43
+++++a Paris
+++++518 29
+++++a Moscow
+++++710 196
+++++a Tehran
+++++375 108
+++++a Chennai
+++++836 14
+++++a Santiago
+++++1186 103
+++++a Madrid
+++++815 186
+++++a Barcelona
+++++761 55
+++++a Paris
+++++1223 86
+++++a Hong Kong
+++++190 8
+++++a Manila
+++++1331 53
+++++a Country
+++++1277 0
+++++a Madrid
+++++269 7
+++++a Santiago
+++++94 189
+++++s Barcelona
+++++770
+++++s Wuhan
+++++1064
+++++s Santiago
+++++1375
+++++s Dalian
+++++1241
+++++s London
+++++851
+++++s Moscow
+++++718
+++++s London
+++++56
+++++s Hong Kong
+++++1273
+++++s Chennai
+++++841
+++++s Khartoum
+++++167
+++++s Surat
+++++853
+++++s Moscow
+++++1259
+++++s Baghdad
+++++984
+++++s Hong Kong
+++++102
+++++s Manila
+++++978
+++++s Madrid
+++++256
+++++s Barcelona
+++++1011
+++++s Dalian
+++++553
+++++s Dallas
+++++646
+++++s Wuhan
+++++354
+++++s London
+++++939
+++++s Barcelona
+++++769
+++++s Hong Kong
+++++1277
+++++s Santiago
+++++1187
+++++s Moscow
+++++393
+++++s Country
+++++661
+++++s Surat
+++++860
+++++s Manila
+++++1355
+++++s Country
+++++691
+++++s Moscow
+++++19
+++++s Country
+++++667
+++++s Manila
+++++977
+++++s Surat
+++++156
+++++s Barcelona
+++++1004
+++++s Dallas
+++++638
+++++s Moscow
+++++399
+++++s Dalian
+++++1264
+++++s Country
+++++1280
+++++s Wuhan
+++++907
+++++s Madrid
+++++828
+++++s Santiago
+++++1375
+++++s Paris
+++++311
+++++s Chennai
+++++456
+++++s Madrid
+++++825
+++++s Madrid
+++++823
+++++s Chennai
+++++460
+++++s London
+++++937
+++++s Baghdad
+++++1307
+++++s Wuhan
+++++349
+++++s Country
+++++691
+++++s Dalian
+++++550
+++++s Manila
+++++1353
+++++s Baghdad
+++++61
+++++s Moscow
+++++1256
+++++s Surat
+++++129
+++++s Khartoum
+++++172
+++++s Moscow
+++++882
+++++s Baghdad
+++++977
+++++s Surat
+++++134
+++++s Hong Kong
+++++1273
+++++s Country
+++++659
+++++s Khartoum
+++++777
+++++s Manila
+++++1040
+++++s Wuhan
+++++1059
+++++s Surat
+++++865
+++++s Country
+++++408
+++++s Baghdad
+++++973
+++++s Paris
+++++1226
+++++s Santiago
+++++100
+++++s Paris
+++++1227
+++++s London
+++++940
+++++s Moscow
+++++1269
+++++s Khartoum
+++++774
+++++s Barcelona
+++++69
+++++s Manila
+++++977
+++++s Wuhan
+++++354
+++++s London
+++++942
+++++s Barcelona
+++++763
+++++s Moscow
+++++18
+++++s Hong Kong
+++++204
+++++s Manila
+++++767
+++++s London
+++++56
+++++s Moscow
+++++386
+++++s Santiago
+++++108
+++++s Manila
+++++1339
+++++s Manila
+++++1040
+++++s Santiago
+++++1187
+++++s Country
+++++1288
+++++s Wuhan
+++++1062
+++++s Baghdad
+++++295
+++++s Madrid
+++++264
+++++s Chennai
+++++457
+++++s Surat
+++++866
+++++s Moscow
+++++378
+++++s Dalian
+++++1268
+++++s Manila
+++++1351
+++++s Dallas
+++++1354
+++++s Paris
+++++301
+++++s Manila
+++++976
+++++s Moscow
+++++398
+++++A Dongguan
+++++u Surat
+++++852
+++++R Barcelona
+++++A Osaka
+++++u Santiago
+++++1367
+++++s Dalian
+++++468
+++++r Baghdad
+++++56
+++++L
+++++a Madrid
+++++451 154
+++++A Country
+++++A Belo Horizonte
+++++r Baghdad
+++++291
+++++a Belo Horizonte
+++++1079 103
+++++L
+++++s Wuhan
+++++352
+++++r Baghdad
+++++1304
+++++r Surat
+++++146
+++++R Baghdad
+++++r Baghdad
+++++971
+++++s Manila
+++++989
+++++r Surat
+++++122
+++++u Dallas
+++++1344
+++++A Jakarta
+++++a Surat
+++++1137 83
+++++u Manila
+++++753
+++++s Lima
+++++865
+++++L
+++++s Dalian
+++++1241
+++++r Manila
+++++1204
+++++u Santiago
+++++1186
+++++A Dhaka
+++++L
+++++R Dongguan
+++++s Lima
+++++862
+++++s Moscow
+++++387
+++++L
+++++A London
+++++R Madrid
+++++a Jakarta
+++++261 84
+++++a Manila
+++++360 171
+++diff --git a/test.sh b/test.sh
+++index f8ecbf4..1753085 100755
+++--- a/test.sh
++++++ b/test.sh
+++@@ -262,7 +262,7 @@ EOF
+++     echo "FAIL"
+++     [[ -n $VERBOSE ]] && echo "Your program produced:"
+++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++-    [[ -n $VERBOSE ]] && echo "$answers"    
++++    [[ -n $VERBOSE ]] && echo "$answer"    
+++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++     [[ -n $VERBOSE ]] && echo "Output should have been:"
+++     [[ -n $VERBOSE ]] && echo "--------------------------"
+++
++ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++ Date:   Mon Sep 28 22:04:59 2020 -0400
++
+ commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Thu Oct 1 18:48:16 2020 -0400
+
 commit da6661f7aace13f7460f1854b7f421ec09bce194
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Thu Oct 1 20:00:10 2020 -0400

commit 1fc06886442458df6df848e0f90ac6e155b1d853
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Oct 2 10:20:31 2020 -0400

    working on add_flight

diff --git a/assignment-3.c b/assignment-3.c
index e50b45e..dceff55 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -511,6 +511,9 @@ void flight_schedule_add(city_t city){ //should this call get city
 
 void flight_schedule_remove(city_t city){
   struct flight_schedule *temp = flight_schedule_find(city);
+  if(temp == NULL){
+
+  }
   flight_schedule_free(temp);
 }
 
@@ -536,21 +539,22 @@ void flight_schedule_list(city_t city){
 }
 
 void flight_schedule_add_flight(city_t city){
-  flight_schedule_add(city);
+  //flight_schedule_add(city);
   struct flight_schedule *temp = flight_schedule_find(city);
 
-
   int *t;
   time_get(t); //do this then check if t is 0 to see if valid or not 
   
   if(time_get(t) == 0) { //or just t
-     return;
+    msg_flight_bad_time();      
+    return;
    }
 
   int *c;
   flight_capacity_get(c);  //this also has to be done as above to get appropraite io
   
-  if (flight_capacity_get(c) == 0){
+  if (flight_capacity_get(c) == 0){ //show message plane is full
+      msg_flight_no_seats();
       return;
   }
 
@@ -583,7 +587,7 @@ void flight_schedule_remove_flight(city_t city){
   int *c;
   flight_capacity_get(c); 
   if(flight_capacity_get(c) == 0){
-
+      return;
   }
   
   struct flight *flights;
diff --git a/gitlog.txt b/gitlog.txt
index 29ef0ec..1364b9f 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4286 @@
+commit da6661f7aace13f7460f1854b7f421ec09bce194
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Thu Oct 1 20:00:10 2020 -0400
+
+    fixed aloocate, add and list
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 6644548..e50b45e 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
+ //returns pointer to updated flight schedule
+ struct flight_schedule * flight_schedule_allocate(void){
+ 
+-  struct flight_schedule *temp;// =  flight_schedules_free;
++  struct flight_schedule *temp =  flight_schedules_free;
++  struct flight_schedule *fs;
++  if (flight_schedules_free != NULL){
++    flight_schedules_free = temp->next;
++    flight_schedules_free->prev = NULL;
++  }
++
++
++  temp->next = flight_schedules_active;
++  //if active not null set active prev to temp
++  if(flight_schedules_active != NULL){
++    flight_schedules_active->prev = temp;
++  }
++   flight_schedules_active = temp;
++
++
++
++
+ 
+ 
+-  flight_schedules_free = flight_schedules_free->next;
++  /*
+   flight_schedules_free-> prev->next = flight_schedules_active;
+   
+   //temp->next = flight_schedules_active;
+@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
+ 
+   //flight_schedules_active = temp;
+   temp = flight_schedules_active;
++  */
+   return(temp); //return temp?
+ }
+ 
+@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+ 
+   while(temp != NULL){
+     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+-      return(temp);
++      break; //return(temp);
+     }
+     temp = temp->next;
+   }
++  return (temp);
+ }
+ 
+ 
+ void flight_schedule_add(city_t city){ //should this call get city
++
++  //first cheeck to see if city exists
++  struct flight_schedule *fs = flight_schedule_find(city);
++  if (fs != NULL)  {
++    msg_city_exists(city);
++  }
++
++  if (fs == NULL){
+   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+-  
+-  //if (flight_schedule_find == city)  {
+-  //  msg_city_exists(city);
+- // } //
+   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+   
+   //p->destination = ch; 
+ 
++  }
+ }
+ 
+ 
+@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
+ 
+ 
+ void flight_schedule_listAll(void){
+-  struct flight_schedule *temp = flight_schedules_active;
++  struct flight_schedule *temp = flight_schedules_active; //need to add messages
+   while(temp != NULL){
+-    printf("%p", temp); // print temp is disaplying memory address
++    printf("%s\n", temp->destination); // print temp is disaplying memory address
+     temp = temp->next;
+   }
+ 
+ }
+ 
+ void flight_schedule_list(city_t city){
+-  struct flight_schedule *temp = flight_schedules_active;
++  struct flight_schedule *temp = flight_schedules_active; 
+   while(temp != NULL){
+     if (strcmp(city,temp->destination) == 0){
+-      printf("%p", *temp); //displaying memory address
++      printf("%s\n", temp->destination); //displaying memory address
+     }
+     temp = temp->next;
+   }
+diff --git a/gitlog.txt b/gitlog.txt
+index c3e37f7..29ef0ec 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -1,3 +1,4170 @@
++commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Thu Oct 1 18:48:16 2020 -0400
++
++    editing and debugging
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 881c536..6644548 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++ 
++   // Loop through the Array connecting them
++   // as a linear doubly linked list
+++  if (n == 1) {
+++    flight_schedule_reset(&array[0]);
+++    array[0].next = NULL;
+++    array[0].prev = NULL;
+++    flight_schedules_free = &array[0];
+++    return;
+++  }
+++
+++  flight_schedule_reset(&array[0]);
+++  array[0].next = &array[1];
++   array[0].prev = NULL;
++-  for (int i=0; i<n-1; i++) {
+++
+++  for (int i=1; i<n-1; i++) {
++     flight_schedule_reset(&array[i]);
++     array[i].next = &array[i+1];
++-    array[i+1].prev = &array[i];
+++    array[i].prev = &array[i-1];
++   }
+++
++   // Takes care of last node.  
++   flight_schedule_reset(&array[n-1]); // reset clears all fields
++   array[n-1].next = NULL;
++@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
++ //returns pointer to updated flight schedule
++ struct flight_schedule * flight_schedule_allocate(void){
++ 
++-  struct flight_schedule *temp =  flight_schedules_free;
+++  struct flight_schedule *temp;// =  flight_schedules_free;
+++
+++
++   flight_schedules_free = flight_schedules_free->next;
+++  flight_schedules_free-> prev->next = flight_schedules_active;
+++  
+++  //temp->next = flight_schedules_active;
+++  flight_schedules_active = flight_schedules_free->prev;
++   flight_schedules_free->prev = NULL;
++-  temp->next = flight_schedules_active;
++-
++-  flight_schedules_active = temp;
++-  flight_schedules_active->next->prev = flight_schedules_active;
+++  
++   //temp->prev = NULL;
++   //struct flight_schedule *temp2 = flight_schedules_active
++-  
++-  return(flight_schedules_active);
+++
+++  if(flight_schedules_active -> next != NULL){
+++    flight_schedules_active->next->prev = flight_schedules_active;
+++  }
+++
+++  //flight_schedules_active = temp;
+++  temp = flight_schedules_active;
+++  return(temp); //return temp?
++ }
++ 
++ //flight schedule free
++ //takes schedule off active list, resets it, then places the node back on free list
++ void flight_schedule_free(struct flight_schedule *fs){
++-  int counter = 0;
+++  flight_schedules_active = flight_schedules_active->next;
+++  flight_schedule_reset(fs);
+++  fs->next = flight_schedules_free;
+++  flight_schedules_free = fs;
+++  fs->next->prev = fs;
+++
+++
+++  /*int counter = 0;
++   struct flight_schedule *temp = flight_schedules_active;
++   while(temp != NULL) {
++     if(temp == fs){ //use flight schedule find instead
++@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
++     temp = temp->next;
++     counter++;
++   }
++-  
++   if (counter == 0){
++     flight_schedules_active = temp->next;
++     flight_schedules_active->prev = NULL;
++@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++     //flight_schedule_reset(temp);
++ 
++   }
++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++-    temp->prev->next = temp->next;
+++  else{ 
+++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
++     temp->next->prev = temp->prev;
++     temp->next = NULL;
++     temp->prev = NULL;
++@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
++     flight_schedules_free = temp;
++     flight_schedules_free->next->prev = flight_schedules_free;
++   }
++-  else{
++-    temp->prev = NULL;
++-    flight_schedules_active->prev->next = NULL;
++-
++-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++-
++-    temp->next = flight_schedules_free;
++-    flight_schedules_free = temp;
++-    flight_schedules_free->next->prev = flight_schedules_free;
++-    
++-  }
+++}
+++*/
++ }
++ 
++ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
++ void flight_schedule_add(city_t city){ //should this call get city
++   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++   
++-  if (flight_schedule_find) {
++-    msg_city_exists(city);
++-  }
+++  //if (flight_schedule_find == city)  {
+++  //  msg_city_exists(city);
+++ // } //
++   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++   
++   //p->destination = ch; 
++@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
++ void flight_schedule_listAll(void){
++   struct flight_schedule *temp = flight_schedules_active;
++   while(temp != NULL){
++-    printf("%p", &temp);
+++    printf("%p", temp); // print temp is disaplying memory address
++     temp = temp->next;
++   }
++ 
++@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
++   struct flight_schedule *temp = flight_schedules_active;
++   while(temp != NULL){
++     if (strcmp(city,temp->destination) == 0){
++-      printf("%p", &temp);
+++      printf("%p", *temp); //displaying memory address
++     }
++     temp = temp->next;
++   }
++@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
++ 
++   int *t;
++   time_get(t); //do this then check if t is 0 to see if valid or not 
++-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++   
++-  if (time == 1 || capacity == 1 ){
++-      return 1;
+++  if(time_get(t) == 0) { //or just t
+++     return;
+++   }
+++
+++  int *c;
+++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+++  
+++  if (flight_capacity_get(c) == 0){
+++      return;
++   }
++ 
++   struct flight *flights;
++@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++     if(flights[i].time == -1){
++-      flights[i].time = time;//was flights[i] will this change correct one?
++-      flights[i].capacity = capacity;
+++      flights[i].time = *t;//was flights[i] will this change correct one?
+++      flights[i].capacity = *c;
++       break;
++     }
++   }
++@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
++   struct flight_schedule *temp = flight_schedule_find(city);
++  //idk if this is the right time to call or even need too
++ 
++-
++-
++   int *t;
++   time_get(t); //if 1 continue; else tell user
++    if(time_get(t) == 0) {
++@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
++    }
++   int *c;
++   flight_capacity_get(c); 
+++  if(flight_capacity_get(c) == 0){
+++
+++  }
++   
++   struct flight *flights;
++   flights = temp->flights;
++@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
++ 
++   struct flight *flights;
++   flights = temp->flights;
+++  int *t;
+++  time_get(t);
+++  if(time_get(t) == 0) {
+++     return;
+++   }
++ 
++-  int time = time_get();
++   int nearest = 0;
++   int position = 0;
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++-    if(flights[i].time >= time){
++-      if(flights[i].time - nearest <= nearest - time){
+++    if(flights[i].time >= *t){
+++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
++         nearest = flights[i].time;
++         position = i;
++       }
++@@ -573,18 +602,21 @@ flights[position].available--;
++   
++ }
++ 
++-flight_schedule_unschedule_seat(city_t city){
+++ void flight_schedule_unschedule_seat(city_t city){
++   struct flight_schedule *temp = flight_schedule_find(city);
++ 
++   struct flight *flights;
++   flights = temp->flights;
++-
++-  int time = time_get();
+++  int *t;
+++  time_get(t);
+++  if(time_get(t) == 0) {
+++     return;
+++   }
++   int nearest = 0;
++   int position = 0;
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++-    if(flights[i].time == time){
+++    if(flights[i].time == *t){ //origrinally was time 
++      flights[i].available--;
++     }
++   }
++diff --git a/gitlog.txt b/gitlog.txt
++index e69de29..c3e37f7 100644
++--- a/gitlog.txt
+++++ b/gitlog.txt
++@@ -0,0 +1,3895 @@
+++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 22:04:59 2020 -0400
+++
+++    finshing up scheduling/unscheduling and debuggin
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 322ef6c..881c536 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
+++   flight_schedule_add(city);
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++ 
+++-  time_t time = time_get();
+++-  int capacity = flight_capacity_get();
++++
++++  int *t;
++++  time_get(t); //do this then check if t is 0 to see if valid or not 
++++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+++   
+++   if (time == 1 || capacity == 1 ){
+++       return 1;
+++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
+++ 
+++ 
+++ 
+++-  time_t time = time_get();
+++-  int capacity = flight_capacity_get(); 
++++  int *t;
++++  time_get(t); //if 1 continue; else tell user
++++   if(time_get(t) == 0) {
++++     return;
++++   }
++++  int *c;
++++  flight_capacity_get(c); 
+++   
+++   struct flight *flights;
+++   flights = temp->flights;
+++ 
+++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++-    if(flights[i].time == time){
++++    if(flights[i].time == *t){
+++       flights[i].time = -1;//was flights[i] will this change correct one?
+++       flights[i].capacity = 0;  
+++       flights[i].available = 0;
+++
+++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 21:51:04 2020 -0400
+++
+++    schedule and unschedule seat
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 6db86b9..322ef6c 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
+++ 
+++ 
+++ void flight_schedule_schedule_seat(city_t city) {
++++  struct flight_schedule *temp = flight_schedule_find(city);
++++
++++  struct flight *flights;
++++  flights = temp->flights;
++++
++++  int time = time_get();
++++  int nearest = 0;
++++  int position = 0;
++++
++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++    if(flights[i].time >= time){
++++      if(flights[i].time - nearest <= nearest - time){
++++        nearest = flights[i].time;
++++        position = i;
++++      }
++++    }
++++  }
++++flights[position].available--;
+++   
+++-}
+++\ No newline at end of file
++++}
++++
++++flight_schedule_unschedule_seat(city_t city){
++++  struct flight_schedule *temp = flight_schedule_find(city);
++++
++++  struct flight *flights;
++++  flights = temp->flights;
++++
++++  int time = time_get();
++++  int nearest = 0;
++++  int position = 0;
++++
++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++    if(flights[i].time == time){
++++     flights[i].available--;
++++    }
++++  }
++++}
++++
+++
+++commit 4490dcc205f2959c8fa299368be096d99f756e27
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 21:23:54 2020 -0400
+++
+++    continuing work on add and remove flights
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index d9c99ff..6db86b9 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
+++   flight_schedule_add(city);
+++   struct flight_schedule *temp = flight_schedule_find(city);
+++ 
+++-  int time = time_get();
++++  time_t time = time_get();
+++   int capacity = flight_capacity_get();
+++   
+++   if (time == 1 || capacity == 1 ){
+++       return 1;
+++   }
+++ 
+++-  temp->flight->flights[];
++++  struct flight *flights;
++++  flights = temp->flights;
++++  //flights[i]
++++  //loop thru flights until open flight then add flight
+++ 
++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++    if(flights[i].time == -1){
++++      flights[i].time = time;//was flights[i] will this change correct one?
++++      flights[i].capacity = capacity;
++++      break;
++++    }
++++  }
++++  //else return that it failed
++++
++++
++++}
++++
++++void flight_schedule_remove_flight(city_t city){
++++  struct flight_schedule *temp = flight_schedule_find(city);
++++ //idk if this is the right time to call or even need too
+++ 
+++ 
++++
++++  time_t time = time_get();
++++  int capacity = flight_capacity_get(); 
++++  
++++  struct flight *flights;
++++  flights = temp->flights;
++++
++++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++++    if(flights[i].time == time){
++++      flights[i].time = -1;//was flights[i] will this change correct one?
++++      flights[i].capacity = 0;  
++++      flights[i].available = 0;
++++      break;
++++    }
++++  }
+++ }
++++
++++
++++void flight_schedule_schedule_seat(city_t city) {
++++  
++++}
+++\ No newline at end of file
+++
+++commit e41186f0b9058ea4390a8f0fda78296861580f31
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 20:05:28 2020 -0400
+++
+++    updates to add_flight
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index aae10c7..d9c99ff 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
+++   }
+++ }
+++ 
+++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+++   struct flight_schedule *temp = flight_schedules_active;
++++
+++   while(temp != NULL){
+++-    if (strcmp(city,temp->destination) == 0){
++++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+++       return(temp);
+++     }
+++     temp = temp->next;
+++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++ }
+++ 
+++ 
++++void flight_schedule_add(city_t city){ //should this call get city
++++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++++  
++++  if (flight_schedule_find) {
++++    msg_city_exists(city);
++++  }
++++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++++  
++++  //p->destination = ch; 
++++
++++}
++++
++++
++++void flight_schedule_remove(city_t city){
++++  struct flight_schedule *temp = flight_schedule_find(city);
++++  flight_schedule_free(temp);
++++}
++++
++++
++++
++++void flight_schedule_listAll(void){
++++  struct flight_schedule *temp = flight_schedules_active;
++++  while(temp != NULL){
++++    printf("%p", &temp);
++++    temp = temp->next;
++++  }
++++
++++}
++++
++++void flight_schedule_list(city_t city){
++++  struct flight_schedule *temp = flight_schedules_active;
++++  while(temp != NULL){
++++    if (strcmp(city,temp->destination) == 0){
++++      printf("%p", &temp);
++++    }
++++    temp = temp->next;
++++  }
++++}
++++
++++void flight_schedule_add_flight(city_t city){
++++  flight_schedule_add(city);
++++  struct flight_schedule *temp = flight_schedule_find(city);
++++
++++  int time = time_get();
++++  int capacity = flight_capacity_get();
++++  
++++  if (time == 1 || capacity == 1 ){
++++      return 1;
++++  }
++++
++++  temp->flight->flights[];
++++
++++
++++
++++}
+++
+++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 18:35:40 2020 -0400
+++
+++    correction of free, working on find
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index a03a0af..aae10c7 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++   int counter = 0;
+++   struct flight_schedule *temp = flight_schedules_active;
+++   while(temp != NULL) {
+++-    if(temp == fs){
++++    if(temp == fs){ //use flight schedule find instead
+++       break;
+++     }
+++     temp = temp->next;
+++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     flight_schedule_reset(temp);
+++ 
+++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++-    flight_schedule_free = temp;
++++    flight_schedules_free = temp;
+++     flight_schedules_free->next->prev = flight_schedules_free;
+++     //flight_schedule_reset(temp);
+++ 
+++   }
+++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+++     temp->prev->next = temp->next;
+++     temp->next->prev = temp->prev;
+++     temp->next = NULL;
+++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     flight_schedule_reset(temp);
+++ 
+++     temp->next = flight_schedules_free;
+++-    flight_schedule_free = temp;
++++    flight_schedules_free = temp;
+++     flight_schedules_free->next->prev = flight_schedules_free;
+++   }
+++   else{
+++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
+++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++ 
+++     temp->next = flight_schedules_free;
+++-    flight_schedule_free = temp;
++++    flight_schedules_free = temp;
+++     flight_schedules_free->next->prev = flight_schedules_free;
+++     
+++   }
+++-}
+++\ No newline at end of file
++++}
++++
++++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++++  struct flight_schedule *temp = flight_schedules_active;
++++  while(temp != NULL){
++++    if (strcmp(city,temp->destination) == 0){
++++      return(temp);
++++    }
++++    temp = temp->next;
++++  }
++++}
++++
++++
+++
+++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 15:08:53 2020 -0400
+++
+++    working on flight_schedule_free
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 1f30cd1..a03a0af 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
+++ //flight schedule free
+++ //takes schedule off active list, resets it, then places the node back on free list
+++ void flight_schedule_free(struct flight_schedule *fs){
+++-  struct flight_schedule *temp = flight
++++  int counter = 0;
++++  struct flight_schedule *temp = flight_schedules_active;
++++  while(temp != NULL) {
++++    if(temp == fs){
++++      break;
++++    }
++++    temp = temp->next;
++++    counter++;
++++  }
++++  
++++  if (counter == 0){
++++    flight_schedules_active = temp->next;
++++    flight_schedules_active->prev = NULL;
++++    temp->next = NULL;
++++
++++    flight_schedule_reset(temp);
++++
++++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
++++    flight_schedule_free = temp;
++++    flight_schedules_free->next->prev = flight_schedules_free;
++++    //flight_schedule_reset(temp);
++++
++++  }
++++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++++    temp->prev->next = temp->next;
++++    temp->next->prev = temp->prev;
++++    temp->next = NULL;
++++    temp->prev = NULL;
++++
++++    flight_schedule_reset(temp);
++++
++++    temp->next = flight_schedules_free;
++++    flight_schedule_free = temp;
++++    flight_schedules_free->next->prev = flight_schedules_free;
++++  }
++++  else{
++++    temp->prev = NULL;
++++    flight_schedules_active->prev->next = NULL;
++++
++++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++++
++++    temp->next = flight_schedules_free;
++++    flight_schedule_free = temp;
++++    flight_schedules_free->next->prev = flight_schedules_free;
++++    
++++  }
+++ }
+++\ No newline at end of file
+++
+++commit 4da1a4230cc78e7821817c597d531316ac1feee4
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Mon Sep 28 14:12:10 2020 -0400
+++
+++    correcting allocate
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index ec71f49..1f30cd1 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
+++ //returns pointer to updated flight schedule
+++ struct flight_schedule * flight_schedule_allocate(void){
+++ 
+++-  struct flight_schedule temp = 
++++  struct flight_schedule *temp =  flight_schedules_free;
++++  flight_schedules_free = flight_schedules_free->next;
++++  flight_schedules_free->prev = NULL;
++++  temp->next = flight_schedules_active;
++++
++++  flight_schedules_active = temp;
++++  flight_schedules_active->next->prev = flight_schedules_active;
++++  //temp->prev = NULL;
++++  //struct flight_schedule *temp2 = flight_schedules_active
+++   
+++-  
+++-  
+++-  *flight_schedules_active = *flight_schedules_free->free;
+++-
+++-  
+++-  //flight_schedules_active = flight_schedules_free;
+++-  *flight_schedules_free = *flight_schedules_free->next;
+++-  *flight_schedules_free->prev = NULL;
+++-  return(flight_schedules_active->flights[]);
++++  return(flight_schedules_active);
+++ }
+++ 
+++ //flight schedule free
+++ //takes schedule off active list, resets it, then places the node back on free list
+++ void flight_schedule_free(struct flight_schedule *fs){
+++-  
++++  struct flight_schedule *temp = flight
+++ }
+++\ No newline at end of file
+++
+++commit 7c7197814c779e696458438563f16bc76b197fb2
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Sep 25 18:25:04 2020 -0400
+++
+++    very confused, trying to use pointers to alt sched
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index ff89d23..ec71f49 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
+++   return (af->time - bf->time);
+++ }
+++ 
+++-WRITE SOME CODE!
++++//WRITE SOME CODE!
+++ //flight schedule allocate
++++//takes a schedule off the free list and places it on the active list
++++//returns pointer to updated flight schedule
+++ struct flight_schedule * flight_schedule_allocate(void){
+++-  *flight_schedules_active = *flight_schedules_free;
+++-  *flight_schedules_free = *flight_schedules_free.next;
+++-  return(flight_schedule);
+++-}
+++ 
++++  struct flight_schedule temp = 
++++  
++++  
++++  
++++  *flight_schedules_active = *flight_schedules_free->free;
+++ 
++++  
++++  //flight_schedules_active = flight_schedules_free;
++++  *flight_schedules_free = *flight_schedules_free->next;
++++  *flight_schedules_free->prev = NULL;
++++  return(flight_schedules_active->flights[]);
++++}
+++ 
+++ //flight schedule free
+++-
++++//takes schedule off active list, resets it, then places the node back on free list
+++ void flight_schedule_free(struct flight_schedule *fs){
+++-  *flight_schedule_active = *flight_schedule_free;
+++-  *fs = 
++++  
+++ }
+++\ No newline at end of file
+++
+++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
+++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+++Date:   Fri Sep 25 12:05:56 2020 -0400
+++
+++    starting work on first 3 helper functions
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 31abde4..ff89d23 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
+++ }
+++ 
+++ WRITE SOME CODE!
++++//flight schedule allocate
++++struct flight_schedule * flight_schedule_allocate(void){
++++  *flight_schedules_active = *flight_schedules_free;
++++  *flight_schedules_free = *flight_schedules_free.next;
++++  return(flight_schedule);
++++}
++++
++++
++++
++++//flight schedule free
++++
++++void flight_schedule_free(struct flight_schedule *fs){
++++  *flight_schedule_active = *flight_schedule_free;
++++  *fs = 
++++}
+++\ No newline at end of file
+++
+++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
+++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++Date:   Thu Sep 24 18:32:49 2020 -0400
+++
+++    An update to assignment-3. Fix to assignment-3.c and new refence binary
+++
+++diff --git a/assignment-3.c b/assignment-3.c
+++index 2f5c360..31abde4 100644
+++--- a/assignment-3.c
++++++ b/assignment-3.c
+++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++ // Structure to hold all the information for a single flight
+++ //   A city's schedule has an array of these
+++ struct flight {
+++-  int time;       // departure time of the flight
++++  time_t time;       // departure time of the flight
+++   int available;  // number of seats currently available on the flight
+++   int capacity;   // maximum seat capacity of the flight
+++ };
+++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+++     array[i+1].prev = &array[i];
+++   }
+++   // Takes care of last node.  
+++-  // Its prev pointer will be set in the loop,
+++-  // we just have to set its next to NULL.
++++  flight_schedule_reset(&array[n-1]); // reset clears all fields
+++   array[n-1].next = NULL;
++++  array[n-1].prev = &array[n-2];
+++   flight_schedules_free = &array[0];
+++ }
+++ 
+++diff --git a/reference b/reference
+++index ee9132a..b11f6c6 100755
+++Binary files a/reference and b/reference differ
+++
+++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
+++Author: Jonathan Appavoo <jappavoo@bu.edu>
+++Date:   Mon Sep 21 21:02:39 2020 -0400
+++
+++    Initial Commit to seed assignment 3. Have fun!
+++
+++diff --git a/.gitignore b/.gitignore
+++new file mode 100644
+++index 0000000..8ff04a2
+++--- /dev/null
++++++ b/.gitignore
+++@@ -0,0 +1,4 @@
++++*
++++!assignment-3.c
++++!gitlog.txt
++++
+++diff --git a/.vscode/launch.json b/.vscode/launch.json
+++new file mode 100644
+++index 0000000..5f223b9
+++--- /dev/null
++++++ b/.vscode/launch.json
+++@@ -0,0 +1,30 @@
++++{
++++    // Use IntelliSense to learn about possible attributes.
++++    // Hover to view descriptions of existing attributes.
++++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
++++    "version": "0.2.0",
++++    "configurations": [
++++    
++++
++++        {
++++            "name": "(gdb) Launch",
++++            "type": "cppdbg",
++++            "request": "launch",
++++            "program": "${workspaceFolder}/assignment-3",
++++            "args": [],
++++            "stopAtEntry": true,
++++            "cwd": "${workspaceFolder}",
++++            "environment": [],
++++            "externalConsole": false,
++++            "MIMode": "gdb",
++++            "setupCommands": [
++++                {
++++                    "description": "Enable pretty-printing for gdb",
++++                    "text": "-enable-pretty-printing",
++++                    "ignoreFailures": true
++++                }
++++            ],
++++            "preLaunchTask": "Build"
++++        }
++++    ]
++++}
+++diff --git a/.vscode/settings.json b/.vscode/settings.json
+++new file mode 100644
+++index 0000000..495436f
+++--- /dev/null
++++++ b/.vscode/settings.json
+++@@ -0,0 +1,21 @@
++++{
++++    "git.ignoreLegacyWarning": true,
++++    "files.autoSave": "afterDelay",
++++    "files.exclude": {
++++        ".vscode": true,
++++        "**/*.o": true,
++++        "reference": true,
++++        "assignment-3": true,
++++        "test.sh":true,
++++        "gitlog.txt":true,
++++        ".gitignore":true
++++    },
++++    "editor.renderControlCharacters": true,
++++    "C_Cpp.default.cStandard": "c99",
++++    "C_Cpp.default.cppStandard": "gnu++11",
++++    "C_Cpp.default.defines": [],
++++    "C_Cpp.intelliSenseEngine": "Disabled",
++++    "C_Cpp.workspaceParsingPriority": "low",
++++    "C_Cpp.intelliSenseCacheSize": 100,
++++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
++++}
+++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+++new file mode 100644
+++index 0000000..d02618f
+++--- /dev/null
++++++ b/.vscode/tasks.json
+++@@ -0,0 +1,28 @@
++++{
++++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++++    // for the documentation about the tasks.json format
++++    "version": "2.0.0",
++++    "tasks": [
++++        {
++++            "label": "Build",
++++            "type": "shell",
++++            "command": "make",
++++            "options": {
++++                "cwd": "${workspaceFolder}"
++++            },
++++            "group": {
++++                "kind": "build",
++++                "isDefault": true
++++            },
++++            "presentation": {
++++                "reveal": "always",
++++                "panel": "shared"
++++            },
++++            "problemMatcher": {
++++                "base": "$gcc",
++++                "fileLocation": ["relative", "${workspaceRoot}/"]
++++            }
++++        }
++++        
++++    ]
++++}
+++diff --git a/Makefile b/Makefile
+++new file mode 100644
+++index 0000000..1c3a3d1
+++--- /dev/null
++++++ b/Makefile
+++@@ -0,0 +1,69 @@
++++.PHONY: all clean test gitlog
++++
++++all: assignment-3
++++
++++assignment-3: assignment-3.c
++++	${CC} -std=c99 -g assignment-3.c -o assignment-3
++++
++++test: assignment-3 gitlog
++++	./test.sh
++++
++++test1: assignment-3
++++	./test.sh 1
++++
++++test2: assignment-3
++++	./test.sh 2
++++
++++test3: assignment-3
++++	./test.sh 3
++++
++++test4: assignment-3
++++	./test.sh 4
++++
++++test5: assignment-3
++++	./test.sh 5
++++
++++test6: assignment-3
++++	./test.sh 6
++++
++++test7: assignment-3
++++	./test.sh 7
++++
++++test8: assignment-3
++++	./test.sh 8
++++
++++test9: assignment-3
++++	./test.sh 9
++++
++++test10: assignment-3
++++	./test.sh 10
++++
++++test11: assignment-3
++++	./test.sh 11
++++
++++test12: assignment-3
++++	./test.sh 12
++++
++++test13: assignment-3
++++	./test.sh 13
++++
++++test14: assignment-3
++++	./test.sh 14
++++
++++test15: assignment-3
++++	./test.sh 15
++++
++++test16: assignment-3
++++	./test.sh 16
++++
++++bonus1: assignment-3
++++	./test.sh 1 bonus
++++
++++bonus2: assignment-3
++++	./test.sh 2 bonus
++++
++++gitlog:
++++	git log -p > gitlog.txt
++++
++++clean:
++++	-${RM} assignment-3
+++diff --git a/assignment-3.c b/assignment-3.c
+++new file mode 100644
+++index 0000000..2f5c360
+++--- /dev/null
++++++ b/assignment-3.c
+++@@ -0,0 +1,375 @@
++++/**
++++ * Assignment #3: Strings, structs, pointers, command-line arguments.
++++ *  Let's use our knowledge to write a simple flight management system!
++++ **/
++++
++++#include <stdio.h>
++++#include <string.h>
++++#include <stdlib.h>
++++#include <stdbool.h>
++++#include <assert.h>
++++
++++// Limit constants
++++#define MAX_CITY_NAME_LEN 20
++++#define MAX_FLIGHTS_PER_CITY 5
++++#define MAX_DEFAULT_SCHEDULES 50
++++
++++// Time definitions
++++#define TIME_MIN 0
++++#define TIME_MAX ((60 * 24)-1)
++++#define TIME_NULL -1
++++
++++
++++/******************************************************************************
++++ * Structure and Type definitions                                             *
++++ ******************************************************************************/
++++typedef int time_t;                        // integers used for time values
++++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++++ 
++++// Structure to hold all the information for a single flight
++++//   A city's schedule has an array of these
++++struct flight {
++++  int time;       // departure time of the flight
++++  int available;  // number of seats currently available on the flight
++++  int capacity;   // maximum seat capacity of the flight
++++};
++++
++++// Structure for an individual flight schedule
++++// The main data structure of the program is an Array of these structures
++++// Each structure will be placed on one of two linked lists:
++++//                free or active
++++// Initially the active list will be empty and all the schedules
++++// will be on the free list.  Adding a schedule is finding the first
++++// free schedule on the free list, removing it from the free list,
++++// setting its destination city and putting it on the active list
++++struct flight_schedule {
++++  city_t destination;                          // destination city name
++++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
++++  struct flight_schedule *next;                // link list next pointer
++++  struct flight_schedule *prev;                // link list prev pointer
++++};
++++
++++/******************************************************************************
++++ * Global / External variables                                                *
++++ ******************************************************************************/
++++// This program uses two global linked lists of Schedules.  See comments
++++// of struct flight_schedule above for details
++++struct flight_schedule *flight_schedules_free = NULL;
++++struct flight_schedule *flight_schedules_active = NULL;
++++
++++
++++/******************************************************************************
++++ * Function Prototypes                                                        *
++++ ******************************************************************************/
++++// Misc utility io functions
++++int city_read(city_t city);           
++++bool time_get(time_t *time_ptr);      
++++bool flight_capacity_get(int *capacity_ptr);
++++void print_command_help(void);
++++
++++// Core functions of the program
++++void flight_schedule_initialize(struct flight_schedule array[], int n);
++++struct flight_schedule * flight_schedule_find(city_t city);
++++struct flight_schedule * flight_schedule_allocate(void);
++++void flight_schedule_free(struct flight_schedule *fs);
++++void flight_schedule_add(city_t city);
++++void flight_schedule_listAll(void);
++++void flight_schedule_list(city_t city);
++++void flight_schedule_add_flight(city_t city);
++++void flight_schedule_remove_flight(city_t city);
++++void flight_schedule_schedule_seat(city_t city);
++++void flight_schedule_unschedule_seat(city_t city);
++++void flight_schedule_remove(city_t city);
++++
++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
++++int  flight_compare_time(const void *a, const void *b);
++++
++++
++++int main(int argc, char *argv[]) 
++++{
++++  long n = MAX_DEFAULT_SCHEDULES;
++++  char command;
++++  city_t city;
++++
++++  if (argc > 1) {
++++    // If the program was passed an argument then try and convert the first
++++    // argument in the a number that will override the default max number
++++    // of schedule we will support
++++    char *end;
++++    n = strtol(argv[1], &end, 10); // CPAMA p 787
++++    if (n==0) {
++++      printf("ERROR: Bad number of default max scedules specified.\n");
++++      exit(EXIT_FAILURE);
++++    }
++++  }
++++
++++  // C99 lets us allocate an array of a fixed length as a local 
++++  // variable.  Since we are doing this in main and a call to main will be 
++++  // active for the entire time of the program's execution this
++++  // array will be alive for the entire time -- its memory and values
++++  // will be stable for the entire program execution.
++++  struct flight_schedule flight_schedules[n];
++++ 
++++  // Initialize our global lists of free and active schedules using
++++  // the elements of the flight_schedules array
++++  flight_schedule_initialize(flight_schedules, n);
++++
++++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
++++  //  When possible, if we know that some particular thing should have happened
++++  //  we think of that as an assertion and write code to test them.
++++  // Use the assert function (CPAMA p749) to be sure the initilization has set
++++  // the free list to a non-null value and the the active list is a null value.
++++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
++++
++++  // Print the instruction in the beginning
++++  print_command_help();
++++
++++  // Command processing loop
++++  while (scanf(" %c", &command) == 1) {
++++    switch (command) {
++++    case 'A': 
++++      //  Add an active flight schedule for a new city eg "A Toronto\n"
++++      city_read(city);
++++      flight_schedule_add(city);
++++
++++      break;
++++    case 'L':
++++      // List all active flight schedules eg. "L\n"
++++      flight_schedule_listAll();
++++      break;
++++    case 'l': 
++++      // List the flights for a particular city eg. "l\n"
++++      city_read(city);
++++      flight_schedule_list(city);
++++      break;
++++    case 'a':
++++      // Adds a flight for a particular city "a Toronto\n
++++      //                                      360 100\n"
++++      city_read(city);
++++      flight_schedule_add_flight(city);
++++      break;
++++    case 'r':
++++      // Remove a flight for a particular city "r Toronto\n
++++      //                                        360\n"
++++      city_read(city);
++++      flight_schedule_remove_flight(city);
++++	break;
++++    case 's':
++++      // schedule a seat on a flight for a particular city "s Toronto\n
++++      //                                                    300\n"
++++      city_read(city);
++++      flight_schedule_schedule_seat(city);
++++      break;
++++    case 'u':
++++      // unschedule a seat on a flight for a particular city "u Toronto\n
++++      //                                                      360\n"
++++        city_read(city);
++++        flight_schedule_unschedule_seat(city);
++++        break;
++++    case 'R':
++++      // remove the schedule for a particular city "R Toronto\n"
++++      city_read(city);
++++      flight_schedule_remove(city);  
++++      break;
++++    case 'h':
++++        print_command_help();
++++        break;
++++    case 'q':
++++      goto done;
++++    default:
++++      printf("Bad command. Use h to see help.\n");
++++    }
++++  }
++++ done:
++++  return EXIT_SUCCESS;
++++}
++++
++++/**********************************************************************
++++ * city_read: Takes in and processes a given city following a command *
++++ *********************************************************************/
++++int city_read(city_t city) {
++++  int ch, i=0;
++++
++++  // skip leading non letter characters
++++  while (true) {
++++    ch = getchar();
++++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
++++      city[i++] = ch;
++++      break;
++++    }
++++  }
++++  while ((ch = getchar()) != '\n') {
++++    if (i < MAX_CITY_NAME_LEN) {
++++      city[i++] = ch;
++++    }
++++  }
++++  city[i] = '\0';
++++  return i;
++++}
++++
++++
++++/****************************************************************
++++ * Message functions so that your messages match what we expect *
++++ ****************************************************************/
++++void msg_city_bad(char *city) {
++++  printf("No schedule for %s\n", city);
++++}
++++
++++void msg_city_exists(char *city) {
++++  printf("There is a schedule of %s already.\n", city);
++++}
++++
++++void msg_schedule_no_free(void) {
++++  printf("Sorry no more free schedules.\n");
++++}
++++
++++void msg_city_flights(char *city) {
++++  printf("The flights for %s are:", city);
++++}
++++
++++void msg_flight_info(int time, int avail, int capacity) {
++++  printf(" (%d, %d, %d)", time, avail, capacity);
++++}
++++
++++void msg_city_max_flights_reached(char *city) {
++++  printf("Sorry we cannot add more flights on this city.\n");
++++}
++++
++++void msg_flight_bad_time(void) {
++++  printf("Sorry there's no flight scheduled on this time.\n");
++++}
++++
++++void msg_flight_no_seats(void) {
++++    printf("Sorry there's no more seats available!\n");
++++}
++++
++++void msg_flight_all_seats_empty(void) {
++++  printf("All the seats on this flights are empty!\n");
++++}
++++
++++void msg_time_bad() {
++++  printf("Invalid time value\n");
++++}
++++
++++void msg_capacity_bad() {
++++  printf("Invalid capacity value\n");
++++}
++++
++++void print_command_help()
++++{
++++  printf("Here are the possible commands:\n"
++++	 "A <city name>     - Add an active empty flight schedule for\n"
++++	 "                    <city name>\n"
++++	 "L                 - List cities which have an active schedule\n"
++++	 "l <city name>     - List the flights for <city name>\n"
++++	 "a <city name>\n"
++++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
++++	 "                    with <capacity> seats\n"  
++++	 "r <city name>\n"
++++         "<time>            - Remove a flight form <city name> whose time is\n"
++++	 "                    <time>\n"
++++	 "s <city name>\n"
++++	 "<time>            - Attempt to schedule seat on flight to \n"
++++	 "                    <city name> at <time> or next closest time on\n"
++++	 "                    which their is an available seat\n"
++++	 "u <city name>\n"
++++	 "<time>            - unschedule a seat from flight to <city name>\n"
++++	 "                    at <time>\n"
++++	 "R <city name>     - Remove schedule for <city name>\n"
++++	 "h                 - print this help message\n"
++++	 "q                 - quit\n"
++++);
++++}
++++
++++
++++/****************************************************************
++++ * Resets a flight schedule                                     *
++++ ****************************************************************/
++++void flight_schedule_reset(struct flight_schedule *fs) {
++++    fs->destination[0] = 0;
++++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
++++      fs->flights[i].time = TIME_NULL;
++++      fs->flights[i].available = 0;
++++      fs->flights[i].capacity = 0;
++++    }
++++    fs->next = NULL;
++++    fs->prev = NULL;
++++}
++++
++++/******************************************************************
++++* Initializes the flight_schedule array that will hold any flight *
++++* schedules created by the user. This is called in main for you.  *
++++ *****************************************************************/
++++
++++void flight_schedule_initialize(struct flight_schedule array[], int n)
++++{
++++  flight_schedules_active = NULL;
++++  flight_schedules_free = NULL;
++++
++++  // takes care of empty array case
++++  if (n==0) return;
++++
++++  // Loop through the Array connecting them
++++  // as a linear doubly linked list
++++  array[0].prev = NULL;
++++  for (int i=0; i<n-1; i++) {
++++    flight_schedule_reset(&array[i]);
++++    array[i].next = &array[i+1];
++++    array[i+1].prev = &array[i];
++++  }
++++  // Takes care of last node.  
++++  // Its prev pointer will be set in the loop,
++++  // we just have to set its next to NULL.
++++  array[n-1].next = NULL;
++++  flight_schedules_free = &array[0];
++++}
++++
++++/***********************************************************
++++ * time_get: read a time from the user
++++   Time in this program is a minute number 0-((24*60)-1)=1439
++++   -1 is used to indicate the NULL empty time 
++++   This function should read in a time value and check its 
++++   validity.  If it is not valid eg. not -1 or not 0-1439
++++   It should print "Invalid Time" and return false.
++++   othewise it should return the value in the integer pointed
++++   to by time_ptr.
++++ ***********************************************************/
++++bool time_get(int *time_ptr) {
++++  if (scanf("%d", time_ptr)==1) {
++++    return (TIME_NULL == *time_ptr || 
++++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
++++  } 
++++  msg_time_bad();
++++  return false;
++++}
++++
++++/***********************************************************
++++ * flight_capacity_get: read the capacity of a flight from the user
++++   This function should read in a capacity value and check its 
++++   validity.  If it is not greater than 0, it should print 
++++   "Invalid capacity value" and return false. Othewise it should 
++++   return the value in the integer pointed to by cap_ptr.
++++ ***********************************************************/
++++bool flight_capacity_get(int *cap_ptr) {
++++  if (scanf("%d", cap_ptr)==1) {
++++    return *cap_ptr > 0;
++++  }
++++  msg_capacity_bad();
++++  return false;
++++}
++++
++++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
++++{
++++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
++++	flight_compare_time);
++++}
++++
++++int flight_compare_time(const void *a, const void *b) 
++++{
++++  const struct flight *af = a;
++++  const struct flight *bf = b;
++++  
++++  return (af->time - bf->time);
++++}
++++
++++WRITE SOME CODE!
+++diff --git a/gitlog.txt b/gitlog.txt
+++new file mode 100644
+++index 0000000..e69de29
+++diff --git a/reference b/reference
+++new file mode 100755
+++index 0000000..ee9132a
+++Binary files /dev/null and b/reference differ
+++diff --git a/test.sh b/test.sh
+++new file mode 100755
+++index 0000000..f8ecbf4
+++--- /dev/null
++++++ b/test.sh
+++@@ -0,0 +1,328 @@
++++#!/bin/bash
++++#set -x
++++
++++REFERENCE=./reference
++++PGM=./assignment-3
++++
++++# To add a test you can add an element the REQUIRED arrays 
++++# or BONUS Arrays
++++# Each test can have a descripttion, input and optionally a num
++++# num is passed as the argument on the command line to set
++++# the default max schedule size
++++
++++# Required tests
++++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
++++REQUIRED_INPUT[0]="L
++++A Toronto
++++L"
++++
++++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
++++REQUIRED_INPUT[1]="L
++++A Toronto
++++l Toronto
++++a Toronto
++++1000 5
++++l Toronto"
++++
++++REQUIRED_NUM[2]="2"
++++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
++++REQUIRED_INPUT[2]="L
++++A City1
++++A City2
++++L
++++A City3
++++L"
++++
++++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
++++REQUIRED_INPUT[3]="A Naples
++++A Addis Ababa
++++L
++++R Naples
++++L"
++++
++++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
++++REQUIRED_INPUT[4]="A San Jose
++++a San Jose
++++360 100
++++l San Jose
++++r San Jose
++++360
++++l San Jose"
++++
++++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
++++REQUIRED_INPUT[5]="A Hanoi
++++r Hanoi
++++100"
++++
++++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
++++REQUIRED_INPUT[6]="A Cartagena
++++a Cartagena
++++720 100
++++a Cartagena
++++840 120
++++s Cartagena
++++480
++++l Cartagena"
++++
++++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
++++REQUIRED_INPUT[7]="L
++++A Abu Dhabi
++++a Abu Dhabi
++++360 50
++++a Abu Dhabi
++++840 100
++++s Abu Dhabi
++++700
++++l Abu Dhabi
++++u Abu Dhabi
++++840
++++l Abu Dhabi"
++++
++++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
++++REQUIRED_INPUT[8]="L
++++A Belgrade
++++a Belgrade
++++400 1
++++s Belgrade
++++400
++++l Belgrade
++++s Belgrade
++++400
++++l Belgrade"
++++
++++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
++++REQUIRED_INPUT[9]="L
++++A Kyoto
++++a Kyoto
++++300 5
++++l Kyoto
++++u Kyoto
++++300
++++l Kyoto"
++++
++++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
++++REQUIRED_INPUT[10]="L
++++A Mumbai
++++a Mumbai
++++900 3
++++l Mumbai
++++u Mumbai
++++300
++++l Mumbai"
++++
++++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
++++REQUIRED_INPUT[11]="L
++++A Prague
++++a Prague
++++360 5
++++a Prague
++++720 100
++++l Prague
++++s Prague
++++900
++++l Prague"
++++
++++REQUIRED_NUM[12]="2"
++++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
++++REQUIRED_INPUT[12]="L
++++A City1
++++L
++++A City2
++++L
++++A City3
++++L
++++R City1
++++L
++++R City2
++++L
++++R City3
++++L
++++A City1
++++L"
++++
++++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
++++REQUIRED_INPUT[13]="L
++++A City1
++++a City1
++++60 5
++++l City1
++++a City1
++++120 5
++++l City1
++++a City1
++++180 5
++++l City1
++++a City1
++++240 5
++++l City1
++++a City1
++++300 5
++++l City1
++++a City1
++++360 5
++++l City1
++++r City1
++++360
++++l City1
++++r City1
++++300
++++l City1
++++r City1
++++240
++++l City1
++++r City1
++++180
++++l City1
++++r City1
++++120
++++l City1
++++r City1
++++60
++++l City1
++++a City1
++++60 5
++++l City1"
++++
++++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
++++REQUIRED_INPUT[14]="L
++++A City1
++++a City1
++++60 3
++++l City1
++++s City1
++++60
++++l City1
++++s City1
++++60
++++l City1
++++s City1
++++60
++++l City1
++++s City1
++++60
++++l City1
++++u City1
++++60
++++l City1
++++u City1
++++60
++++l City1
++++u City1
++++60
++++l City1
++++u City1
++++60
++++l City1"
++++
++++REQUIRED_DESC[15]="Required 16: A bigger test "
++++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
++++REQUIRED_VALUE[15]=5
++++
++++
++++# Bonus tests
++++BONUS_DESC[0]="Bonus 1: Medium sized test"
++++BONUS_INPUT[0]="$(cat testMedium.txt)"
++++BONUS_VALUE[0]=3
++++
++++BONUS_DESC[1]="Bonus 2: Large sized test"
++++BONUS_INPUT[1]="$(cat testBig.txt)"
++++BONUS_VALUE[1]=5
++++
++++
++++function run_test()
++++{
++++   description="$1"
++++   input="$2"
++++   num="$3"
++++
++++   echo -n "$description : "
++++   [[ -n $VERBOSE ]] &&  echo "Input:"
++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++   [[ -n $VERBOSE ]] &&  echo "$input"
++++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++++
++++   solution=$($REFERENCE $num <<EOF
++++$input
++++EOF
++++)
++++
++++   answer=$($PGM $num<<EOF
++++$input
++++EOF
++++)
++++
++++  if [[ -n $DEBUG ]]; then
++++      echo "$solution"
++++  else
++++    if [[ "$answer" == "$solution" ]]; then
++++       echo "PASS"
++++       return 0
++++    fi
++++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
++++    echo "FAIL"
++++    [[ -n $VERBOSE ]] && echo "Your program produced:"
++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++    [[ -n $VERBOSE ]] && echo "$answers"    
++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++    [[ -n $VERBOSE ]] && echo "Output should have been:"
++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++    [[ -n $VERBOSE ]] && echo "$solution"
++++    [[ -n $VERBOSE ]] && echo "--------------------------"
++++    [[ -n $VERBOSE ]] && echo ""
++++  fi
++++  return 1
++++}
++++
++++testnum=$1
++++type=$2
++++
++++total=0
++++correct=0
++++
++++if [[ -z $testnum ]]; then
++++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
++++	value="${REQUIRED_VALUE[$i]}"
++++	[[ -z $value ]] && value=1
++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++	    (( correct += $value ))
++++	fi
++++	(( total += value ))
++++    done
++++    
++++    
++++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
++++	value="${BONUS_VALUE[$i]}"
++++	[[ -z $value ]] && value=1
++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++	    (( correct += $value ))
++++	fi
++++    done
++++else
++++    VERBOSE=1
++++    (( i=$testnum - 1 ))
++++    if [[ -z "$type" ]]; then
++++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
++++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
++++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
++++	    exit -1
++++	fi
++++	value="${REQUIRED_VALUE[$i]}"
++++	[[ -z $value ]] && value=1
++++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++++	    (( correct += $value ))
++++	fi
++++	(( total += value ))
++++    else
++++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
++++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
++++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
++++	    exit -1
++++	fi	
++++	value="${BONUS_VALUE[$i]}"
++++	[[ -z $value ]] && value=1
++++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++++         (( correct += $value ))
++++	fi
++++    fi
++++fi
++++echo "score: ${correct}/${total}"
+++diff --git a/testBig.txt b/testBig.txt
+++new file mode 100644
+++index 0000000..90170d5
+++--- /dev/null
++++++ b/testBig.txt
+++@@ -0,0 +1,1251 @@
++++L
++++A Qingdao
++++A Paris
++++A Lima
++++A Los Angeles
++++A Khartoum
++++A Barcelona
++++A Santiago
++++A Tokyo
++++A Delhi
++++A Guangzhou
++++A Johannesburg
++++A Paris
++++A Dhaka
++++A Chennai
++++A Jinan
++++A Luanda
++++A Surat
++++A Hyderabad
++++A Beijing
++++A Atlanta
++++A Chennai
++++A Dar es Salaam
++++A Osaka
++++A Hong Kong
++++A Toronto
++++A Saint Petersburg
++++A Manila
++++A Washington, D.C.
++++A Tehran
++++A Miami
++++A Khartoum
++++A Seoul
++++A Dar es Salaam
++++A Sao Paulo
++++A Baghdad
++++A Guadalajara
++++A Ahmedabad
++++A Moscow
++++A Philadelphia
++++A Fukuoka
++++a Tokyo
++++1414 113
++++a Guadalajara
++++385 170
++++a Qingdao
++++782 37
++++a Ahmedabad
++++1411 50
++++a Los Angeles
++++517 84
++++a Tehran
++++86 61
++++a Osaka
++++1289 162
++++a Barcelona
++++1261 158
++++a Fukuoka
++++550 191
++++a Seoul
++++207 1
++++a Manila
++++364 96
++++a Khartoum
++++56 194
++++a Tokyo
++++98 1
++++a Saint Petersburg
++++1330 107
++++a Baghdad
++++15 15
++++a Chennai
++++1169 127
++++a Beijing
++++807 97
++++a Seoul
++++1134 34
++++a Jinan
++++220 102
++++a Dhaka
++++122 101
++++a Luanda
++++1342 71
++++a Guadalajara
++++195 35
++++a Fukuoka
++++28 37
++++a Beijing
++++678 83
++++a Khartoum
++++947 39
++++a Hyderabad
++++490 104
++++a Sao Paulo
++++62 83
++++a Baghdad
++++1319 24
++++a Delhi
++++718 115
++++a Baghdad
++++204 114
++++a Surat
++++430 74
++++a Miami
++++918 87
++++a Surat
++++455 95
++++a Fukuoka
++++1077 131
++++a Luanda
++++311 21
++++a Seoul
++++1132 155
++++a Lima
++++432 177
++++a Surat
++++494 102
++++a Washington, D.C.
++++667 12
++++a Hong Kong
++++200 55
++++a Los Angeles
++++1195 4
++++a Ahmedabad
++++610 161
++++a Delhi
++++508 110
++++a Atlanta
++++17 21
++++a Washington, D.C.
++++162 23
++++a Luanda
++++1216 15
++++a Tokyo
++++1095 117
++++a Philadelphia
++++1436 117
++++a Atlanta
++++277 164
++++a Manila
++++720 147
++++a Tokyo
++++1017 25
++++a Jinan
++++76 66
++++a Toronto
++++844 84
++++a Santiago
++++7 115
++++a Surat
++++388 55
++++a Tehran
++++836 174
++++a Paris
++++371 110
++++a Sao Paulo
++++516 113
++++a Luanda
++++1041 174
++++a Dhaka
++++1076 34
++++a Guadalajara
++++162 144
++++a Los Angeles
++++424 33
++++a Philadelphia
++++565 167
++++a Luanda
++++1411 44
++++a Osaka
++++1005 82
++++a Fukuoka
++++1253 194
++++a Atlanta
++++141 102
++++a Fukuoka
++++1119 112
++++a Toronto
++++782 150
++++a Dhaka
++++1006 96
++++a Miami
++++961 126
++++a Lima
++++360 41
++++a Lima
++++14 50
++++a Dhaka
++++1028 191
++++a Philadelphia
++++502 115
++++a Washington, D.C.
++++1380 59
++++a Atlanta
++++548 113
++++a Fukuoka
++++694 183
++++a Saint Petersburg
++++261 26
++++a Jinan
++++196 53
++++a Delhi
++++315 78
++++a Delhi
++++625 92
++++a Ahmedabad
++++105 98
++++a Philadelphia
++++111 15
++++a Atlanta
++++321 31
++++a Ahmedabad
++++1244 59
++++a Osaka
++++799 173
++++a Khartoum
++++302 7
++++a Luanda
++++823 190
++++a Chennai
++++754 139
++++a Los Angeles
++++1028 78
++++a Miami
++++1123 183
++++a Dar es Salaam
++++1353 102
++++a Beijing
++++473 88
++++a Paris
++++698 95
++++a Barcelona
++++545 170
++++a Chennai
++++382 85
++++a Miami
++++821 114
++++a Luanda
++++584 161
++++a Fukuoka
++++38 26
++++a Jinan
++++536 148
++++a Manila
++++1403 133
++++a Washington, D.C.
++++917 130
++++a Sao Paulo
++++1169 81
++++a Santiago
++++689 42
++++a Ahmedabad
++++279 30
++++a Los Angeles
++++881 35
++++a Jinan
++++1293 148
++++a Guangzhou
++++1366 38
++++a Santiago
++++317 123
++++a Tokyo
++++454 104
++++a Atlanta
++++626 177
++++a Surat
++++69 135
++++a Luanda
++++1426 19
++++a Barcelona
++++879 46
++++a Los Angeles
++++1329 90
++++a Beijing
++++402 60
++++a Lima
++++727 161
++++a Hyderabad
++++601 186
++++a Khartoum
++++294 183
++++a Hyderabad
++++267 131
++++a Manila
++++771 102
++++a Osaka
++++103 68
++++a Atlanta
++++848 147
++++a Atlanta
++++811 179
++++a Toronto
++++402 131
++++a Guadalajara
++++804 28
++++a Qingdao
++++16 114
++++a Beijing
++++1218 14
++++a Moscow
++++498 195
++++a Surat
++++528 48
++++a Manila
++++865 4
++++a Guangzhou
++++328 24
++++a Dhaka
++++227 50
++++a Manila
++++124 91
++++a Philadelphia
++++218 104
++++a Dar es Salaam
++++209 34
++++a Chennai
++++641 179
++++a Barcelona
++++1433 171
++++a Lima
++++957 60
++++a Dhaka
++++1292 111
++++a Qingdao
++++647 40
++++a Khartoum
++++417 3
++++a Tehran
++++751 180
++++a Barcelona
++++778 118
++++a Luanda
++++204 59
++++a Ahmedabad
++++541 34
++++a Ahmedabad
++++539 33
++++a Los Angeles
++++824 193
++++a Tehran
++++1412 39
++++s Luanda
++++1418
++++s Toronto
++++857
++++s Lima
++++22
++++s Tehran
++++100
++++s Washington
++++175
++++s Dhaka
++++132
++++s Jinan
++++90
++++s Beijing
++++812
++++s Barcelona
++++1268
++++s Dhaka
++++228
++++s Dhaka
++++229
++++s Osaka
++++1295
++++s Los Angeles
++++527
++++s Ahmedabad
++++620
++++s Tokyo
++++461
++++s Luanda
++++588
++++s Tehran
++++1420
++++s Jinan
++++228
++++s Hyderabad
++++497
++++s Manila
++++879
++++s Delhi
++++720
++++s Surat
++++442
++++s Lima
++++21
++++s Delhi
++++630
++++s Tehran
++++836
++++s Dhaka
++++1042
++++s Atlanta
++++558
++++s Khartoum
++++300
++++s Luanda
++++1050
++++s Lima
++++445
++++s Hong Kong
++++213
++++s Delhi
++++318
++++s Manila
++++725
++++s Dhaka
++++1300
++++s Tokyo
++++1028
++++s Lima
++++23
++++s Qingdao
++++24
++++s Ahmedabad
++++542
++++s Barcelona
++++1274
++++s Santiago
++++7
++++s Surat
++++467
++++s Chennai
++++392
++++s Fukuoka
++++551
++++s Fukuoka
++++704
++++s Fukuoka
++++34
++++s Fukuoka
++++1131
++++s Ahmedabad
++++541
++++s Philadelphia
++++566
++++s Surat
++++506
++++s Khartoum
++++952
++++s Guadalajara
++++389
++++s Tokyo
++++1031
++++s Baghdad
++++24
++++s Khartoum
++++307
++++s Lima
++++370
++++s Atlanta
++++812
++++s Sao Paulo
++++1176
++++s Manila
++++1411
++++s Khartoum
++++294
++++s Seoul
++++1148
++++s Guadalajara
++++814
++++s Khartoum
++++314
++++s Manila
++++1410
++++s Khartoum
++++302
++++s Philadelphia
++++230
++++s Lima
++++728
++++s Ahmedabad
++++548
++++s Fukuoka
++++1121
++++s Baghdad
++++206
++++s Ahmedabad
++++1424
++++s Santiago
++++11
++++s Lima
++++364
++++s Manila
++++128
++++s Tokyo
++++460
++++s Surat
++++469
++++s Barcelona
++++1274
++++s Guadalajara
++++816
++++s Guadalajara
++++811
++++s Luanda
++++597
++++s Atlanta
++++852
++++s Guadalajara
++++811
++++s Manila
++++1409
++++s Miami
++++918
++++s Luanda
++++593
++++s Barcelona
++++1440
++++s Dhaka
++++132
++++s Lima
++++363
++++s Ahmedabad
++++1251
++++s Los Angeles
++++521
++++s Fukuoka
++++38
++++s Beijing
++++686
++++s Fukuoka
++++1126
++++s Guadalajara
++++196
++++s Baghdad
++++206
++++s Los Angeles
++++522
++++s Ahmedabad
++++553
++++s Ahmedabad
++++1416
++++s Philadelphia
++++113
++++s Dar es Salaam
++++217
++++s Lima
++++958
++++s Tehran
++++752
++++s Washington
++++680
++++s Tehran
++++756
++++s Khartoum
++++299
++++s Dhaka
++++1084
++++s Manila
++++878
++++s Ahmedabad
++++541
++++s Ahmedabad
++++119
++++s Ahmedabad
++++616
++++s Tehran
++++756
++++s Tehran
++++765
++++s Philadelphia
++++569
++++s Ahmedabad
++++283
++++s Washington
++++1387
++++s Saint Petersburg
++++274
++++s Dhaka
++++1037
++++s Philadelphia
++++506
++++s Luanda
++++593
++++s Philadelphia
++++232
++++s Dhaka
++++233
++++s Baghdad
++++1329
++++s Chennai
++++768
++++s Barcelona
++++546
++++s Sao Paulo
++++529
++++s Jinan
++++543
++++s Philadelphia
++++121
++++s Tehran
++++759
++++s Lima
++++964
++++s Miami
++++923
++++s Los Angeles
++++1195
++++s Jinan
++++200
++++s Jinan
++++224
++++s Beijing
++++1220
++++s Lima
++++368
++++s Philadelphia
++++1436
++++s Tehran
++++95
++++s Miami
++++928
++++s Baghdad
++++1326
++++s Beijing
++++483
++++s Qingdao
++++647
++++s Fukuoka
++++42
++++s Los Angeles
++++1033
++++s Los Angeles
++++836
++++s Osaka
++++1010
++++s Manila
++++865
++++s Miami
++++825
++++s Barcelona
++++553
++++s Tehran
++++757
++++s Jinan
++++88
++++s Luanda
++++1355
++++s Saint Petersburg
++++266
++++s Surat
++++459
++++s Philadelphia
++++576
++++s Philadelphia
++++1441
++++s Paris
++++709
++++s Manila
++++734
++++s Toronto
++++785
++++s Manila
++++135
++++s Lima
++++368
++++s Lima
++++967
++++s Delhi
++++731
++++s Beijing
++++403
++++s Santiago
++++692
++++s Tehran
++++1416
++++s Dar es Salaam
++++1358
++++s Seoul
++++1134
++++s Philadelphia
++++579
++++s Guangzhou
++++342
++++s Osaka
++++116
++++s Guadalajara
++++397
++++s Dhaka
++++1040
++++s Toronto
++++793
++++s Qingdao
++++25
++++s Baghdad
++++1332
++++s Osaka
++++1017
++++s Los Angeles
++++1338
++++s Ahmedabad
++++551
++++s Guangzhou
++++331
++++s Tehran
++++1420
++++s Dar es Salaam
++++215
++++s Tokyo
++++462
++++s Atlanta
++++859
++++s Fukuoka
++++554
++++s Ahmedabad
++++1423
++++s Jinan
++++229
++++s Dhaka
++++1294
++++s Ahmedabad
++++1250
++++s Ahmedabad
++++621
++++s Delhi
++++626
++++s Manila
++++129
++++s Luanda
++++204
++++s Surat
++++440
++++s Atlanta
++++22
++++s Ahmedabad
++++1251
++++s Khartoum
++++302
++++s Surat
++++73
++++s Guadalajara
++++209
++++s Manila
++++721
++++s Toronto
++++793
++++s Dar es Salaam
++++216
++++s Manila
++++785
++++s Ahmedabad
++++116
++++s Barcelona
++++548
++++s Dhaka
++++1041
++++s Khartoum
++++305
++++s Los Angeles
++++1208
++++s Dhaka
++++1079
++++s Tokyo
++++1422
++++s Manila
++++722
++++s Osaka
++++1298
++++s Surat
++++431
++++s Khartoum
++++294
++++s Barcelona
++++1445
++++s Luanda
++++589
++++s Chennai
++++645
++++s Luanda
++++835
++++s Manila
++++773
++++s Fukuoka
++++1256
++++s Dhaka
++++1300
++++s Philadelphia
++++230
++++s Philadelphia
++++571
++++s Hong Kong
++++209
++++s Khartoum
++++419
++++s Paris
++++706
++++s Sao Paulo
++++516
++++s Tehran
++++843
++++s Khartoum
++++429
++++s Khartoum
++++66
++++s Guadalajara
++++815
++++s Khartoum
++++63
++++s Guadalajara
++++397
++++s Baghdad
++++218
++++s Saint Petersburg
++++274
++++s Dar es Salaam
++++1359
++++s Lima
++++439
++++s Khartoum
++++312
++++s Luanda
++++1345
++++s Seoul
++++220
++++s Tokyo
++++1020
++++s Atlanta
++++25
++++s Sao Paulo
++++1179
++++s Manila
++++732
++++s Philadelphia
++++122
++++s Manila
++++723
++++s Baghdad
++++205
++++s Osaka
++++1018
++++s Tehran
++++762
++++s Luanda
++++1412
++++s Toronto
++++845
++++s Qingdao
++++24
++++s Surat
++++528
++++s Chennai
++++385
++++s Ahmedabad
++++542
++++s Philadelphia
++++1447
++++s Lima
++++733
++++s Guadalajara
++++205
++++s Delhi
++++326
++++s Chennai
++++754
++++s Atlanta
++++823
++++s Manila
++++377
++++s Khartoum
++++303
++++s Delhi
++++512
++++s Surat
++++498
++++s Guadalajara
++++165
++++s Manila
++++720
++++s Washington
++++170
++++s Hyderabad
++++280
++++s Lima
++++370
++++s Tokyo
++++98
++++s Toronto
++++854
++++s Ahmedabad
++++618
++++s Toronto
++++858
++++s Tehran
++++1421
++++s Qingdao
++++783
++++s Barcelona
++++784
++++s Santiago
++++690
++++s Fukuoka
++++1082
++++s Jinan
++++232
++++s Chennai
++++385
++++s Paris
++++710
++++s Tokyo
++++1427
++++s Chennai
++++754
++++s Miami
++++920
++++s Toronto
++++407
++++s Guadalajara
++++806
++++s Miami
++++923
++++s Philadelphia
++++226
++++s Manila
++++720
++++s Manila
++++133
++++s Toronto
++++852
++++s Barcelona
++++886
++++s Sao Paulo
++++68
++++s Delhi
++++630
++++s Los Angeles
++++428
++++s Washington
++++917
++++s Atlanta
++++322
++++s Atlanta
++++549
++++s Manila
++++137
++++s Miami
++++1135
++++s Guadalajara
++++399
++++A Dar es Salaam
++++a Qingdao
++++1015 95
++++u Toronto
++++402
++++A Lagos
++++L
++++a Qingdao
++++910 139
++++R Dar es Salaam
++++r Washington
++++917
++++u Osaka
++++103
++++R Tokyo
++++a Baghdad
++++309 68
++++L
++++R Jinan
++++L
++++s Washington
++++170
++++L
++++R Hyderabad
++++r Lima
++++727
++++u Khartoum
++++302
++++A Nagoya
++++u Los Angeles
++++1329
++++a Luanda
++++1364 38
++++r Philadelphia
++++1436
++++A Johannesburg
++++A New York City
++++a Los Angeles
++++270 149
++++A Los Angeles
++++R Manila
++++r Beijing
++++473
++++A Beijing
++++r Tokyo
++++1414
++++a Lima
++++1003 11
++++r Dhaka
++++227
++++s Fukuoka
++++38
++++s Moscow
++++499
++++u Delhi
++++508
++++r Jinan
++++220
++++L
++++a Qingdao
++++314 81
++++s Manila
++++878
++++a Sao Paulo
++++457 134
++++L
++++R Hong Kong
++++A Nagoya
++++s Lima
++++962
++++u Baghdad
++++1319
++++L
++++R Dhaka
++++L
++++u Lima
++++432
++++a Barcelona
++++756 138
++++s Toronto
++++784
++++u Dar es Salaam
++++209
++++R Miami
++++u Washington
++++1380
++++s Manila
++++784
++++A London
++++s Surat
++++459
++++L
++++A Manila
++++A Istanbul
++++r Toronto
++++782
++++r Saint Petersburg
++++1330
++++s Guadalajara
++++396
++++A Tianjin
++++r Tokyo
++++98
++++R Luanda
++++r Dhaka
++++122
++++R Lagos
++++u Fukuoka
++++694
++++r Jinan
++++76
++++u Sao Paulo
++++457
++++a Philadelphia
++++455 175
++++L
++++u Delhi
++++718
++++r Osaka
++++1005
++++A Harbin
++++u Luanda
++++584
++++r Los Angeles
++++424
++++L
++++u Los Angeles
++++824
++++L
++++R Khartoum
++++r Barcelona
++++545
++++r Philadelphia
++++502
++++R Moscow
++++r Hyderabad
++++601
++++u Los Angeles
++++824
++++A Nagoya
++++R Washington, D.C.
++++L
++++L
++++s Qingdao
++++790
++++R Sao Paulo
++++A Shanghai
++++A Paris
++++u Beijing
++++402
++++r Philadelphia
++++455
++++s Luanda
++++1053
++++a Saint Petersburg
++++322 141
++++r Osaka
++++103
++++r Barcelona
++++879
++++a Baghdad
++++732 76
++++r Baghdad
++++309
++++a Tehran
++++1213 65
++++a Tehran
++++270 7
++++R Manila
++++L
++++A Nanjing
++++r Luanda
++++204
++++L
++++u Los Angeles
++++824
++++a Seoul
++++161 99
++++s Ahmedabad
++++546
++++a Atlanta
++++920 91
++++a Tianjin
++++85 108
++++a Lima
++++1345 173
++++r Manila
++++865
++++r Luanda
++++584
++++A Singapore
++++L
++++u Manila
++++364
++++L
++++A Kolkata
++++a Nanjing
++++1014 161
++++u Jinan
++++1293
++++u Miami
++++918
++++L
++++R Johannesburg
++++L
++++L
++++A Kuala Lumpur
++++u Miami
++++961
++++R Atlanta
++++A Ahmedabad
++++A Istanbul
++++u Baghdad
++++732
++++a New York City
++++1256 182
++++R Qingdao
++++r Guadalajara
++++385
++++R Guadalajara
++++s Surat
++++463
++++r Nanjing
++++1014
++++A Hangzhou
++++A Lahore
++++s Los Angeles
++++1198
++++R Seoul
++++A Fukuoka
++++A Foshan
++++u Sao Paulo
++++62
++++L
++++a Beijing
++++9 165
++++a Istanbul
++++877 85
++++R Kolkata
++++R Foshan
++++R Toronto
++++a Barcelona
++++1008 74
++++s Sao Paulo
++++1183
++++A Shenzhen
++++A Hong Kong
++++A Shenzhen
++++R Philadelphia
++++u Toronto
++++844
++++R Nagoya
++++a London
++++599 14
++++A Chengdu
++++a Paris
++++1063 129
++++r Lima
++++14
++++L
++++s Luanda
++++1374
++++a Tehran
++++371 109
++++r Miami
++++918
++++a New York City
++++272 66
++++L
++++a Harbin
++++633 24
++++R Tehran
++++A Khartoum
++++a Shenzhen
++++930 112
++++a Istanbul
++++1125 123
++++u Qingdao
++++782
++++L
++++R Shanghai
++++s Osaka
++++808
++++a Baghdad
++++658 29
++++u Tianjin
++++85
++++r Atlanta
++++321
++++r Khartoum
++++302
++++A Los Angeles
++++A Dhaka
++++L
++++s Qingdao
++++660
++++A Toronto
++++u Luanda
++++1041
++++u Guadalajara
++++195
++++L
++++a Hangzhou
++++553 187
++++s Fukuoka
++++1256
++++L
++++L
++++u Osaka
++++799
+++diff --git a/testMedium.txt b/testMedium.txt
+++new file mode 100644
+++index 0000000..3ddcea1
+++--- /dev/null
++++++ b/testMedium.txt
+++@@ -0,0 +1,766 @@
++++L
++++A Manila
++++A Jakarta
++++A Saint Petersburg
++++A Atlanta
++++A Hong Kong
++++A Philadelphia
++++A Chicago
++++A Foshan
++++A Fukuoka
++++A Chennai
++++A Dallas
++++A Guangzhou
++++A Chengdu
++++A Ho Chi Minh City
++++A Bangkok
++++A Nanjing
++++A Moscow
++++A Chengdu
++++A Lahore
++++A Philadelphia
++++A Bogota
++++A Pune
++++A Suzhou
++++A Dongguan
++++A Paris
++++A Chennai
++++A Dongguan
++++A Lima
++++A Qingdao
++++A Kolkata
++++a Nanjing
++++1262 198
++++a Dongguan
++++72 86
++++a Foshan
++++776 178
++++a Bangkok
++++1177 9
++++a Saint Petersburg
++++59 145
++++a Pune
++++925 113
++++a Chicago
++++155 192
++++a Atlanta
++++1400 4
++++a Jakarta
++++795 145
++++a Atlanta
++++1177 147
++++a Suzhou
++++93 109
++++a Paris
++++95 197
++++a Nanjing
++++916 142
++++a Pune
++++1133 134
++++a Chennai
++++307 49
++++a Qingdao
++++91 177
++++a Dallas
++++500 174
++++a Atlanta
++++457 94
++++a Lima
++++993 151
++++a Chengdu
++++1108 189
++++a Fukuoka
++++44 70
++++a Paris
++++1107 25
++++a Lima
++++1052 62
++++a Guangzhou
++++1410 160
++++a Manila
++++602 45
++++a Nanjing
++++1410 105
++++a Guangzhou
++++1211 170
++++a Foshan
++++1427 175
++++a Fukuoka
++++279 183
++++a Philadelphia
++++329 169
++++a Moscow
++++1385 5
++++a Chennai
++++1258 163
++++a Chicago
++++1304 114
++++a Dongguan
++++1221 26
++++a Philadelphia
++++182 26
++++a Suzhou
++++396 159
++++a Chengdu
++++524 33
++++a Ho Chi Minh City
++++869 63
++++a Kolkata
++++656 1
++++a Atlanta
++++246 41
++++a Chengdu
++++626 182
++++a Saint Petersburg
++++1133 134
++++a Suzhou
++++348 13
++++a Chicago
++++1337 18
++++a Philadelphia
++++1224 23
++++a Fukuoka
++++68 193
++++a Philadelphia
++++793 20
++++a Saint Petersburg
++++229 197
++++a Bogota
++++818 86
++++a Chengdu
++++826 46
++++a Bangkok
++++575 16
++++a Paris
++++101 180
++++a Fukuoka
++++406 174
++++a Ho Chi Minh City
++++1114 108
++++a Lahore
++++1163 131
++++a Ho Chi Minh City
++++118 111
++++a Foshan
++++333 156
++++a Kolkata
++++287 0
++++a Lahore
++++1263 28
++++a Bogota
++++980 116
++++a Bogota
++++1392 84
++++a Suzhou
++++111 84
++++a Hong Kong
++++726 56
++++a Kolkata
++++663 118
++++a Saint Petersburg
++++1369 41
++++a Atlanta
++++1138 89
++++a Qingdao
++++406 78
++++a Lima
++++1019 194
++++a Kolkata
++++1242 80
++++a Foshan
++++810 6
++++a Atlanta
++++936 36
++++a Manila
++++933 147
++++a Ho Chi Minh City
++++612 31
++++a Bangkok
++++1383 70
++++a Kolkata
++++324 94
++++a Atlanta
++++1318 62
++++a Fukuoka
++++1136 56
++++a Atlanta
++++348 41
++++a Moscow
++++1335 129
++++a Manila
++++1222 33
++++a Chengdu
++++1374 183
++++a Foshan
++++313 20
++++a Philadelphia
++++1211 143
++++a Dongguan
++++40 104
++++a Atlanta
++++539 85
++++a Chicago
++++756 22
++++a Suzhou
++++20 113
++++a Kolkata
++++172 34
++++a Moscow
++++1306 15
++++a Qingdao
++++465 13
++++a Moscow
++++921 144
++++a Saint Petersburg
++++1264 189
++++a Bangkok
++++965 179
++++a Pune
++++21 100
++++a Saint Petersburg
++++1227 183
++++a Lahore
++++752 15
++++a Chicago
++++643 117
++++a Suzhou
++++18 66
++++a Guangzhou
++++110 16
++++a Dongguan
++++1279 94
++++s Jakarta
++++802
++++s Foshan
++++787
++++s Nanjing
++++1263
++++s Manila
++++941
++++s Lima
++++1060
++++s Chengdu
++++1120
++++s Qingdao
++++99
++++s Philadelphia
++++329
++++s Nanjing
++++1266
++++s Manila
++++1235
++++s Qingdao
++++96
++++s Atlanta
++++257
++++s Kolkata
++++666
++++s Kolkata
++++663
++++s Chengdu
++++636
++++s Ho Chi Minh City
++++1120
++++s Bogota
++++1394
++++s Lahore
++++1171
++++s Paris
++++108
++++s Ho Chi Minh City
++++1120
++++s Foshan
++++342
++++s Qingdao
++++417
++++s Chennai
++++315
++++s Foshan
++++1431
++++s Guangzhou
++++1224
++++s Nanjing
++++928
++++s Ho Chi Minh City
++++1125
++++s Kolkata
++++338
++++s Dongguan
++++1281
++++s Moscow
++++1314
++++s Foshan
++++343
++++s Dongguan
++++1221
++++s Paris
++++1110
++++s Bangkok
++++1178
++++s Manila
++++1229
++++s Ho Chi Minh City
++++121
++++s Paris
++++109
++++s Manila
++++614
++++s Foshan
++++789
++++s Ho Chi Minh City
++++120
++++s Jakarta
++++803
++++s Chicago
++++770
++++s Kolkata
++++660
++++s Moscow
++++1335
++++s Saint Petersburg
++++1147
++++s Philadelphia
++++192
++++s Nanjing
++++916
++++s Dallas
++++514
++++s Ho Chi Minh City
++++626
++++s Philadelphia
++++1225
++++s Saint Petersburg
++++1377
++++s Suzhou
++++402
++++s Bogota
++++993
++++s Chennai
++++1271
++++s Chennai
++++307
++++s Paris
++++106
++++s Moscow
++++1318
++++s Nanjing
++++1267
++++s Bogota
++++991
++++s Atlanta
++++1139
++++s Suzhou
++++34
++++s Paris
++++104
++++s Chennai
++++1272
++++s Ho Chi Minh City
++++623
++++s Dongguan
++++1287
++++s Saint Petersburg
++++1372
++++s Atlanta
++++1142
++++s Foshan
++++320
++++s Chicago
++++1338
++++s Jakarta
++++803
++++s Foshan
++++816
++++s Ho Chi Minh City
++++122
++++s Atlanta
++++549
++++s Dongguan
++++83
++++s Saint Petersburg
++++70
++++s Chengdu
++++1384
++++s Philadelphia
++++796
++++s Ho Chi Minh City
++++1123
++++s Atlanta
++++248
++++s Atlanta
++++1147
++++s Suzhou
++++115
++++s Dongguan
++++72
++++s Qingdao
++++410
++++s Chicago
++++766
++++s Philadelphia
++++1221
++++s Lima
++++1005
++++s Atlanta
++++1146
++++s Lima
++++1003
++++s Ho Chi Minh City
++++1117
++++s Paris
++++109
++++s Atlanta
++++1190
++++s Moscow
++++1388
++++s Kolkata
++++666
++++s Dallas
++++506
++++s Chennai
++++314
++++s Pune
++++925
++++s Lahore
++++1274
++++s Nanjing
++++927
++++s Philadelphia
++++799
++++s Dallas
++++505
++++s Hong Kong
++++727
++++s Moscow
++++925
++++s Qingdao
++++417
++++s Philadelphia
++++336
++++s Bangkok
++++1178
++++s Moscow
++++1347
++++s Atlanta
++++540
++++s Guangzhou
++++122
++++s Atlanta
++++1323
++++s Philadelphia
++++1224
++++s Fukuoka
++++1140
++++s Chicago
++++167
++++s Bogota
++++1401
++++s Foshan
++++813
++++s Bogota
++++1403
++++s Qingdao
++++465
++++s Atlanta
++++469
++++s Pune
++++1133
++++s Qingdao
++++93
++++s Moscow
++++1316
++++s Dongguan
++++49
++++s Suzhou
++++23
++++s Qingdao
++++468
++++s Kolkata
++++335
++++s Atlanta
++++542
++++s Kolkata
++++666
++++s Lima
++++996
++++s Foshan
++++1441
++++s Philadelphia
++++184
++++s Qingdao
++++104
++++s Atlanta
++++1406
++++s Foshan
++++335
++++s Atlanta
++++256
++++s Suzhou
++++28
++++s Lima
++++1025
++++s Saint Petersburg
++++1277
++++s Bogota
++++987
++++s Bogota
++++981
++++s Ho Chi Minh City
++++623
++++s Kolkata
++++337
++++s Bogota
++++1398
++++s Atlanta
++++1145
++++s Bangkok
++++973
++++s Manila
++++940
++++s Atlanta
++++351
++++s Ho Chi Minh City
++++622
++++s Kolkata
++++667
++++s Paris
++++104
++++s Chennai
++++1265
++++s Ho Chi Minh City
++++881
++++s Foshan
++++1427
++++s Guangzhou
++++1225
++++s Kolkata
++++1251
++++s Manila
++++941
++++s Jakarta
++++808
++++s Hong Kong
++++736
++++s Foshan
++++1438
++++s Dongguan
++++1289
++++s Saint Petersburg
++++1370
++++s Hong Kong
++++737
++++s Dongguan
++++75
++++s Philadelphia
++++340
++++s Suzhou
++++118
++++s Qingdao
++++414
++++s Bogota
++++823
++++s Chengdu
++++828
++++s Foshan
++++317
++++s Suzhou
++++27
++++s Saint Petersburg
++++1379
++++s Ho Chi Minh City
++++618
++++s Lahore
++++766
++++s Chicago
++++1304
++++s Bangkok
++++1179
++++s Manila
++++609
++++s Chengdu
++++630
++++s Paris
++++1108
++++s Kolkata
++++662
++++s Hong Kong
++++732
++++s Pune
++++932
++++s Chennai
++++1258
++++s Paris
++++95
++++s Pune
++++938
++++s Chengdu
++++635
++++s Paris
++++1118
++++s Ho Chi Minh City
++++612
++++s Ho Chi Minh City
++++1117
++++s Ho Chi Minh City
++++612
++++s Kolkata
++++667
++++s Chennai
++++1266
++++s Foshan
++++782
++++s Philadelphia
++++330
++++s Manila
++++1227
++++s Lahore
++++1170
++++s Guangzhou
++++114
++++s Foshan
++++788
++++s Guangzhou
++++122
++++s Atlanta
++++544
++++s Paris
++++1113
++++s Pune
++++938
++++s Dallas
++++502
++++A Jinan
++++a Dallas
++++368 9
++++r Lahore
++++1163
++++A Guadalajara
++++s Kolkata
++++335
++++R Saint Petersburg
++++a Chicago
++++1209 107
++++L
++++r Fukuoka
++++44
++++u Nanjing
++++916
++++R Hong Kong
++++u Guangzhou
++++1211
++++s Atlanta
++++946
++++A Rio de Janeiro
++++u Bangkok
++++575
++++s Saint Petersburg
++++240
++++a Paris
++++47 91
++++u Kolkata
++++656
++++a Rio de Janeiro
++++344 21
++++a Dongguan
++++822 109
++++a Jakarta
++++301 168
++++L
++++R Kolkata
++++L
++++u Fukuoka
++++406
++++A Chennai
++++r Jakarta
++++301
++++A Delhi
++++L
++++u Philadelphia
++++329
++++L
++++a Suzhou
++++410 59
++++u Atlanta
++++1177
++++L
++++a Suzhou
++++1324 112
++++R Jakarta
++++R Chicago
++++a Manila
++++433 124
++++a Bangkok
++++1360 44
++++A Dar es Salaam
++++r Saint Petersburg
++++1227
++++u Dongguan
++++40
++++a Paris
++++53 137
++++a Dongguan
++++477 27
++++a Chennai
++++1271 197
++++R Qingdao
++++r Bangkok
++++1383
++++a Chennai
++++149 23
++++L
++++r Saint Petersburg
++++229
++++a Chennai
++++283 168
++++s Lima
++++1021
++++a Fukuoka
++++273 11
++++A Mexico City
++++a Delhi
++++1276 157
++++a Ho Chi Minh City
++++729 61
++++u Suzhou
++++20
++++r Guangzhou
++++1410
++++L
++++u Bogota
++++980
++++a Chengdu
++++276 132
++++a Rio de Janeiro
++++590 30
++++r Chicago
++++1337
++++s Saint Petersburg
++++1369
++++u Qingdao
++++91
++++u Ho Chi Minh City
++++612
++++R Pune
++++s Dongguan
++++484
++++u Nanjing
++++1410
++++u Chengdu
++++1108
++++a Chennai
++++341 192
++++R Dallas
++++s Dongguan
++++75
++++L
++++a Ho Chi Minh City
++++184 26
++++r Ho Chi Minh City
++++612
++++r Ho Chi Minh City
++++1114
++++a Philadelphia
++++1294 136
++++L
++++r Nanjing
++++1262
+++diff --git a/testSmall.txt b/testSmall.txt
+++new file mode 100644
+++index 0000000..f4ec80b
+++--- /dev/null
++++++ b/testSmall.txt
+++@@ -0,0 +1,405 @@
++++L
++++A Barcelona
++++A Surat
++++A Hong Kong
++++A Paris
++++A Moscow
++++A Chennai
++++A Dalian
++++A Dallas
++++A Johannesburg
++++A Santiago
++++A Tehran
++++A Country
++++A Dalian
++++A Madrid
++++A Lima
++++A Baghdad
++++A London
++++A Manila
++++A Wuhan
++++A Khartoum
++++a Santiago
++++1367 161
++++a Hong Kong
++++1264 40
++++a Country
++++689 165
++++a Dalian
++++1233 85
++++a Surat
++++852 188
++++a Manila
++++1204 151
++++a Manila
++++976 88
++++a London
++++52 159
++++a London
++++931 144
++++a Baghdad
++++971 50
++++a Moscow
++++391 42
++++a Country
++++404 93
++++a Chennai
++++277 87
++++a Moscow
++++877 194
++++a Surat
++++122 42
++++a Baghdad
++++1304 176
++++a Baghdad
++++291 159
++++a Lima
++++859 128
++++a Manila
++++1039 11
++++a Wuhan
++++1059 72
++++a Dallas
++++638 109
++++a Lima
++++1053 174
++++a Dallas
++++1344 172
++++a Barcelona
++++997 102
++++a Moscow
++++15 84
++++a Moscow
++++1256 57
++++a Barcelona
++++69 169
++++a London
++++848 77
++++a Wuhan
++++348 32
++++a Surat
++++146 190
++++a Moscow
++++374 85
++++a Khartoum
++++166 145
++++a Manila
++++1349 35
++++a Country
++++659 100
++++a Dalian
++++460 88
++++a Dalian
++++542 56
++++a Paris
++++298 48
++++a Wuhan
++++906 106
++++a Chennai
++++446 195
++++a Khartoum
++++755 86
++++a Madrid
++++255 162
++++a Khartoum
++++774 189
++++a Manila
++++753 82
++++a Baghdad
++++56 162
++++a Dalian
++++1259 196
++++a Hong Kong
++++97 2
++++a Manila
++++1084 43
++++a Paris
++++518 29
++++a Moscow
++++710 196
++++a Tehran
++++375 108
++++a Chennai
++++836 14
++++a Santiago
++++1186 103
++++a Madrid
++++815 186
++++a Barcelona
++++761 55
++++a Paris
++++1223 86
++++a Hong Kong
++++190 8
++++a Manila
++++1331 53
++++a Country
++++1277 0
++++a Madrid
++++269 7
++++a Santiago
++++94 189
++++s Barcelona
++++770
++++s Wuhan
++++1064
++++s Santiago
++++1375
++++s Dalian
++++1241
++++s London
++++851
++++s Moscow
++++718
++++s London
++++56
++++s Hong Kong
++++1273
++++s Chennai
++++841
++++s Khartoum
++++167
++++s Surat
++++853
++++s Moscow
++++1259
++++s Baghdad
++++984
++++s Hong Kong
++++102
++++s Manila
++++978
++++s Madrid
++++256
++++s Barcelona
++++1011
++++s Dalian
++++553
++++s Dallas
++++646
++++s Wuhan
++++354
++++s London
++++939
++++s Barcelona
++++769
++++s Hong Kong
++++1277
++++s Santiago
++++1187
++++s Moscow
++++393
++++s Country
++++661
++++s Surat
++++860
++++s Manila
++++1355
++++s Country
++++691
++++s Moscow
++++19
++++s Country
++++667
++++s Manila
++++977
++++s Surat
++++156
++++s Barcelona
++++1004
++++s Dallas
++++638
++++s Moscow
++++399
++++s Dalian
++++1264
++++s Country
++++1280
++++s Wuhan
++++907
++++s Madrid
++++828
++++s Santiago
++++1375
++++s Paris
++++311
++++s Chennai
++++456
++++s Madrid
++++825
++++s Madrid
++++823
++++s Chennai
++++460
++++s London
++++937
++++s Baghdad
++++1307
++++s Wuhan
++++349
++++s Country
++++691
++++s Dalian
++++550
++++s Manila
++++1353
++++s Baghdad
++++61
++++s Moscow
++++1256
++++s Surat
++++129
++++s Khartoum
++++172
++++s Moscow
++++882
++++s Baghdad
++++977
++++s Surat
++++134
++++s Hong Kong
++++1273
++++s Country
++++659
++++s Khartoum
++++777
++++s Manila
++++1040
++++s Wuhan
++++1059
++++s Surat
++++865
++++s Country
++++408
++++s Baghdad
++++973
++++s Paris
++++1226
++++s Santiago
++++100
++++s Paris
++++1227
++++s London
++++940
++++s Moscow
++++1269
++++s Khartoum
++++774
++++s Barcelona
++++69
++++s Manila
++++977
++++s Wuhan
++++354
++++s London
++++942
++++s Barcelona
++++763
++++s Moscow
++++18
++++s Hong Kong
++++204
++++s Manila
++++767
++++s London
++++56
++++s Moscow
++++386
++++s Santiago
++++108
++++s Manila
++++1339
++++s Manila
++++1040
++++s Santiago
++++1187
++++s Country
++++1288
++++s Wuhan
++++1062
++++s Baghdad
++++295
++++s Madrid
++++264
++++s Chennai
++++457
++++s Surat
++++866
++++s Moscow
++++378
++++s Dalian
++++1268
++++s Manila
++++1351
++++s Dallas
++++1354
++++s Paris
++++301
++++s Manila
++++976
++++s Moscow
++++398
++++A Dongguan
++++u Surat
++++852
++++R Barcelona
++++A Osaka
++++u Santiago
++++1367
++++s Dalian
++++468
++++r Baghdad
++++56
++++L
++++a Madrid
++++451 154
++++A Country
++++A Belo Horizonte
++++r Baghdad
++++291
++++a Belo Horizonte
++++1079 103
++++L
++++s Wuhan
++++352
++++r Baghdad
++++1304
++++r Surat
++++146
++++R Baghdad
++++r Baghdad
++++971
++++s Manila
++++989
++++r Surat
++++122
++++u Dallas
++++1344
++++A Jakarta
++++a Surat
++++1137 83
++++u Manila
++++753
++++s Lima
++++865
++++L
++++s Dalian
++++1241
++++r Manila
++++1204
++++u Santiago
++++1186
++++A Dhaka
++++L
++++R Dongguan
++++s Lima
++++862
++++s Moscow
++++387
++++L
++++A London
++++R Madrid
++++a Jakarta
++++261 84
++++a Manila
++++360 171
++diff --git a/test.sh b/test.sh
++index f8ecbf4..1753085 100755
++--- a/test.sh
+++++ b/test.sh
++@@ -262,7 +262,7 @@ EOF
++     echo "FAIL"
++     [[ -n $VERBOSE ]] && echo "Your program produced:"
++     [[ -n $VERBOSE ]] && echo "--------------------------"
++-    [[ -n $VERBOSE ]] && echo "$answers"    
+++    [[ -n $VERBOSE ]] && echo "$answer"    
++     [[ -n $VERBOSE ]] && echo "--------------------------"
++     [[ -n $VERBOSE ]] && echo "Output should have been:"
++     [[ -n $VERBOSE ]] && echo "--------------------------"
++
+ commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+ Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+ Date:   Mon Sep 28 22:04:59 2020 -0400
+
 commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Thu Oct 1 18:48:16 2020 -0400

commit da6661f7aace13f7460f1854b7f421ec09bce194
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Thu Oct 1 20:00:10 2020 -0400

    fixed aloocate, add and list

diff --git a/assignment-3.c b/assignment-3.c
index 6644548..e50b45e 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -390,10 +390,27 @@ int flight_compare_time(const void *a, const void *b)
 //returns pointer to updated flight schedule
 struct flight_schedule * flight_schedule_allocate(void){
 
-  struct flight_schedule *temp;// =  flight_schedules_free;
+  struct flight_schedule *temp =  flight_schedules_free;
+  struct flight_schedule *fs;
+  if (flight_schedules_free != NULL){
+    flight_schedules_free = temp->next;
+    flight_schedules_free->prev = NULL;
+  }
+
+
+  temp->next = flight_schedules_active;
+  //if active not null set active prev to temp
+  if(flight_schedules_active != NULL){
+    flight_schedules_active->prev = temp;
+  }
+   flight_schedules_active = temp;
+
+
+
+
 
 
-  flight_schedules_free = flight_schedules_free->next;
+  /*
   flight_schedules_free-> prev->next = flight_schedules_active;
   
   //temp->next = flight_schedules_active;
@@ -409,6 +426,7 @@ struct flight_schedule * flight_schedule_allocate(void){
 
   //flight_schedules_active = temp;
   temp = flight_schedules_active;
+  */
   return(temp); //return temp?
 }
 
@@ -465,23 +483,29 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
 
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){ //may have to use casts?
-      return(temp);
+      break; //return(temp);
     }
     temp = temp->next;
   }
+  return (temp);
 }
 
 
 void flight_schedule_add(city_t city){ //should this call get city
+
+  //first cheeck to see if city exists
+  struct flight_schedule *fs = flight_schedule_find(city);
+  if (fs != NULL)  {
+    msg_city_exists(city);
+  }
+
+  if (fs == NULL){
   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
-  
-  //if (flight_schedule_find == city)  {
-  //  msg_city_exists(city);
- // } //
   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
   
   //p->destination = ch; 
 
+  }
 }
 
 
@@ -493,19 +517,19 @@ void flight_schedule_remove(city_t city){
 
 
 void flight_schedule_listAll(void){
-  struct flight_schedule *temp = flight_schedules_active;
+  struct flight_schedule *temp = flight_schedules_active; //need to add messages
   while(temp != NULL){
-    printf("%p", temp); // print temp is disaplying memory address
+    printf("%s\n", temp->destination); // print temp is disaplying memory address
     temp = temp->next;
   }
 
 }
 
 void flight_schedule_list(city_t city){
-  struct flight_schedule *temp = flight_schedules_active;
+  struct flight_schedule *temp = flight_schedules_active; 
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){
-      printf("%p", *temp); //displaying memory address
+      printf("%s\n", temp->destination); //displaying memory address
     }
     temp = temp->next;
   }
diff --git a/gitlog.txt b/gitlog.txt
index c3e37f7..29ef0ec 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,3 +1,4170 @@
+commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Thu Oct 1 18:48:16 2020 -0400
+
+    editing and debugging
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 881c536..6644548 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+ 
+   // Loop through the Array connecting them
+   // as a linear doubly linked list
++  if (n == 1) {
++    flight_schedule_reset(&array[0]);
++    array[0].next = NULL;
++    array[0].prev = NULL;
++    flight_schedules_free = &array[0];
++    return;
++  }
++
++  flight_schedule_reset(&array[0]);
++  array[0].next = &array[1];
+   array[0].prev = NULL;
+-  for (int i=0; i<n-1; i++) {
++
++  for (int i=1; i<n-1; i++) {
+     flight_schedule_reset(&array[i]);
+     array[i].next = &array[i+1];
+-    array[i+1].prev = &array[i];
++    array[i].prev = &array[i-1];
+   }
++
+   // Takes care of last node.  
+   flight_schedule_reset(&array[n-1]); // reset clears all fields
+   array[n-1].next = NULL;
+@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
+ //returns pointer to updated flight schedule
+ struct flight_schedule * flight_schedule_allocate(void){
+ 
+-  struct flight_schedule *temp =  flight_schedules_free;
++  struct flight_schedule *temp;// =  flight_schedules_free;
++
++
+   flight_schedules_free = flight_schedules_free->next;
++  flight_schedules_free-> prev->next = flight_schedules_active;
++  
++  //temp->next = flight_schedules_active;
++  flight_schedules_active = flight_schedules_free->prev;
+   flight_schedules_free->prev = NULL;
+-  temp->next = flight_schedules_active;
+-
+-  flight_schedules_active = temp;
+-  flight_schedules_active->next->prev = flight_schedules_active;
++  
+   //temp->prev = NULL;
+   //struct flight_schedule *temp2 = flight_schedules_active
+-  
+-  return(flight_schedules_active);
++
++  if(flight_schedules_active -> next != NULL){
++    flight_schedules_active->next->prev = flight_schedules_active;
++  }
++
++  //flight_schedules_active = temp;
++  temp = flight_schedules_active;
++  return(temp); //return temp?
+ }
+ 
+ //flight schedule free
+ //takes schedule off active list, resets it, then places the node back on free list
+ void flight_schedule_free(struct flight_schedule *fs){
+-  int counter = 0;
++  flight_schedules_active = flight_schedules_active->next;
++  flight_schedule_reset(fs);
++  fs->next = flight_schedules_free;
++  flight_schedules_free = fs;
++  fs->next->prev = fs;
++
++
++  /*int counter = 0;
+   struct flight_schedule *temp = flight_schedules_active;
+   while(temp != NULL) {
+     if(temp == fs){ //use flight schedule find instead
+@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
+     temp = temp->next;
+     counter++;
+   }
+-  
+   if (counter == 0){
+     flight_schedules_active = temp->next;
+     flight_schedules_active->prev = NULL;
+@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+     //flight_schedule_reset(temp);
+ 
+   }
+-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+-    temp->prev->next = temp->next;
++  else{ 
++    temp->prev->next = temp->next;   //actualy this is the else case end case not required
+     temp->next->prev = temp->prev;
+     temp->next = NULL;
+     temp->prev = NULL;
+@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
+     flight_schedules_free = temp;
+     flight_schedules_free->next->prev = flight_schedules_free;
+   }
+-  else{
+-    temp->prev = NULL;
+-    flight_schedules_active->prev->next = NULL;
+-
+-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+-
+-    temp->next = flight_schedules_free;
+-    flight_schedules_free = temp;
+-    flight_schedules_free->next->prev = flight_schedules_free;
+-    
+-  }
++}
++*/
+ }
+ 
+ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
+ void flight_schedule_add(city_t city){ //should this call get city
+   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+   
+-  if (flight_schedule_find) {
+-    msg_city_exists(city);
+-  }
++  //if (flight_schedule_find == city)  {
++  //  msg_city_exists(city);
++ // } //
+   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+   
+   //p->destination = ch; 
+@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
+ void flight_schedule_listAll(void){
+   struct flight_schedule *temp = flight_schedules_active;
+   while(temp != NULL){
+-    printf("%p", &temp);
++    printf("%p", temp); // print temp is disaplying memory address
+     temp = temp->next;
+   }
+ 
+@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
+   struct flight_schedule *temp = flight_schedules_active;
+   while(temp != NULL){
+     if (strcmp(city,temp->destination) == 0){
+-      printf("%p", &temp);
++      printf("%p", *temp); //displaying memory address
+     }
+     temp = temp->next;
+   }
+@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
+ 
+   int *t;
+   time_get(t); //do this then check if t is 0 to see if valid or not 
+-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+   
+-  if (time == 1 || capacity == 1 ){
+-      return 1;
++  if(time_get(t) == 0) { //or just t
++     return;
++   }
++
++  int *c;
++  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
++  
++  if (flight_capacity_get(c) == 0){
++      return;
+   }
+ 
+   struct flight *flights;
+@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+     if(flights[i].time == -1){
+-      flights[i].time = time;//was flights[i] will this change correct one?
+-      flights[i].capacity = capacity;
++      flights[i].time = *t;//was flights[i] will this change correct one?
++      flights[i].capacity = *c;
+       break;
+     }
+   }
+@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
+   struct flight_schedule *temp = flight_schedule_find(city);
+  //idk if this is the right time to call or even need too
+ 
+-
+-
+   int *t;
+   time_get(t); //if 1 continue; else tell user
+    if(time_get(t) == 0) {
+@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
+    }
+   int *c;
+   flight_capacity_get(c); 
++  if(flight_capacity_get(c) == 0){
++
++  }
+   
+   struct flight *flights;
+   flights = temp->flights;
+@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
+ 
+   struct flight *flights;
+   flights = temp->flights;
++  int *t;
++  time_get(t);
++  if(time_get(t) == 0) {
++     return;
++   }
+ 
+-  int time = time_get();
+   int nearest = 0;
+   int position = 0;
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+-    if(flights[i].time >= time){
+-      if(flights[i].time - nearest <= nearest - time){
++    if(flights[i].time >= *t){
++      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
+         nearest = flights[i].time;
+         position = i;
+       }
+@@ -573,18 +602,21 @@ flights[position].available--;
+   
+ }
+ 
+-flight_schedule_unschedule_seat(city_t city){
++ void flight_schedule_unschedule_seat(city_t city){
+   struct flight_schedule *temp = flight_schedule_find(city);
+ 
+   struct flight *flights;
+   flights = temp->flights;
+-
+-  int time = time_get();
++  int *t;
++  time_get(t);
++  if(time_get(t) == 0) {
++     return;
++   }
+   int nearest = 0;
+   int position = 0;
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+-    if(flights[i].time == time){
++    if(flights[i].time == *t){ //origrinally was time 
+      flights[i].available--;
+     }
+   }
+diff --git a/gitlog.txt b/gitlog.txt
+index e69de29..c3e37f7 100644
+--- a/gitlog.txt
++++ b/gitlog.txt
+@@ -0,0 +1,3895 @@
++commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 22:04:59 2020 -0400
++
++    finshing up scheduling/unscheduling and debuggin
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 322ef6c..881c536 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
++   flight_schedule_add(city);
++   struct flight_schedule *temp = flight_schedule_find(city);
++ 
++-  time_t time = time_get();
++-  int capacity = flight_capacity_get();
+++
+++  int *t;
+++  time_get(t); //do this then check if t is 0 to see if valid or not 
+++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
++   
++   if (time == 1 || capacity == 1 ){
++       return 1;
++@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
++ 
++ 
++ 
++-  time_t time = time_get();
++-  int capacity = flight_capacity_get(); 
+++  int *t;
+++  time_get(t); //if 1 continue; else tell user
+++   if(time_get(t) == 0) {
+++     return;
+++   }
+++  int *c;
+++  flight_capacity_get(c); 
++   
++   struct flight *flights;
++   flights = temp->flights;
++ 
++   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++-    if(flights[i].time == time){
+++    if(flights[i].time == *t){
++       flights[i].time = -1;//was flights[i] will this change correct one?
++       flights[i].capacity = 0;  
++       flights[i].available = 0;
++
++commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 21:51:04 2020 -0400
++
++    schedule and unschedule seat
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 6db86b9..322ef6c 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
++ 
++ 
++ void flight_schedule_schedule_seat(city_t city) {
+++  struct flight_schedule *temp = flight_schedule_find(city);
+++
+++  struct flight *flights;
+++  flights = temp->flights;
+++
+++  int time = time_get();
+++  int nearest = 0;
+++  int position = 0;
+++
+++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++    if(flights[i].time >= time){
+++      if(flights[i].time - nearest <= nearest - time){
+++        nearest = flights[i].time;
+++        position = i;
+++      }
+++    }
+++  }
+++flights[position].available--;
++   
++-}
++\ No newline at end of file
+++}
+++
+++flight_schedule_unschedule_seat(city_t city){
+++  struct flight_schedule *temp = flight_schedule_find(city);
+++
+++  struct flight *flights;
+++  flights = temp->flights;
+++
+++  int time = time_get();
+++  int nearest = 0;
+++  int position = 0;
+++
+++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++    if(flights[i].time == time){
+++     flights[i].available--;
+++    }
+++  }
+++}
+++
++
++commit 4490dcc205f2959c8fa299368be096d99f756e27
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 21:23:54 2020 -0400
++
++    continuing work on add and remove flights
++
++diff --git a/assignment-3.c b/assignment-3.c
++index d9c99ff..6db86b9 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
++   flight_schedule_add(city);
++   struct flight_schedule *temp = flight_schedule_find(city);
++ 
++-  int time = time_get();
+++  time_t time = time_get();
++   int capacity = flight_capacity_get();
++   
++   if (time == 1 || capacity == 1 ){
++       return 1;
++   }
++ 
++-  temp->flight->flights[];
+++  struct flight *flights;
+++  flights = temp->flights;
+++  //flights[i]
+++  //loop thru flights until open flight then add flight
++ 
+++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++    if(flights[i].time == -1){
+++      flights[i].time = time;//was flights[i] will this change correct one?
+++      flights[i].capacity = capacity;
+++      break;
+++    }
+++  }
+++  //else return that it failed
+++
+++
+++}
+++
+++void flight_schedule_remove_flight(city_t city){
+++  struct flight_schedule *temp = flight_schedule_find(city);
+++ //idk if this is the right time to call or even need too
++ 
++ 
+++
+++  time_t time = time_get();
+++  int capacity = flight_capacity_get(); 
+++  
+++  struct flight *flights;
+++  flights = temp->flights;
+++
+++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+++    if(flights[i].time == time){
+++      flights[i].time = -1;//was flights[i] will this change correct one?
+++      flights[i].capacity = 0;  
+++      flights[i].available = 0;
+++      break;
+++    }
+++  }
++ }
+++
+++
+++void flight_schedule_schedule_seat(city_t city) {
+++  
+++}
++\ No newline at end of file
++
++commit e41186f0b9058ea4390a8f0fda78296861580f31
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 20:05:28 2020 -0400
++
++    updates to add_flight
++
++diff --git a/assignment-3.c b/assignment-3.c
++index aae10c7..d9c99ff 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
++   }
++ }
++ 
++-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
++   struct flight_schedule *temp = flight_schedules_active;
+++
++   while(temp != NULL){
++-    if (strcmp(city,temp->destination) == 0){
+++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
++       return(temp);
++     }
++     temp = temp->next;
++@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++ }
++ 
++ 
+++void flight_schedule_add(city_t city){ //should this call get city
+++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+++  
+++  if (flight_schedule_find) {
+++    msg_city_exists(city);
+++  }
+++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+++  
+++  //p->destination = ch; 
+++
+++}
+++
+++
+++void flight_schedule_remove(city_t city){
+++  struct flight_schedule *temp = flight_schedule_find(city);
+++  flight_schedule_free(temp);
+++}
+++
+++
+++
+++void flight_schedule_listAll(void){
+++  struct flight_schedule *temp = flight_schedules_active;
+++  while(temp != NULL){
+++    printf("%p", &temp);
+++    temp = temp->next;
+++  }
+++
+++}
+++
+++void flight_schedule_list(city_t city){
+++  struct flight_schedule *temp = flight_schedules_active;
+++  while(temp != NULL){
+++    if (strcmp(city,temp->destination) == 0){
+++      printf("%p", &temp);
+++    }
+++    temp = temp->next;
+++  }
+++}
+++
+++void flight_schedule_add_flight(city_t city){
+++  flight_schedule_add(city);
+++  struct flight_schedule *temp = flight_schedule_find(city);
+++
+++  int time = time_get();
+++  int capacity = flight_capacity_get();
+++  
+++  if (time == 1 || capacity == 1 ){
+++      return 1;
+++  }
+++
+++  temp->flight->flights[];
+++
+++
+++
+++}
++
++commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 18:35:40 2020 -0400
++
++    correction of free, working on find
++
++diff --git a/assignment-3.c b/assignment-3.c
++index a03a0af..aae10c7 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++   int counter = 0;
++   struct flight_schedule *temp = flight_schedules_active;
++   while(temp != NULL) {
++-    if(temp == fs){
+++    if(temp == fs){ //use flight schedule find instead
++       break;
++     }
++     temp = temp->next;
++@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
++     flight_schedule_reset(temp);
++ 
++     temp->next = flight_schedules_free; //this block of code adds temp to front of free
++-    flight_schedule_free = temp;
+++    flight_schedules_free = temp;
++     flight_schedules_free->next->prev = flight_schedules_free;
++     //flight_schedule_reset(temp);
++ 
++   }
++-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
++     temp->prev->next = temp->next;
++     temp->next->prev = temp->prev;
++     temp->next = NULL;
++@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
++     flight_schedule_reset(temp);
++ 
++     temp->next = flight_schedules_free;
++-    flight_schedule_free = temp;
+++    flight_schedules_free = temp;
++     flight_schedules_free->next->prev = flight_schedules_free;
++   }
++   else{
++@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
++     flight_schedule_reset(temp); //this sets both next and prev of temp to null
++ 
++     temp->next = flight_schedules_free;
++-    flight_schedule_free = temp;
+++    flight_schedules_free = temp;
++     flight_schedules_free->next->prev = flight_schedules_free;
++     
++   }
++-}
++\ No newline at end of file
+++}
+++
+++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+++  struct flight_schedule *temp = flight_schedules_active;
+++  while(temp != NULL){
+++    if (strcmp(city,temp->destination) == 0){
+++      return(temp);
+++    }
+++    temp = temp->next;
+++  }
+++}
+++
+++
++
++commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 15:08:53 2020 -0400
++
++    working on flight_schedule_free
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 1f30cd1..a03a0af 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
++ //flight schedule free
++ //takes schedule off active list, resets it, then places the node back on free list
++ void flight_schedule_free(struct flight_schedule *fs){
++-  struct flight_schedule *temp = flight
+++  int counter = 0;
+++  struct flight_schedule *temp = flight_schedules_active;
+++  while(temp != NULL) {
+++    if(temp == fs){
+++      break;
+++    }
+++    temp = temp->next;
+++    counter++;
+++  }
+++  
+++  if (counter == 0){
+++    flight_schedules_active = temp->next;
+++    flight_schedules_active->prev = NULL;
+++    temp->next = NULL;
+++
+++    flight_schedule_reset(temp);
+++
+++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
+++    flight_schedule_free = temp;
+++    flight_schedules_free->next->prev = flight_schedules_free;
+++    //flight_schedule_reset(temp);
+++
+++  }
+++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+++    temp->prev->next = temp->next;
+++    temp->next->prev = temp->prev;
+++    temp->next = NULL;
+++    temp->prev = NULL;
+++
+++    flight_schedule_reset(temp);
+++
+++    temp->next = flight_schedules_free;
+++    flight_schedule_free = temp;
+++    flight_schedules_free->next->prev = flight_schedules_free;
+++  }
+++  else{
+++    temp->prev = NULL;
+++    flight_schedules_active->prev->next = NULL;
+++
+++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+++
+++    temp->next = flight_schedules_free;
+++    flight_schedule_free = temp;
+++    flight_schedules_free->next->prev = flight_schedules_free;
+++    
+++  }
++ }
++\ No newline at end of file
++
++commit 4da1a4230cc78e7821817c597d531316ac1feee4
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Mon Sep 28 14:12:10 2020 -0400
++
++    correcting allocate
++
++diff --git a/assignment-3.c b/assignment-3.c
++index ec71f49..1f30cd1 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
++ //returns pointer to updated flight schedule
++ struct flight_schedule * flight_schedule_allocate(void){
++ 
++-  struct flight_schedule temp = 
+++  struct flight_schedule *temp =  flight_schedules_free;
+++  flight_schedules_free = flight_schedules_free->next;
+++  flight_schedules_free->prev = NULL;
+++  temp->next = flight_schedules_active;
+++
+++  flight_schedules_active = temp;
+++  flight_schedules_active->next->prev = flight_schedules_active;
+++  //temp->prev = NULL;
+++  //struct flight_schedule *temp2 = flight_schedules_active
++   
++-  
++-  
++-  *flight_schedules_active = *flight_schedules_free->free;
++-
++-  
++-  //flight_schedules_active = flight_schedules_free;
++-  *flight_schedules_free = *flight_schedules_free->next;
++-  *flight_schedules_free->prev = NULL;
++-  return(flight_schedules_active->flights[]);
+++  return(flight_schedules_active);
++ }
++ 
++ //flight schedule free
++ //takes schedule off active list, resets it, then places the node back on free list
++ void flight_schedule_free(struct flight_schedule *fs){
++-  
+++  struct flight_schedule *temp = flight
++ }
++\ No newline at end of file
++
++commit 7c7197814c779e696458438563f16bc76b197fb2
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Sep 25 18:25:04 2020 -0400
++
++    very confused, trying to use pointers to alt sched
++
++diff --git a/assignment-3.c b/assignment-3.c
++index ff89d23..ec71f49 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
++   return (af->time - bf->time);
++ }
++ 
++-WRITE SOME CODE!
+++//WRITE SOME CODE!
++ //flight schedule allocate
+++//takes a schedule off the free list and places it on the active list
+++//returns pointer to updated flight schedule
++ struct flight_schedule * flight_schedule_allocate(void){
++-  *flight_schedules_active = *flight_schedules_free;
++-  *flight_schedules_free = *flight_schedules_free.next;
++-  return(flight_schedule);
++-}
++ 
+++  struct flight_schedule temp = 
+++  
+++  
+++  
+++  *flight_schedules_active = *flight_schedules_free->free;
++ 
+++  
+++  //flight_schedules_active = flight_schedules_free;
+++  *flight_schedules_free = *flight_schedules_free->next;
+++  *flight_schedules_free->prev = NULL;
+++  return(flight_schedules_active->flights[]);
+++}
++ 
++ //flight schedule free
++-
+++//takes schedule off active list, resets it, then places the node back on free list
++ void flight_schedule_free(struct flight_schedule *fs){
++-  *flight_schedule_active = *flight_schedule_free;
++-  *fs = 
+++  
++ }
++\ No newline at end of file
++
++commit c499f77919fd84ed08d77fbe2340135c1ac4d968
++Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
++Date:   Fri Sep 25 12:05:56 2020 -0400
++
++    starting work on first 3 helper functions
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 31abde4..ff89d23 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
++ }
++ 
++ WRITE SOME CODE!
+++//flight schedule allocate
+++struct flight_schedule * flight_schedule_allocate(void){
+++  *flight_schedules_active = *flight_schedules_free;
+++  *flight_schedules_free = *flight_schedules_free.next;
+++  return(flight_schedule);
+++}
+++
+++
+++
+++//flight schedule free
+++
+++void flight_schedule_free(struct flight_schedule *fs){
+++  *flight_schedule_active = *flight_schedule_free;
+++  *fs = 
+++}
++\ No newline at end of file
++
++commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
++Author: Jonathan Appavoo <jappavoo@bu.edu>
++Date:   Thu Sep 24 18:32:49 2020 -0400
++
++    An update to assignment-3. Fix to assignment-3.c and new refence binary
++
++diff --git a/assignment-3.c b/assignment-3.c
++index 2f5c360..31abde4 100644
++--- a/assignment-3.c
+++++ b/assignment-3.c
++@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++ // Structure to hold all the information for a single flight
++ //   A city's schedule has an array of these
++ struct flight {
++-  int time;       // departure time of the flight
+++  time_t time;       // departure time of the flight
++   int available;  // number of seats currently available on the flight
++   int capacity;   // maximum seat capacity of the flight
++ };
++@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
++     array[i+1].prev = &array[i];
++   }
++   // Takes care of last node.  
++-  // Its prev pointer will be set in the loop,
++-  // we just have to set its next to NULL.
+++  flight_schedule_reset(&array[n-1]); // reset clears all fields
++   array[n-1].next = NULL;
+++  array[n-1].prev = &array[n-2];
++   flight_schedules_free = &array[0];
++ }
++ 
++diff --git a/reference b/reference
++index ee9132a..b11f6c6 100755
++Binary files a/reference and b/reference differ
++
++commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
++Author: Jonathan Appavoo <jappavoo@bu.edu>
++Date:   Mon Sep 21 21:02:39 2020 -0400
++
++    Initial Commit to seed assignment 3. Have fun!
++
++diff --git a/.gitignore b/.gitignore
++new file mode 100644
++index 0000000..8ff04a2
++--- /dev/null
+++++ b/.gitignore
++@@ -0,0 +1,4 @@
+++*
+++!assignment-3.c
+++!gitlog.txt
+++
++diff --git a/.vscode/launch.json b/.vscode/launch.json
++new file mode 100644
++index 0000000..5f223b9
++--- /dev/null
+++++ b/.vscode/launch.json
++@@ -0,0 +1,30 @@
+++{
+++    // Use IntelliSense to learn about possible attributes.
+++    // Hover to view descriptions of existing attributes.
+++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+++    "version": "0.2.0",
+++    "configurations": [
+++    
+++
+++        {
+++            "name": "(gdb) Launch",
+++            "type": "cppdbg",
+++            "request": "launch",
+++            "program": "${workspaceFolder}/assignment-3",
+++            "args": [],
+++            "stopAtEntry": true,
+++            "cwd": "${workspaceFolder}",
+++            "environment": [],
+++            "externalConsole": false,
+++            "MIMode": "gdb",
+++            "setupCommands": [
+++                {
+++                    "description": "Enable pretty-printing for gdb",
+++                    "text": "-enable-pretty-printing",
+++                    "ignoreFailures": true
+++                }
+++            ],
+++            "preLaunchTask": "Build"
+++        }
+++    ]
+++}
++diff --git a/.vscode/settings.json b/.vscode/settings.json
++new file mode 100644
++index 0000000..495436f
++--- /dev/null
+++++ b/.vscode/settings.json
++@@ -0,0 +1,21 @@
+++{
+++    "git.ignoreLegacyWarning": true,
+++    "files.autoSave": "afterDelay",
+++    "files.exclude": {
+++        ".vscode": true,
+++        "**/*.o": true,
+++        "reference": true,
+++        "assignment-3": true,
+++        "test.sh":true,
+++        "gitlog.txt":true,
+++        ".gitignore":true
+++    },
+++    "editor.renderControlCharacters": true,
+++    "C_Cpp.default.cStandard": "c99",
+++    "C_Cpp.default.cppStandard": "gnu++11",
+++    "C_Cpp.default.defines": [],
+++    "C_Cpp.intelliSenseEngine": "Disabled",
+++    "C_Cpp.workspaceParsingPriority": "low",
+++    "C_Cpp.intelliSenseCacheSize": 100,
+++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
+++}
++diff --git a/.vscode/tasks.json b/.vscode/tasks.json
++new file mode 100644
++index 0000000..d02618f
++--- /dev/null
+++++ b/.vscode/tasks.json
++@@ -0,0 +1,28 @@
+++{
+++    // See https://go.microsoft.com/fwlink/?LinkId=733558
+++    // for the documentation about the tasks.json format
+++    "version": "2.0.0",
+++    "tasks": [
+++        {
+++            "label": "Build",
+++            "type": "shell",
+++            "command": "make",
+++            "options": {
+++                "cwd": "${workspaceFolder}"
+++            },
+++            "group": {
+++                "kind": "build",
+++                "isDefault": true
+++            },
+++            "presentation": {
+++                "reveal": "always",
+++                "panel": "shared"
+++            },
+++            "problemMatcher": {
+++                "base": "$gcc",
+++                "fileLocation": ["relative", "${workspaceRoot}/"]
+++            }
+++        }
+++        
+++    ]
+++}
++diff --git a/Makefile b/Makefile
++new file mode 100644
++index 0000000..1c3a3d1
++--- /dev/null
+++++ b/Makefile
++@@ -0,0 +1,69 @@
+++.PHONY: all clean test gitlog
+++
+++all: assignment-3
+++
+++assignment-3: assignment-3.c
+++	${CC} -std=c99 -g assignment-3.c -o assignment-3
+++
+++test: assignment-3 gitlog
+++	./test.sh
+++
+++test1: assignment-3
+++	./test.sh 1
+++
+++test2: assignment-3
+++	./test.sh 2
+++
+++test3: assignment-3
+++	./test.sh 3
+++
+++test4: assignment-3
+++	./test.sh 4
+++
+++test5: assignment-3
+++	./test.sh 5
+++
+++test6: assignment-3
+++	./test.sh 6
+++
+++test7: assignment-3
+++	./test.sh 7
+++
+++test8: assignment-3
+++	./test.sh 8
+++
+++test9: assignment-3
+++	./test.sh 9
+++
+++test10: assignment-3
+++	./test.sh 10
+++
+++test11: assignment-3
+++	./test.sh 11
+++
+++test12: assignment-3
+++	./test.sh 12
+++
+++test13: assignment-3
+++	./test.sh 13
+++
+++test14: assignment-3
+++	./test.sh 14
+++
+++test15: assignment-3
+++	./test.sh 15
+++
+++test16: assignment-3
+++	./test.sh 16
+++
+++bonus1: assignment-3
+++	./test.sh 1 bonus
+++
+++bonus2: assignment-3
+++	./test.sh 2 bonus
+++
+++gitlog:
+++	git log -p > gitlog.txt
+++
+++clean:
+++	-${RM} assignment-3
++diff --git a/assignment-3.c b/assignment-3.c
++new file mode 100644
++index 0000000..2f5c360
++--- /dev/null
+++++ b/assignment-3.c
++@@ -0,0 +1,375 @@
+++/**
+++ * Assignment #3: Strings, structs, pointers, command-line arguments.
+++ *  Let's use our knowledge to write a simple flight management system!
+++ **/
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++#include <stdbool.h>
+++#include <assert.h>
+++
+++// Limit constants
+++#define MAX_CITY_NAME_LEN 20
+++#define MAX_FLIGHTS_PER_CITY 5
+++#define MAX_DEFAULT_SCHEDULES 50
+++
+++// Time definitions
+++#define TIME_MIN 0
+++#define TIME_MAX ((60 * 24)-1)
+++#define TIME_NULL -1
+++
+++
+++/******************************************************************************
+++ * Structure and Type definitions                                             *
+++ ******************************************************************************/
+++typedef int time_t;                        // integers used for time values
+++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+++ 
+++// Structure to hold all the information for a single flight
+++//   A city's schedule has an array of these
+++struct flight {
+++  int time;       // departure time of the flight
+++  int available;  // number of seats currently available on the flight
+++  int capacity;   // maximum seat capacity of the flight
+++};
+++
+++// Structure for an individual flight schedule
+++// The main data structure of the program is an Array of these structures
+++// Each structure will be placed on one of two linked lists:
+++//                free or active
+++// Initially the active list will be empty and all the schedules
+++// will be on the free list.  Adding a schedule is finding the first
+++// free schedule on the free list, removing it from the free list,
+++// setting its destination city and putting it on the active list
+++struct flight_schedule {
+++  city_t destination;                          // destination city name
+++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
+++  struct flight_schedule *next;                // link list next pointer
+++  struct flight_schedule *prev;                // link list prev pointer
+++};
+++
+++/******************************************************************************
+++ * Global / External variables                                                *
+++ ******************************************************************************/
+++// This program uses two global linked lists of Schedules.  See comments
+++// of struct flight_schedule above for details
+++struct flight_schedule *flight_schedules_free = NULL;
+++struct flight_schedule *flight_schedules_active = NULL;
+++
+++
+++/******************************************************************************
+++ * Function Prototypes                                                        *
+++ ******************************************************************************/
+++// Misc utility io functions
+++int city_read(city_t city);           
+++bool time_get(time_t *time_ptr);      
+++bool flight_capacity_get(int *capacity_ptr);
+++void print_command_help(void);
+++
+++// Core functions of the program
+++void flight_schedule_initialize(struct flight_schedule array[], int n);
+++struct flight_schedule * flight_schedule_find(city_t city);
+++struct flight_schedule * flight_schedule_allocate(void);
+++void flight_schedule_free(struct flight_schedule *fs);
+++void flight_schedule_add(city_t city);
+++void flight_schedule_listAll(void);
+++void flight_schedule_list(city_t city);
+++void flight_schedule_add_flight(city_t city);
+++void flight_schedule_remove_flight(city_t city);
+++void flight_schedule_schedule_seat(city_t city);
+++void flight_schedule_unschedule_seat(city_t city);
+++void flight_schedule_remove(city_t city);
+++
+++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
+++int  flight_compare_time(const void *a, const void *b);
+++
+++
+++int main(int argc, char *argv[]) 
+++{
+++  long n = MAX_DEFAULT_SCHEDULES;
+++  char command;
+++  city_t city;
+++
+++  if (argc > 1) {
+++    // If the program was passed an argument then try and convert the first
+++    // argument in the a number that will override the default max number
+++    // of schedule we will support
+++    char *end;
+++    n = strtol(argv[1], &end, 10); // CPAMA p 787
+++    if (n==0) {
+++      printf("ERROR: Bad number of default max scedules specified.\n");
+++      exit(EXIT_FAILURE);
+++    }
+++  }
+++
+++  // C99 lets us allocate an array of a fixed length as a local 
+++  // variable.  Since we are doing this in main and a call to main will be 
+++  // active for the entire time of the program's execution this
+++  // array will be alive for the entire time -- its memory and values
+++  // will be stable for the entire program execution.
+++  struct flight_schedule flight_schedules[n];
+++ 
+++  // Initialize our global lists of free and active schedules using
+++  // the elements of the flight_schedules array
+++  flight_schedule_initialize(flight_schedules, n);
+++
+++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
+++  //  When possible, if we know that some particular thing should have happened
+++  //  we think of that as an assertion and write code to test them.
+++  // Use the assert function (CPAMA p749) to be sure the initilization has set
+++  // the free list to a non-null value and the the active list is a null value.
+++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
+++
+++  // Print the instruction in the beginning
+++  print_command_help();
+++
+++  // Command processing loop
+++  while (scanf(" %c", &command) == 1) {
+++    switch (command) {
+++    case 'A': 
+++      //  Add an active flight schedule for a new city eg "A Toronto\n"
+++      city_read(city);
+++      flight_schedule_add(city);
+++
+++      break;
+++    case 'L':
+++      // List all active flight schedules eg. "L\n"
+++      flight_schedule_listAll();
+++      break;
+++    case 'l': 
+++      // List the flights for a particular city eg. "l\n"
+++      city_read(city);
+++      flight_schedule_list(city);
+++      break;
+++    case 'a':
+++      // Adds a flight for a particular city "a Toronto\n
+++      //                                      360 100\n"
+++      city_read(city);
+++      flight_schedule_add_flight(city);
+++      break;
+++    case 'r':
+++      // Remove a flight for a particular city "r Toronto\n
+++      //                                        360\n"
+++      city_read(city);
+++      flight_schedule_remove_flight(city);
+++	break;
+++    case 's':
+++      // schedule a seat on a flight for a particular city "s Toronto\n
+++      //                                                    300\n"
+++      city_read(city);
+++      flight_schedule_schedule_seat(city);
+++      break;
+++    case 'u':
+++      // unschedule a seat on a flight for a particular city "u Toronto\n
+++      //                                                      360\n"
+++        city_read(city);
+++        flight_schedule_unschedule_seat(city);
+++        break;
+++    case 'R':
+++      // remove the schedule for a particular city "R Toronto\n"
+++      city_read(city);
+++      flight_schedule_remove(city);  
+++      break;
+++    case 'h':
+++        print_command_help();
+++        break;
+++    case 'q':
+++      goto done;
+++    default:
+++      printf("Bad command. Use h to see help.\n");
+++    }
+++  }
+++ done:
+++  return EXIT_SUCCESS;
+++}
+++
+++/**********************************************************************
+++ * city_read: Takes in and processes a given city following a command *
+++ *********************************************************************/
+++int city_read(city_t city) {
+++  int ch, i=0;
+++
+++  // skip leading non letter characters
+++  while (true) {
+++    ch = getchar();
+++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
+++      city[i++] = ch;
+++      break;
+++    }
+++  }
+++  while ((ch = getchar()) != '\n') {
+++    if (i < MAX_CITY_NAME_LEN) {
+++      city[i++] = ch;
+++    }
+++  }
+++  city[i] = '\0';
+++  return i;
+++}
+++
+++
+++/****************************************************************
+++ * Message functions so that your messages match what we expect *
+++ ****************************************************************/
+++void msg_city_bad(char *city) {
+++  printf("No schedule for %s\n", city);
+++}
+++
+++void msg_city_exists(char *city) {
+++  printf("There is a schedule of %s already.\n", city);
+++}
+++
+++void msg_schedule_no_free(void) {
+++  printf("Sorry no more free schedules.\n");
+++}
+++
+++void msg_city_flights(char *city) {
+++  printf("The flights for %s are:", city);
+++}
+++
+++void msg_flight_info(int time, int avail, int capacity) {
+++  printf(" (%d, %d, %d)", time, avail, capacity);
+++}
+++
+++void msg_city_max_flights_reached(char *city) {
+++  printf("Sorry we cannot add more flights on this city.\n");
+++}
+++
+++void msg_flight_bad_time(void) {
+++  printf("Sorry there's no flight scheduled on this time.\n");
+++}
+++
+++void msg_flight_no_seats(void) {
+++    printf("Sorry there's no more seats available!\n");
+++}
+++
+++void msg_flight_all_seats_empty(void) {
+++  printf("All the seats on this flights are empty!\n");
+++}
+++
+++void msg_time_bad() {
+++  printf("Invalid time value\n");
+++}
+++
+++void msg_capacity_bad() {
+++  printf("Invalid capacity value\n");
+++}
+++
+++void print_command_help()
+++{
+++  printf("Here are the possible commands:\n"
+++	 "A <city name>     - Add an active empty flight schedule for\n"
+++	 "                    <city name>\n"
+++	 "L                 - List cities which have an active schedule\n"
+++	 "l <city name>     - List the flights for <city name>\n"
+++	 "a <city name>\n"
+++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
+++	 "                    with <capacity> seats\n"  
+++	 "r <city name>\n"
+++         "<time>            - Remove a flight form <city name> whose time is\n"
+++	 "                    <time>\n"
+++	 "s <city name>\n"
+++	 "<time>            - Attempt to schedule seat on flight to \n"
+++	 "                    <city name> at <time> or next closest time on\n"
+++	 "                    which their is an available seat\n"
+++	 "u <city name>\n"
+++	 "<time>            - unschedule a seat from flight to <city name>\n"
+++	 "                    at <time>\n"
+++	 "R <city name>     - Remove schedule for <city name>\n"
+++	 "h                 - print this help message\n"
+++	 "q                 - quit\n"
+++);
+++}
+++
+++
+++/****************************************************************
+++ * Resets a flight schedule                                     *
+++ ****************************************************************/
+++void flight_schedule_reset(struct flight_schedule *fs) {
+++    fs->destination[0] = 0;
+++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
+++      fs->flights[i].time = TIME_NULL;
+++      fs->flights[i].available = 0;
+++      fs->flights[i].capacity = 0;
+++    }
+++    fs->next = NULL;
+++    fs->prev = NULL;
+++}
+++
+++/******************************************************************
+++* Initializes the flight_schedule array that will hold any flight *
+++* schedules created by the user. This is called in main for you.  *
+++ *****************************************************************/
+++
+++void flight_schedule_initialize(struct flight_schedule array[], int n)
+++{
+++  flight_schedules_active = NULL;
+++  flight_schedules_free = NULL;
+++
+++  // takes care of empty array case
+++  if (n==0) return;
+++
+++  // Loop through the Array connecting them
+++  // as a linear doubly linked list
+++  array[0].prev = NULL;
+++  for (int i=0; i<n-1; i++) {
+++    flight_schedule_reset(&array[i]);
+++    array[i].next = &array[i+1];
+++    array[i+1].prev = &array[i];
+++  }
+++  // Takes care of last node.  
+++  // Its prev pointer will be set in the loop,
+++  // we just have to set its next to NULL.
+++  array[n-1].next = NULL;
+++  flight_schedules_free = &array[0];
+++}
+++
+++/***********************************************************
+++ * time_get: read a time from the user
+++   Time in this program is a minute number 0-((24*60)-1)=1439
+++   -1 is used to indicate the NULL empty time 
+++   This function should read in a time value and check its 
+++   validity.  If it is not valid eg. not -1 or not 0-1439
+++   It should print "Invalid Time" and return false.
+++   othewise it should return the value in the integer pointed
+++   to by time_ptr.
+++ ***********************************************************/
+++bool time_get(int *time_ptr) {
+++  if (scanf("%d", time_ptr)==1) {
+++    return (TIME_NULL == *time_ptr || 
+++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
+++  } 
+++  msg_time_bad();
+++  return false;
+++}
+++
+++/***********************************************************
+++ * flight_capacity_get: read the capacity of a flight from the user
+++   This function should read in a capacity value and check its 
+++   validity.  If it is not greater than 0, it should print 
+++   "Invalid capacity value" and return false. Othewise it should 
+++   return the value in the integer pointed to by cap_ptr.
+++ ***********************************************************/
+++bool flight_capacity_get(int *cap_ptr) {
+++  if (scanf("%d", cap_ptr)==1) {
+++    return *cap_ptr > 0;
+++  }
+++  msg_capacity_bad();
+++  return false;
+++}
+++
+++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
+++{
+++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
+++	flight_compare_time);
+++}
+++
+++int flight_compare_time(const void *a, const void *b) 
+++{
+++  const struct flight *af = a;
+++  const struct flight *bf = b;
+++  
+++  return (af->time - bf->time);
+++}
+++
+++WRITE SOME CODE!
++diff --git a/gitlog.txt b/gitlog.txt
++new file mode 100644
++index 0000000..e69de29
++diff --git a/reference b/reference
++new file mode 100755
++index 0000000..ee9132a
++Binary files /dev/null and b/reference differ
++diff --git a/test.sh b/test.sh
++new file mode 100755
++index 0000000..f8ecbf4
++--- /dev/null
+++++ b/test.sh
++@@ -0,0 +1,328 @@
+++#!/bin/bash
+++#set -x
+++
+++REFERENCE=./reference
+++PGM=./assignment-3
+++
+++# To add a test you can add an element the REQUIRED arrays 
+++# or BONUS Arrays
+++# Each test can have a descripttion, input and optionally a num
+++# num is passed as the argument on the command line to set
+++# the default max schedule size
+++
+++# Required tests
+++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
+++REQUIRED_INPUT[0]="L
+++A Toronto
+++L"
+++
+++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
+++REQUIRED_INPUT[1]="L
+++A Toronto
+++l Toronto
+++a Toronto
+++1000 5
+++l Toronto"
+++
+++REQUIRED_NUM[2]="2"
+++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
+++REQUIRED_INPUT[2]="L
+++A City1
+++A City2
+++L
+++A City3
+++L"
+++
+++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
+++REQUIRED_INPUT[3]="A Naples
+++A Addis Ababa
+++L
+++R Naples
+++L"
+++
+++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
+++REQUIRED_INPUT[4]="A San Jose
+++a San Jose
+++360 100
+++l San Jose
+++r San Jose
+++360
+++l San Jose"
+++
+++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
+++REQUIRED_INPUT[5]="A Hanoi
+++r Hanoi
+++100"
+++
+++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
+++REQUIRED_INPUT[6]="A Cartagena
+++a Cartagena
+++720 100
+++a Cartagena
+++840 120
+++s Cartagena
+++480
+++l Cartagena"
+++
+++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
+++REQUIRED_INPUT[7]="L
+++A Abu Dhabi
+++a Abu Dhabi
+++360 50
+++a Abu Dhabi
+++840 100
+++s Abu Dhabi
+++700
+++l Abu Dhabi
+++u Abu Dhabi
+++840
+++l Abu Dhabi"
+++
+++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
+++REQUIRED_INPUT[8]="L
+++A Belgrade
+++a Belgrade
+++400 1
+++s Belgrade
+++400
+++l Belgrade
+++s Belgrade
+++400
+++l Belgrade"
+++
+++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
+++REQUIRED_INPUT[9]="L
+++A Kyoto
+++a Kyoto
+++300 5
+++l Kyoto
+++u Kyoto
+++300
+++l Kyoto"
+++
+++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
+++REQUIRED_INPUT[10]="L
+++A Mumbai
+++a Mumbai
+++900 3
+++l Mumbai
+++u Mumbai
+++300
+++l Mumbai"
+++
+++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
+++REQUIRED_INPUT[11]="L
+++A Prague
+++a Prague
+++360 5
+++a Prague
+++720 100
+++l Prague
+++s Prague
+++900
+++l Prague"
+++
+++REQUIRED_NUM[12]="2"
+++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
+++REQUIRED_INPUT[12]="L
+++A City1
+++L
+++A City2
+++L
+++A City3
+++L
+++R City1
+++L
+++R City2
+++L
+++R City3
+++L
+++A City1
+++L"
+++
+++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
+++REQUIRED_INPUT[13]="L
+++A City1
+++a City1
+++60 5
+++l City1
+++a City1
+++120 5
+++l City1
+++a City1
+++180 5
+++l City1
+++a City1
+++240 5
+++l City1
+++a City1
+++300 5
+++l City1
+++a City1
+++360 5
+++l City1
+++r City1
+++360
+++l City1
+++r City1
+++300
+++l City1
+++r City1
+++240
+++l City1
+++r City1
+++180
+++l City1
+++r City1
+++120
+++l City1
+++r City1
+++60
+++l City1
+++a City1
+++60 5
+++l City1"
+++
+++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
+++REQUIRED_INPUT[14]="L
+++A City1
+++a City1
+++60 3
+++l City1
+++s City1
+++60
+++l City1
+++s City1
+++60
+++l City1
+++s City1
+++60
+++l City1
+++s City1
+++60
+++l City1
+++u City1
+++60
+++l City1
+++u City1
+++60
+++l City1
+++u City1
+++60
+++l City1
+++u City1
+++60
+++l City1"
+++
+++REQUIRED_DESC[15]="Required 16: A bigger test "
+++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
+++REQUIRED_VALUE[15]=5
+++
+++
+++# Bonus tests
+++BONUS_DESC[0]="Bonus 1: Medium sized test"
+++BONUS_INPUT[0]="$(cat testMedium.txt)"
+++BONUS_VALUE[0]=3
+++
+++BONUS_DESC[1]="Bonus 2: Large sized test"
+++BONUS_INPUT[1]="$(cat testBig.txt)"
+++BONUS_VALUE[1]=5
+++
+++
+++function run_test()
+++{
+++   description="$1"
+++   input="$2"
+++   num="$3"
+++
+++   echo -n "$description : "
+++   [[ -n $VERBOSE ]] &&  echo "Input:"
+++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++   [[ -n $VERBOSE ]] &&  echo "$input"
+++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+++
+++   solution=$($REFERENCE $num <<EOF
+++$input
+++EOF
+++)
+++
+++   answer=$($PGM $num<<EOF
+++$input
+++EOF
+++)
+++
+++  if [[ -n $DEBUG ]]; then
+++      echo "$solution"
+++  else
+++    if [[ "$answer" == "$solution" ]]; then
+++       echo "PASS"
+++       return 0
+++    fi
+++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
+++    echo "FAIL"
+++    [[ -n $VERBOSE ]] && echo "Your program produced:"
+++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++    [[ -n $VERBOSE ]] && echo "$answers"    
+++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++    [[ -n $VERBOSE ]] && echo "Output should have been:"
+++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++    [[ -n $VERBOSE ]] && echo "$solution"
+++    [[ -n $VERBOSE ]] && echo "--------------------------"
+++    [[ -n $VERBOSE ]] && echo ""
+++  fi
+++  return 1
+++}
+++
+++testnum=$1
+++type=$2
+++
+++total=0
+++correct=0
+++
+++if [[ -z $testnum ]]; then
+++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
+++	value="${REQUIRED_VALUE[$i]}"
+++	[[ -z $value ]] && value=1
+++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++	    (( correct += $value ))
+++	fi
+++	(( total += value ))
+++    done
+++    
+++    
+++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
+++	value="${BONUS_VALUE[$i]}"
+++	[[ -z $value ]] && value=1
+++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++	    (( correct += $value ))
+++	fi
+++    done
+++else
+++    VERBOSE=1
+++    (( i=$testnum - 1 ))
+++    if [[ -z "$type" ]]; then
+++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
+++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
+++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
+++	    exit -1
+++	fi
+++	value="${REQUIRED_VALUE[$i]}"
+++	[[ -z $value ]] && value=1
+++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+++	    (( correct += $value ))
+++	fi
+++	(( total += value ))
+++    else
+++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
+++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
+++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
+++	    exit -1
+++	fi	
+++	value="${BONUS_VALUE[$i]}"
+++	[[ -z $value ]] && value=1
+++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+++         (( correct += $value ))
+++	fi
+++    fi
+++fi
+++echo "score: ${correct}/${total}"
++diff --git a/testBig.txt b/testBig.txt
++new file mode 100644
++index 0000000..90170d5
++--- /dev/null
+++++ b/testBig.txt
++@@ -0,0 +1,1251 @@
+++L
+++A Qingdao
+++A Paris
+++A Lima
+++A Los Angeles
+++A Khartoum
+++A Barcelona
+++A Santiago
+++A Tokyo
+++A Delhi
+++A Guangzhou
+++A Johannesburg
+++A Paris
+++A Dhaka
+++A Chennai
+++A Jinan
+++A Luanda
+++A Surat
+++A Hyderabad
+++A Beijing
+++A Atlanta
+++A Chennai
+++A Dar es Salaam
+++A Osaka
+++A Hong Kong
+++A Toronto
+++A Saint Petersburg
+++A Manila
+++A Washington, D.C.
+++A Tehran
+++A Miami
+++A Khartoum
+++A Seoul
+++A Dar es Salaam
+++A Sao Paulo
+++A Baghdad
+++A Guadalajara
+++A Ahmedabad
+++A Moscow
+++A Philadelphia
+++A Fukuoka
+++a Tokyo
+++1414 113
+++a Guadalajara
+++385 170
+++a Qingdao
+++782 37
+++a Ahmedabad
+++1411 50
+++a Los Angeles
+++517 84
+++a Tehran
+++86 61
+++a Osaka
+++1289 162
+++a Barcelona
+++1261 158
+++a Fukuoka
+++550 191
+++a Seoul
+++207 1
+++a Manila
+++364 96
+++a Khartoum
+++56 194
+++a Tokyo
+++98 1
+++a Saint Petersburg
+++1330 107
+++a Baghdad
+++15 15
+++a Chennai
+++1169 127
+++a Beijing
+++807 97
+++a Seoul
+++1134 34
+++a Jinan
+++220 102
+++a Dhaka
+++122 101
+++a Luanda
+++1342 71
+++a Guadalajara
+++195 35
+++a Fukuoka
+++28 37
+++a Beijing
+++678 83
+++a Khartoum
+++947 39
+++a Hyderabad
+++490 104
+++a Sao Paulo
+++62 83
+++a Baghdad
+++1319 24
+++a Delhi
+++718 115
+++a Baghdad
+++204 114
+++a Surat
+++430 74
+++a Miami
+++918 87
+++a Surat
+++455 95
+++a Fukuoka
+++1077 131
+++a Luanda
+++311 21
+++a Seoul
+++1132 155
+++a Lima
+++432 177
+++a Surat
+++494 102
+++a Washington, D.C.
+++667 12
+++a Hong Kong
+++200 55
+++a Los Angeles
+++1195 4
+++a Ahmedabad
+++610 161
+++a Delhi
+++508 110
+++a Atlanta
+++17 21
+++a Washington, D.C.
+++162 23
+++a Luanda
+++1216 15
+++a Tokyo
+++1095 117
+++a Philadelphia
+++1436 117
+++a Atlanta
+++277 164
+++a Manila
+++720 147
+++a Tokyo
+++1017 25
+++a Jinan
+++76 66
+++a Toronto
+++844 84
+++a Santiago
+++7 115
+++a Surat
+++388 55
+++a Tehran
+++836 174
+++a Paris
+++371 110
+++a Sao Paulo
+++516 113
+++a Luanda
+++1041 174
+++a Dhaka
+++1076 34
+++a Guadalajara
+++162 144
+++a Los Angeles
+++424 33
+++a Philadelphia
+++565 167
+++a Luanda
+++1411 44
+++a Osaka
+++1005 82
+++a Fukuoka
+++1253 194
+++a Atlanta
+++141 102
+++a Fukuoka
+++1119 112
+++a Toronto
+++782 150
+++a Dhaka
+++1006 96
+++a Miami
+++961 126
+++a Lima
+++360 41
+++a Lima
+++14 50
+++a Dhaka
+++1028 191
+++a Philadelphia
+++502 115
+++a Washington, D.C.
+++1380 59
+++a Atlanta
+++548 113
+++a Fukuoka
+++694 183
+++a Saint Petersburg
+++261 26
+++a Jinan
+++196 53
+++a Delhi
+++315 78
+++a Delhi
+++625 92
+++a Ahmedabad
+++105 98
+++a Philadelphia
+++111 15
+++a Atlanta
+++321 31
+++a Ahmedabad
+++1244 59
+++a Osaka
+++799 173
+++a Khartoum
+++302 7
+++a Luanda
+++823 190
+++a Chennai
+++754 139
+++a Los Angeles
+++1028 78
+++a Miami
+++1123 183
+++a Dar es Salaam
+++1353 102
+++a Beijing
+++473 88
+++a Paris
+++698 95
+++a Barcelona
+++545 170
+++a Chennai
+++382 85
+++a Miami
+++821 114
+++a Luanda
+++584 161
+++a Fukuoka
+++38 26
+++a Jinan
+++536 148
+++a Manila
+++1403 133
+++a Washington, D.C.
+++917 130
+++a Sao Paulo
+++1169 81
+++a Santiago
+++689 42
+++a Ahmedabad
+++279 30
+++a Los Angeles
+++881 35
+++a Jinan
+++1293 148
+++a Guangzhou
+++1366 38
+++a Santiago
+++317 123
+++a Tokyo
+++454 104
+++a Atlanta
+++626 177
+++a Surat
+++69 135
+++a Luanda
+++1426 19
+++a Barcelona
+++879 46
+++a Los Angeles
+++1329 90
+++a Beijing
+++402 60
+++a Lima
+++727 161
+++a Hyderabad
+++601 186
+++a Khartoum
+++294 183
+++a Hyderabad
+++267 131
+++a Manila
+++771 102
+++a Osaka
+++103 68
+++a Atlanta
+++848 147
+++a Atlanta
+++811 179
+++a Toronto
+++402 131
+++a Guadalajara
+++804 28
+++a Qingdao
+++16 114
+++a Beijing
+++1218 14
+++a Moscow
+++498 195
+++a Surat
+++528 48
+++a Manila
+++865 4
+++a Guangzhou
+++328 24
+++a Dhaka
+++227 50
+++a Manila
+++124 91
+++a Philadelphia
+++218 104
+++a Dar es Salaam
+++209 34
+++a Chennai
+++641 179
+++a Barcelona
+++1433 171
+++a Lima
+++957 60
+++a Dhaka
+++1292 111
+++a Qingdao
+++647 40
+++a Khartoum
+++417 3
+++a Tehran
+++751 180
+++a Barcelona
+++778 118
+++a Luanda
+++204 59
+++a Ahmedabad
+++541 34
+++a Ahmedabad
+++539 33
+++a Los Angeles
+++824 193
+++a Tehran
+++1412 39
+++s Luanda
+++1418
+++s Toronto
+++857
+++s Lima
+++22
+++s Tehran
+++100
+++s Washington
+++175
+++s Dhaka
+++132
+++s Jinan
+++90
+++s Beijing
+++812
+++s Barcelona
+++1268
+++s Dhaka
+++228
+++s Dhaka
+++229
+++s Osaka
+++1295
+++s Los Angeles
+++527
+++s Ahmedabad
+++620
+++s Tokyo
+++461
+++s Luanda
+++588
+++s Tehran
+++1420
+++s Jinan
+++228
+++s Hyderabad
+++497
+++s Manila
+++879
+++s Delhi
+++720
+++s Surat
+++442
+++s Lima
+++21
+++s Delhi
+++630
+++s Tehran
+++836
+++s Dhaka
+++1042
+++s Atlanta
+++558
+++s Khartoum
+++300
+++s Luanda
+++1050
+++s Lima
+++445
+++s Hong Kong
+++213
+++s Delhi
+++318
+++s Manila
+++725
+++s Dhaka
+++1300
+++s Tokyo
+++1028
+++s Lima
+++23
+++s Qingdao
+++24
+++s Ahmedabad
+++542
+++s Barcelona
+++1274
+++s Santiago
+++7
+++s Surat
+++467
+++s Chennai
+++392
+++s Fukuoka
+++551
+++s Fukuoka
+++704
+++s Fukuoka
+++34
+++s Fukuoka
+++1131
+++s Ahmedabad
+++541
+++s Philadelphia
+++566
+++s Surat
+++506
+++s Khartoum
+++952
+++s Guadalajara
+++389
+++s Tokyo
+++1031
+++s Baghdad
+++24
+++s Khartoum
+++307
+++s Lima
+++370
+++s Atlanta
+++812
+++s Sao Paulo
+++1176
+++s Manila
+++1411
+++s Khartoum
+++294
+++s Seoul
+++1148
+++s Guadalajara
+++814
+++s Khartoum
+++314
+++s Manila
+++1410
+++s Khartoum
+++302
+++s Philadelphia
+++230
+++s Lima
+++728
+++s Ahmedabad
+++548
+++s Fukuoka
+++1121
+++s Baghdad
+++206
+++s Ahmedabad
+++1424
+++s Santiago
+++11
+++s Lima
+++364
+++s Manila
+++128
+++s Tokyo
+++460
+++s Surat
+++469
+++s Barcelona
+++1274
+++s Guadalajara
+++816
+++s Guadalajara
+++811
+++s Luanda
+++597
+++s Atlanta
+++852
+++s Guadalajara
+++811
+++s Manila
+++1409
+++s Miami
+++918
+++s Luanda
+++593
+++s Barcelona
+++1440
+++s Dhaka
+++132
+++s Lima
+++363
+++s Ahmedabad
+++1251
+++s Los Angeles
+++521
+++s Fukuoka
+++38
+++s Beijing
+++686
+++s Fukuoka
+++1126
+++s Guadalajara
+++196
+++s Baghdad
+++206
+++s Los Angeles
+++522
+++s Ahmedabad
+++553
+++s Ahmedabad
+++1416
+++s Philadelphia
+++113
+++s Dar es Salaam
+++217
+++s Lima
+++958
+++s Tehran
+++752
+++s Washington
+++680
+++s Tehran
+++756
+++s Khartoum
+++299
+++s Dhaka
+++1084
+++s Manila
+++878
+++s Ahmedabad
+++541
+++s Ahmedabad
+++119
+++s Ahmedabad
+++616
+++s Tehran
+++756
+++s Tehran
+++765
+++s Philadelphia
+++569
+++s Ahmedabad
+++283
+++s Washington
+++1387
+++s Saint Petersburg
+++274
+++s Dhaka
+++1037
+++s Philadelphia
+++506
+++s Luanda
+++593
+++s Philadelphia
+++232
+++s Dhaka
+++233
+++s Baghdad
+++1329
+++s Chennai
+++768
+++s Barcelona
+++546
+++s Sao Paulo
+++529
+++s Jinan
+++543
+++s Philadelphia
+++121
+++s Tehran
+++759
+++s Lima
+++964
+++s Miami
+++923
+++s Los Angeles
+++1195
+++s Jinan
+++200
+++s Jinan
+++224
+++s Beijing
+++1220
+++s Lima
+++368
+++s Philadelphia
+++1436
+++s Tehran
+++95
+++s Miami
+++928
+++s Baghdad
+++1326
+++s Beijing
+++483
+++s Qingdao
+++647
+++s Fukuoka
+++42
+++s Los Angeles
+++1033
+++s Los Angeles
+++836
+++s Osaka
+++1010
+++s Manila
+++865
+++s Miami
+++825
+++s Barcelona
+++553
+++s Tehran
+++757
+++s Jinan
+++88
+++s Luanda
+++1355
+++s Saint Petersburg
+++266
+++s Surat
+++459
+++s Philadelphia
+++576
+++s Philadelphia
+++1441
+++s Paris
+++709
+++s Manila
+++734
+++s Toronto
+++785
+++s Manila
+++135
+++s Lima
+++368
+++s Lima
+++967
+++s Delhi
+++731
+++s Beijing
+++403
+++s Santiago
+++692
+++s Tehran
+++1416
+++s Dar es Salaam
+++1358
+++s Seoul
+++1134
+++s Philadelphia
+++579
+++s Guangzhou
+++342
+++s Osaka
+++116
+++s Guadalajara
+++397
+++s Dhaka
+++1040
+++s Toronto
+++793
+++s Qingdao
+++25
+++s Baghdad
+++1332
+++s Osaka
+++1017
+++s Los Angeles
+++1338
+++s Ahmedabad
+++551
+++s Guangzhou
+++331
+++s Tehran
+++1420
+++s Dar es Salaam
+++215
+++s Tokyo
+++462
+++s Atlanta
+++859
+++s Fukuoka
+++554
+++s Ahmedabad
+++1423
+++s Jinan
+++229
+++s Dhaka
+++1294
+++s Ahmedabad
+++1250
+++s Ahmedabad
+++621
+++s Delhi
+++626
+++s Manila
+++129
+++s Luanda
+++204
+++s Surat
+++440
+++s Atlanta
+++22
+++s Ahmedabad
+++1251
+++s Khartoum
+++302
+++s Surat
+++73
+++s Guadalajara
+++209
+++s Manila
+++721
+++s Toronto
+++793
+++s Dar es Salaam
+++216
+++s Manila
+++785
+++s Ahmedabad
+++116
+++s Barcelona
+++548
+++s Dhaka
+++1041
+++s Khartoum
+++305
+++s Los Angeles
+++1208
+++s Dhaka
+++1079
+++s Tokyo
+++1422
+++s Manila
+++722
+++s Osaka
+++1298
+++s Surat
+++431
+++s Khartoum
+++294
+++s Barcelona
+++1445
+++s Luanda
+++589
+++s Chennai
+++645
+++s Luanda
+++835
+++s Manila
+++773
+++s Fukuoka
+++1256
+++s Dhaka
+++1300
+++s Philadelphia
+++230
+++s Philadelphia
+++571
+++s Hong Kong
+++209
+++s Khartoum
+++419
+++s Paris
+++706
+++s Sao Paulo
+++516
+++s Tehran
+++843
+++s Khartoum
+++429
+++s Khartoum
+++66
+++s Guadalajara
+++815
+++s Khartoum
+++63
+++s Guadalajara
+++397
+++s Baghdad
+++218
+++s Saint Petersburg
+++274
+++s Dar es Salaam
+++1359
+++s Lima
+++439
+++s Khartoum
+++312
+++s Luanda
+++1345
+++s Seoul
+++220
+++s Tokyo
+++1020
+++s Atlanta
+++25
+++s Sao Paulo
+++1179
+++s Manila
+++732
+++s Philadelphia
+++122
+++s Manila
+++723
+++s Baghdad
+++205
+++s Osaka
+++1018
+++s Tehran
+++762
+++s Luanda
+++1412
+++s Toronto
+++845
+++s Qingdao
+++24
+++s Surat
+++528
+++s Chennai
+++385
+++s Ahmedabad
+++542
+++s Philadelphia
+++1447
+++s Lima
+++733
+++s Guadalajara
+++205
+++s Delhi
+++326
+++s Chennai
+++754
+++s Atlanta
+++823
+++s Manila
+++377
+++s Khartoum
+++303
+++s Delhi
+++512
+++s Surat
+++498
+++s Guadalajara
+++165
+++s Manila
+++720
+++s Washington
+++170
+++s Hyderabad
+++280
+++s Lima
+++370
+++s Tokyo
+++98
+++s Toronto
+++854
+++s Ahmedabad
+++618
+++s Toronto
+++858
+++s Tehran
+++1421
+++s Qingdao
+++783
+++s Barcelona
+++784
+++s Santiago
+++690
+++s Fukuoka
+++1082
+++s Jinan
+++232
+++s Chennai
+++385
+++s Paris
+++710
+++s Tokyo
+++1427
+++s Chennai
+++754
+++s Miami
+++920
+++s Toronto
+++407
+++s Guadalajara
+++806
+++s Miami
+++923
+++s Philadelphia
+++226
+++s Manila
+++720
+++s Manila
+++133
+++s Toronto
+++852
+++s Barcelona
+++886
+++s Sao Paulo
+++68
+++s Delhi
+++630
+++s Los Angeles
+++428
+++s Washington
+++917
+++s Atlanta
+++322
+++s Atlanta
+++549
+++s Manila
+++137
+++s Miami
+++1135
+++s Guadalajara
+++399
+++A Dar es Salaam
+++a Qingdao
+++1015 95
+++u Toronto
+++402
+++A Lagos
+++L
+++a Qingdao
+++910 139
+++R Dar es Salaam
+++r Washington
+++917
+++u Osaka
+++103
+++R Tokyo
+++a Baghdad
+++309 68
+++L
+++R Jinan
+++L
+++s Washington
+++170
+++L
+++R Hyderabad
+++r Lima
+++727
+++u Khartoum
+++302
+++A Nagoya
+++u Los Angeles
+++1329
+++a Luanda
+++1364 38
+++r Philadelphia
+++1436
+++A Johannesburg
+++A New York City
+++a Los Angeles
+++270 149
+++A Los Angeles
+++R Manila
+++r Beijing
+++473
+++A Beijing
+++r Tokyo
+++1414
+++a Lima
+++1003 11
+++r Dhaka
+++227
+++s Fukuoka
+++38
+++s Moscow
+++499
+++u Delhi
+++508
+++r Jinan
+++220
+++L
+++a Qingdao
+++314 81
+++s Manila
+++878
+++a Sao Paulo
+++457 134
+++L
+++R Hong Kong
+++A Nagoya
+++s Lima
+++962
+++u Baghdad
+++1319
+++L
+++R Dhaka
+++L
+++u Lima
+++432
+++a Barcelona
+++756 138
+++s Toronto
+++784
+++u Dar es Salaam
+++209
+++R Miami
+++u Washington
+++1380
+++s Manila
+++784
+++A London
+++s Surat
+++459
+++L
+++A Manila
+++A Istanbul
+++r Toronto
+++782
+++r Saint Petersburg
+++1330
+++s Guadalajara
+++396
+++A Tianjin
+++r Tokyo
+++98
+++R Luanda
+++r Dhaka
+++122
+++R Lagos
+++u Fukuoka
+++694
+++r Jinan
+++76
+++u Sao Paulo
+++457
+++a Philadelphia
+++455 175
+++L
+++u Delhi
+++718
+++r Osaka
+++1005
+++A Harbin
+++u Luanda
+++584
+++r Los Angeles
+++424
+++L
+++u Los Angeles
+++824
+++L
+++R Khartoum
+++r Barcelona
+++545
+++r Philadelphia
+++502
+++R Moscow
+++r Hyderabad
+++601
+++u Los Angeles
+++824
+++A Nagoya
+++R Washington, D.C.
+++L
+++L
+++s Qingdao
+++790
+++R Sao Paulo
+++A Shanghai
+++A Paris
+++u Beijing
+++402
+++r Philadelphia
+++455
+++s Luanda
+++1053
+++a Saint Petersburg
+++322 141
+++r Osaka
+++103
+++r Barcelona
+++879
+++a Baghdad
+++732 76
+++r Baghdad
+++309
+++a Tehran
+++1213 65
+++a Tehran
+++270 7
+++R Manila
+++L
+++A Nanjing
+++r Luanda
+++204
+++L
+++u Los Angeles
+++824
+++a Seoul
+++161 99
+++s Ahmedabad
+++546
+++a Atlanta
+++920 91
+++a Tianjin
+++85 108
+++a Lima
+++1345 173
+++r Manila
+++865
+++r Luanda
+++584
+++A Singapore
+++L
+++u Manila
+++364
+++L
+++A Kolkata
+++a Nanjing
+++1014 161
+++u Jinan
+++1293
+++u Miami
+++918
+++L
+++R Johannesburg
+++L
+++L
+++A Kuala Lumpur
+++u Miami
+++961
+++R Atlanta
+++A Ahmedabad
+++A Istanbul
+++u Baghdad
+++732
+++a New York City
+++1256 182
+++R Qingdao
+++r Guadalajara
+++385
+++R Guadalajara
+++s Surat
+++463
+++r Nanjing
+++1014
+++A Hangzhou
+++A Lahore
+++s Los Angeles
+++1198
+++R Seoul
+++A Fukuoka
+++A Foshan
+++u Sao Paulo
+++62
+++L
+++a Beijing
+++9 165
+++a Istanbul
+++877 85
+++R Kolkata
+++R Foshan
+++R Toronto
+++a Barcelona
+++1008 74
+++s Sao Paulo
+++1183
+++A Shenzhen
+++A Hong Kong
+++A Shenzhen
+++R Philadelphia
+++u Toronto
+++844
+++R Nagoya
+++a London
+++599 14
+++A Chengdu
+++a Paris
+++1063 129
+++r Lima
+++14
+++L
+++s Luanda
+++1374
+++a Tehran
+++371 109
+++r Miami
+++918
+++a New York City
+++272 66
+++L
+++a Harbin
+++633 24
+++R Tehran
+++A Khartoum
+++a Shenzhen
+++930 112
+++a Istanbul
+++1125 123
+++u Qingdao
+++782
+++L
+++R Shanghai
+++s Osaka
+++808
+++a Baghdad
+++658 29
+++u Tianjin
+++85
+++r Atlanta
+++321
+++r Khartoum
+++302
+++A Los Angeles
+++A Dhaka
+++L
+++s Qingdao
+++660
+++A Toronto
+++u Luanda
+++1041
+++u Guadalajara
+++195
+++L
+++a Hangzhou
+++553 187
+++s Fukuoka
+++1256
+++L
+++L
+++u Osaka
+++799
++diff --git a/testMedium.txt b/testMedium.txt
++new file mode 100644
++index 0000000..3ddcea1
++--- /dev/null
+++++ b/testMedium.txt
++@@ -0,0 +1,766 @@
+++L
+++A Manila
+++A Jakarta
+++A Saint Petersburg
+++A Atlanta
+++A Hong Kong
+++A Philadelphia
+++A Chicago
+++A Foshan
+++A Fukuoka
+++A Chennai
+++A Dallas
+++A Guangzhou
+++A Chengdu
+++A Ho Chi Minh City
+++A Bangkok
+++A Nanjing
+++A Moscow
+++A Chengdu
+++A Lahore
+++A Philadelphia
+++A Bogota
+++A Pune
+++A Suzhou
+++A Dongguan
+++A Paris
+++A Chennai
+++A Dongguan
+++A Lima
+++A Qingdao
+++A Kolkata
+++a Nanjing
+++1262 198
+++a Dongguan
+++72 86
+++a Foshan
+++776 178
+++a Bangkok
+++1177 9
+++a Saint Petersburg
+++59 145
+++a Pune
+++925 113
+++a Chicago
+++155 192
+++a Atlanta
+++1400 4
+++a Jakarta
+++795 145
+++a Atlanta
+++1177 147
+++a Suzhou
+++93 109
+++a Paris
+++95 197
+++a Nanjing
+++916 142
+++a Pune
+++1133 134
+++a Chennai
+++307 49
+++a Qingdao
+++91 177
+++a Dallas
+++500 174
+++a Atlanta
+++457 94
+++a Lima
+++993 151
+++a Chengdu
+++1108 189
+++a Fukuoka
+++44 70
+++a Paris
+++1107 25
+++a Lima
+++1052 62
+++a Guangzhou
+++1410 160
+++a Manila
+++602 45
+++a Nanjing
+++1410 105
+++a Guangzhou
+++1211 170
+++a Foshan
+++1427 175
+++a Fukuoka
+++279 183
+++a Philadelphia
+++329 169
+++a Moscow
+++1385 5
+++a Chennai
+++1258 163
+++a Chicago
+++1304 114
+++a Dongguan
+++1221 26
+++a Philadelphia
+++182 26
+++a Suzhou
+++396 159
+++a Chengdu
+++524 33
+++a Ho Chi Minh City
+++869 63
+++a Kolkata
+++656 1
+++a Atlanta
+++246 41
+++a Chengdu
+++626 182
+++a Saint Petersburg
+++1133 134
+++a Suzhou
+++348 13
+++a Chicago
+++1337 18
+++a Philadelphia
+++1224 23
+++a Fukuoka
+++68 193
+++a Philadelphia
+++793 20
+++a Saint Petersburg
+++229 197
+++a Bogota
+++818 86
+++a Chengdu
+++826 46
+++a Bangkok
+++575 16
+++a Paris
+++101 180
+++a Fukuoka
+++406 174
+++a Ho Chi Minh City
+++1114 108
+++a Lahore
+++1163 131
+++a Ho Chi Minh City
+++118 111
+++a Foshan
+++333 156
+++a Kolkata
+++287 0
+++a Lahore
+++1263 28
+++a Bogota
+++980 116
+++a Bogota
+++1392 84
+++a Suzhou
+++111 84
+++a Hong Kong
+++726 56
+++a Kolkata
+++663 118
+++a Saint Petersburg
+++1369 41
+++a Atlanta
+++1138 89
+++a Qingdao
+++406 78
+++a Lima
+++1019 194
+++a Kolkata
+++1242 80
+++a Foshan
+++810 6
+++a Atlanta
+++936 36
+++a Manila
+++933 147
+++a Ho Chi Minh City
+++612 31
+++a Bangkok
+++1383 70
+++a Kolkata
+++324 94
+++a Atlanta
+++1318 62
+++a Fukuoka
+++1136 56
+++a Atlanta
+++348 41
+++a Moscow
+++1335 129
+++a Manila
+++1222 33
+++a Chengdu
+++1374 183
+++a Foshan
+++313 20
+++a Philadelphia
+++1211 143
+++a Dongguan
+++40 104
+++a Atlanta
+++539 85
+++a Chicago
+++756 22
+++a Suzhou
+++20 113
+++a Kolkata
+++172 34
+++a Moscow
+++1306 15
+++a Qingdao
+++465 13
+++a Moscow
+++921 144
+++a Saint Petersburg
+++1264 189
+++a Bangkok
+++965 179
+++a Pune
+++21 100
+++a Saint Petersburg
+++1227 183
+++a Lahore
+++752 15
+++a Chicago
+++643 117
+++a Suzhou
+++18 66
+++a Guangzhou
+++110 16
+++a Dongguan
+++1279 94
+++s Jakarta
+++802
+++s Foshan
+++787
+++s Nanjing
+++1263
+++s Manila
+++941
+++s Lima
+++1060
+++s Chengdu
+++1120
+++s Qingdao
+++99
+++s Philadelphia
+++329
+++s Nanjing
+++1266
+++s Manila
+++1235
+++s Qingdao
+++96
+++s Atlanta
+++257
+++s Kolkata
+++666
+++s Kolkata
+++663
+++s Chengdu
+++636
+++s Ho Chi Minh City
+++1120
+++s Bogota
+++1394
+++s Lahore
+++1171
+++s Paris
+++108
+++s Ho Chi Minh City
+++1120
+++s Foshan
+++342
+++s Qingdao
+++417
+++s Chennai
+++315
+++s Foshan
+++1431
+++s Guangzhou
+++1224
+++s Nanjing
+++928
+++s Ho Chi Minh City
+++1125
+++s Kolkata
+++338
+++s Dongguan
+++1281
+++s Moscow
+++1314
+++s Foshan
+++343
+++s Dongguan
+++1221
+++s Paris
+++1110
+++s Bangkok
+++1178
+++s Manila
+++1229
+++s Ho Chi Minh City
+++121
+++s Paris
+++109
+++s Manila
+++614
+++s Foshan
+++789
+++s Ho Chi Minh City
+++120
+++s Jakarta
+++803
+++s Chicago
+++770
+++s Kolkata
+++660
+++s Moscow
+++1335
+++s Saint Petersburg
+++1147
+++s Philadelphia
+++192
+++s Nanjing
+++916
+++s Dallas
+++514
+++s Ho Chi Minh City
+++626
+++s Philadelphia
+++1225
+++s Saint Petersburg
+++1377
+++s Suzhou
+++402
+++s Bogota
+++993
+++s Chennai
+++1271
+++s Chennai
+++307
+++s Paris
+++106
+++s Moscow
+++1318
+++s Nanjing
+++1267
+++s Bogota
+++991
+++s Atlanta
+++1139
+++s Suzhou
+++34
+++s Paris
+++104
+++s Chennai
+++1272
+++s Ho Chi Minh City
+++623
+++s Dongguan
+++1287
+++s Saint Petersburg
+++1372
+++s Atlanta
+++1142
+++s Foshan
+++320
+++s Chicago
+++1338
+++s Jakarta
+++803
+++s Foshan
+++816
+++s Ho Chi Minh City
+++122
+++s Atlanta
+++549
+++s Dongguan
+++83
+++s Saint Petersburg
+++70
+++s Chengdu
+++1384
+++s Philadelphia
+++796
+++s Ho Chi Minh City
+++1123
+++s Atlanta
+++248
+++s Atlanta
+++1147
+++s Suzhou
+++115
+++s Dongguan
+++72
+++s Qingdao
+++410
+++s Chicago
+++766
+++s Philadelphia
+++1221
+++s Lima
+++1005
+++s Atlanta
+++1146
+++s Lima
+++1003
+++s Ho Chi Minh City
+++1117
+++s Paris
+++109
+++s Atlanta
+++1190
+++s Moscow
+++1388
+++s Kolkata
+++666
+++s Dallas
+++506
+++s Chennai
+++314
+++s Pune
+++925
+++s Lahore
+++1274
+++s Nanjing
+++927
+++s Philadelphia
+++799
+++s Dallas
+++505
+++s Hong Kong
+++727
+++s Moscow
+++925
+++s Qingdao
+++417
+++s Philadelphia
+++336
+++s Bangkok
+++1178
+++s Moscow
+++1347
+++s Atlanta
+++540
+++s Guangzhou
+++122
+++s Atlanta
+++1323
+++s Philadelphia
+++1224
+++s Fukuoka
+++1140
+++s Chicago
+++167
+++s Bogota
+++1401
+++s Foshan
+++813
+++s Bogota
+++1403
+++s Qingdao
+++465
+++s Atlanta
+++469
+++s Pune
+++1133
+++s Qingdao
+++93
+++s Moscow
+++1316
+++s Dongguan
+++49
+++s Suzhou
+++23
+++s Qingdao
+++468
+++s Kolkata
+++335
+++s Atlanta
+++542
+++s Kolkata
+++666
+++s Lima
+++996
+++s Foshan
+++1441
+++s Philadelphia
+++184
+++s Qingdao
+++104
+++s Atlanta
+++1406
+++s Foshan
+++335
+++s Atlanta
+++256
+++s Suzhou
+++28
+++s Lima
+++1025
+++s Saint Petersburg
+++1277
+++s Bogota
+++987
+++s Bogota
+++981
+++s Ho Chi Minh City
+++623
+++s Kolkata
+++337
+++s Bogota
+++1398
+++s Atlanta
+++1145
+++s Bangkok
+++973
+++s Manila
+++940
+++s Atlanta
+++351
+++s Ho Chi Minh City
+++622
+++s Kolkata
+++667
+++s Paris
+++104
+++s Chennai
+++1265
+++s Ho Chi Minh City
+++881
+++s Foshan
+++1427
+++s Guangzhou
+++1225
+++s Kolkata
+++1251
+++s Manila
+++941
+++s Jakarta
+++808
+++s Hong Kong
+++736
+++s Foshan
+++1438
+++s Dongguan
+++1289
+++s Saint Petersburg
+++1370
+++s Hong Kong
+++737
+++s Dongguan
+++75
+++s Philadelphia
+++340
+++s Suzhou
+++118
+++s Qingdao
+++414
+++s Bogota
+++823
+++s Chengdu
+++828
+++s Foshan
+++317
+++s Suzhou
+++27
+++s Saint Petersburg
+++1379
+++s Ho Chi Minh City
+++618
+++s Lahore
+++766
+++s Chicago
+++1304
+++s Bangkok
+++1179
+++s Manila
+++609
+++s Chengdu
+++630
+++s Paris
+++1108
+++s Kolkata
+++662
+++s Hong Kong
+++732
+++s Pune
+++932
+++s Chennai
+++1258
+++s Paris
+++95
+++s Pune
+++938
+++s Chengdu
+++635
+++s Paris
+++1118
+++s Ho Chi Minh City
+++612
+++s Ho Chi Minh City
+++1117
+++s Ho Chi Minh City
+++612
+++s Kolkata
+++667
+++s Chennai
+++1266
+++s Foshan
+++782
+++s Philadelphia
+++330
+++s Manila
+++1227
+++s Lahore
+++1170
+++s Guangzhou
+++114
+++s Foshan
+++788
+++s Guangzhou
+++122
+++s Atlanta
+++544
+++s Paris
+++1113
+++s Pune
+++938
+++s Dallas
+++502
+++A Jinan
+++a Dallas
+++368 9
+++r Lahore
+++1163
+++A Guadalajara
+++s Kolkata
+++335
+++R Saint Petersburg
+++a Chicago
+++1209 107
+++L
+++r Fukuoka
+++44
+++u Nanjing
+++916
+++R Hong Kong
+++u Guangzhou
+++1211
+++s Atlanta
+++946
+++A Rio de Janeiro
+++u Bangkok
+++575
+++s Saint Petersburg
+++240
+++a Paris
+++47 91
+++u Kolkata
+++656
+++a Rio de Janeiro
+++344 21
+++a Dongguan
+++822 109
+++a Jakarta
+++301 168
+++L
+++R Kolkata
+++L
+++u Fukuoka
+++406
+++A Chennai
+++r Jakarta
+++301
+++A Delhi
+++L
+++u Philadelphia
+++329
+++L
+++a Suzhou
+++410 59
+++u Atlanta
+++1177
+++L
+++a Suzhou
+++1324 112
+++R Jakarta
+++R Chicago
+++a Manila
+++433 124
+++a Bangkok
+++1360 44
+++A Dar es Salaam
+++r Saint Petersburg
+++1227
+++u Dongguan
+++40
+++a Paris
+++53 137
+++a Dongguan
+++477 27
+++a Chennai
+++1271 197
+++R Qingdao
+++r Bangkok
+++1383
+++a Chennai
+++149 23
+++L
+++r Saint Petersburg
+++229
+++a Chennai
+++283 168
+++s Lima
+++1021
+++a Fukuoka
+++273 11
+++A Mexico City
+++a Delhi
+++1276 157
+++a Ho Chi Minh City
+++729 61
+++u Suzhou
+++20
+++r Guangzhou
+++1410
+++L
+++u Bogota
+++980
+++a Chengdu
+++276 132
+++a Rio de Janeiro
+++590 30
+++r Chicago
+++1337
+++s Saint Petersburg
+++1369
+++u Qingdao
+++91
+++u Ho Chi Minh City
+++612
+++R Pune
+++s Dongguan
+++484
+++u Nanjing
+++1410
+++u Chengdu
+++1108
+++a Chennai
+++341 192
+++R Dallas
+++s Dongguan
+++75
+++L
+++a Ho Chi Minh City
+++184 26
+++r Ho Chi Minh City
+++612
+++r Ho Chi Minh City
+++1114
+++a Philadelphia
+++1294 136
+++L
+++r Nanjing
+++1262
++diff --git a/testSmall.txt b/testSmall.txt
++new file mode 100644
++index 0000000..f4ec80b
++--- /dev/null
+++++ b/testSmall.txt
++@@ -0,0 +1,405 @@
+++L
+++A Barcelona
+++A Surat
+++A Hong Kong
+++A Paris
+++A Moscow
+++A Chennai
+++A Dalian
+++A Dallas
+++A Johannesburg
+++A Santiago
+++A Tehran
+++A Country
+++A Dalian
+++A Madrid
+++A Lima
+++A Baghdad
+++A London
+++A Manila
+++A Wuhan
+++A Khartoum
+++a Santiago
+++1367 161
+++a Hong Kong
+++1264 40
+++a Country
+++689 165
+++a Dalian
+++1233 85
+++a Surat
+++852 188
+++a Manila
+++1204 151
+++a Manila
+++976 88
+++a London
+++52 159
+++a London
+++931 144
+++a Baghdad
+++971 50
+++a Moscow
+++391 42
+++a Country
+++404 93
+++a Chennai
+++277 87
+++a Moscow
+++877 194
+++a Surat
+++122 42
+++a Baghdad
+++1304 176
+++a Baghdad
+++291 159
+++a Lima
+++859 128
+++a Manila
+++1039 11
+++a Wuhan
+++1059 72
+++a Dallas
+++638 109
+++a Lima
+++1053 174
+++a Dallas
+++1344 172
+++a Barcelona
+++997 102
+++a Moscow
+++15 84
+++a Moscow
+++1256 57
+++a Barcelona
+++69 169
+++a London
+++848 77
+++a Wuhan
+++348 32
+++a Surat
+++146 190
+++a Moscow
+++374 85
+++a Khartoum
+++166 145
+++a Manila
+++1349 35
+++a Country
+++659 100
+++a Dalian
+++460 88
+++a Dalian
+++542 56
+++a Paris
+++298 48
+++a Wuhan
+++906 106
+++a Chennai
+++446 195
+++a Khartoum
+++755 86
+++a Madrid
+++255 162
+++a Khartoum
+++774 189
+++a Manila
+++753 82
+++a Baghdad
+++56 162
+++a Dalian
+++1259 196
+++a Hong Kong
+++97 2
+++a Manila
+++1084 43
+++a Paris
+++518 29
+++a Moscow
+++710 196
+++a Tehran
+++375 108
+++a Chennai
+++836 14
+++a Santiago
+++1186 103
+++a Madrid
+++815 186
+++a Barcelona
+++761 55
+++a Paris
+++1223 86
+++a Hong Kong
+++190 8
+++a Manila
+++1331 53
+++a Country
+++1277 0
+++a Madrid
+++269 7
+++a Santiago
+++94 189
+++s Barcelona
+++770
+++s Wuhan
+++1064
+++s Santiago
+++1375
+++s Dalian
+++1241
+++s London
+++851
+++s Moscow
+++718
+++s London
+++56
+++s Hong Kong
+++1273
+++s Chennai
+++841
+++s Khartoum
+++167
+++s Surat
+++853
+++s Moscow
+++1259
+++s Baghdad
+++984
+++s Hong Kong
+++102
+++s Manila
+++978
+++s Madrid
+++256
+++s Barcelona
+++1011
+++s Dalian
+++553
+++s Dallas
+++646
+++s Wuhan
+++354
+++s London
+++939
+++s Barcelona
+++769
+++s Hong Kong
+++1277
+++s Santiago
+++1187
+++s Moscow
+++393
+++s Country
+++661
+++s Surat
+++860
+++s Manila
+++1355
+++s Country
+++691
+++s Moscow
+++19
+++s Country
+++667
+++s Manila
+++977
+++s Surat
+++156
+++s Barcelona
+++1004
+++s Dallas
+++638
+++s Moscow
+++399
+++s Dalian
+++1264
+++s Country
+++1280
+++s Wuhan
+++907
+++s Madrid
+++828
+++s Santiago
+++1375
+++s Paris
+++311
+++s Chennai
+++456
+++s Madrid
+++825
+++s Madrid
+++823
+++s Chennai
+++460
+++s London
+++937
+++s Baghdad
+++1307
+++s Wuhan
+++349
+++s Country
+++691
+++s Dalian
+++550
+++s Manila
+++1353
+++s Baghdad
+++61
+++s Moscow
+++1256
+++s Surat
+++129
+++s Khartoum
+++172
+++s Moscow
+++882
+++s Baghdad
+++977
+++s Surat
+++134
+++s Hong Kong
+++1273
+++s Country
+++659
+++s Khartoum
+++777
+++s Manila
+++1040
+++s Wuhan
+++1059
+++s Surat
+++865
+++s Country
+++408
+++s Baghdad
+++973
+++s Paris
+++1226
+++s Santiago
+++100
+++s Paris
+++1227
+++s London
+++940
+++s Moscow
+++1269
+++s Khartoum
+++774
+++s Barcelona
+++69
+++s Manila
+++977
+++s Wuhan
+++354
+++s London
+++942
+++s Barcelona
+++763
+++s Moscow
+++18
+++s Hong Kong
+++204
+++s Manila
+++767
+++s London
+++56
+++s Moscow
+++386
+++s Santiago
+++108
+++s Manila
+++1339
+++s Manila
+++1040
+++s Santiago
+++1187
+++s Country
+++1288
+++s Wuhan
+++1062
+++s Baghdad
+++295
+++s Madrid
+++264
+++s Chennai
+++457
+++s Surat
+++866
+++s Moscow
+++378
+++s Dalian
+++1268
+++s Manila
+++1351
+++s Dallas
+++1354
+++s Paris
+++301
+++s Manila
+++976
+++s Moscow
+++398
+++A Dongguan
+++u Surat
+++852
+++R Barcelona
+++A Osaka
+++u Santiago
+++1367
+++s Dalian
+++468
+++r Baghdad
+++56
+++L
+++a Madrid
+++451 154
+++A Country
+++A Belo Horizonte
+++r Baghdad
+++291
+++a Belo Horizonte
+++1079 103
+++L
+++s Wuhan
+++352
+++r Baghdad
+++1304
+++r Surat
+++146
+++R Baghdad
+++r Baghdad
+++971
+++s Manila
+++989
+++r Surat
+++122
+++u Dallas
+++1344
+++A Jakarta
+++a Surat
+++1137 83
+++u Manila
+++753
+++s Lima
+++865
+++L
+++s Dalian
+++1241
+++r Manila
+++1204
+++u Santiago
+++1186
+++A Dhaka
+++L
+++R Dongguan
+++s Lima
+++862
+++s Moscow
+++387
+++L
+++A London
+++R Madrid
+++a Jakarta
+++261 84
+++a Manila
+++360 171
+diff --git a/test.sh b/test.sh
+index f8ecbf4..1753085 100755
+--- a/test.sh
++++ b/test.sh
+@@ -262,7 +262,7 @@ EOF
+     echo "FAIL"
+     [[ -n $VERBOSE ]] && echo "Your program produced:"
+     [[ -n $VERBOSE ]] && echo "--------------------------"
+-    [[ -n $VERBOSE ]] && echo "$answers"    
++    [[ -n $VERBOSE ]] && echo "$answer"    
+     [[ -n $VERBOSE ]] && echo "--------------------------"
+     [[ -n $VERBOSE ]] && echo "Output should have been:"
+     [[ -n $VERBOSE ]] && echo "--------------------------"
+
 commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
 Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
 Date:   Mon Sep 28 22:04:59 2020 -0400

commit e4c30c89858207ee4c1c341bb4eb2309e8999fb7
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Thu Oct 1 18:48:16 2020 -0400

    editing and debugging

diff --git a/assignment-3.c b/assignment-3.c
index 881c536..6644548 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -311,12 +311,24 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
 
   // Loop through the Array connecting them
   // as a linear doubly linked list
+  if (n == 1) {
+    flight_schedule_reset(&array[0]);
+    array[0].next = NULL;
+    array[0].prev = NULL;
+    flight_schedules_free = &array[0];
+    return;
+  }
+
+  flight_schedule_reset(&array[0]);
+  array[0].next = &array[1];
   array[0].prev = NULL;
-  for (int i=0; i<n-1; i++) {
+
+  for (int i=1; i<n-1; i++) {
     flight_schedule_reset(&array[i]);
     array[i].next = &array[i+1];
-    array[i+1].prev = &array[i];
+    array[i].prev = &array[i-1];
   }
+
   // Takes care of last node.  
   flight_schedule_reset(&array[n-1]); // reset clears all fields
   array[n-1].next = NULL;
@@ -378,23 +390,39 @@ int flight_compare_time(const void *a, const void *b)
 //returns pointer to updated flight schedule
 struct flight_schedule * flight_schedule_allocate(void){
 
-  struct flight_schedule *temp =  flight_schedules_free;
+  struct flight_schedule *temp;// =  flight_schedules_free;
+
+
   flight_schedules_free = flight_schedules_free->next;
+  flight_schedules_free-> prev->next = flight_schedules_active;
+  
+  //temp->next = flight_schedules_active;
+  flight_schedules_active = flight_schedules_free->prev;
   flight_schedules_free->prev = NULL;
-  temp->next = flight_schedules_active;
-
-  flight_schedules_active = temp;
-  flight_schedules_active->next->prev = flight_schedules_active;
+  
   //temp->prev = NULL;
   //struct flight_schedule *temp2 = flight_schedules_active
-  
-  return(flight_schedules_active);
+
+  if(flight_schedules_active -> next != NULL){
+    flight_schedules_active->next->prev = flight_schedules_active;
+  }
+
+  //flight_schedules_active = temp;
+  temp = flight_schedules_active;
+  return(temp); //return temp?
 }
 
 //flight schedule free
 //takes schedule off active list, resets it, then places the node back on free list
 void flight_schedule_free(struct flight_schedule *fs){
-  int counter = 0;
+  flight_schedules_active = flight_schedules_active->next;
+  flight_schedule_reset(fs);
+  fs->next = flight_schedules_free;
+  flight_schedules_free = fs;
+  fs->next->prev = fs;
+
+
+  /*int counter = 0;
   struct flight_schedule *temp = flight_schedules_active;
   while(temp != NULL) {
     if(temp == fs){ //use flight schedule find instead
@@ -403,7 +431,6 @@ void flight_schedule_free(struct flight_schedule *fs){
     temp = temp->next;
     counter++;
   }
-  
   if (counter == 0){
     flight_schedules_active = temp->next;
     flight_schedules_active->prev = NULL;
@@ -417,8 +444,8 @@ void flight_schedule_free(struct flight_schedule *fs){
     //flight_schedule_reset(temp);
 
   }
-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
-    temp->prev->next = temp->next;
+  else{ 
+    temp->prev->next = temp->next;   //actualy this is the else case end case not required
     temp->next->prev = temp->prev;
     temp->next = NULL;
     temp->prev = NULL;
@@ -429,17 +456,8 @@ void flight_schedule_free(struct flight_schedule *fs){
     flight_schedules_free = temp;
     flight_schedules_free->next->prev = flight_schedules_free;
   }
-  else{
-    temp->prev = NULL;
-    flight_schedules_active->prev->next = NULL;
-
-    flight_schedule_reset(temp); //this sets both next and prev of temp to null
-
-    temp->next = flight_schedules_free;
-    flight_schedules_free = temp;
-    flight_schedules_free->next->prev = flight_schedules_free;
-    
-  }
+}
+*/
 }
 
 struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
@@ -457,9 +475,9 @@ struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it s
 void flight_schedule_add(city_t city){ //should this call get city
   struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
   
-  if (flight_schedule_find) {
-    msg_city_exists(city);
-  }
+  //if (flight_schedule_find == city)  {
+  //  msg_city_exists(city);
+ // } //
   strncpy(p->destination, city, MAX_CITY_NAME_LEN);
   
   //p->destination = ch; 
@@ -477,7 +495,7 @@ void flight_schedule_remove(city_t city){
 void flight_schedule_listAll(void){
   struct flight_schedule *temp = flight_schedules_active;
   while(temp != NULL){
-    printf("%p", &temp);
+    printf("%p", temp); // print temp is disaplying memory address
     temp = temp->next;
   }
 
@@ -487,7 +505,7 @@ void flight_schedule_list(city_t city){
   struct flight_schedule *temp = flight_schedules_active;
   while(temp != NULL){
     if (strcmp(city,temp->destination) == 0){
-      printf("%p", &temp);
+      printf("%p", *temp); //displaying memory address
     }
     temp = temp->next;
   }
@@ -500,10 +518,16 @@ void flight_schedule_add_flight(city_t city){
 
   int *t;
   time_get(t); //do this then check if t is 0 to see if valid or not 
-  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
   
-  if (time == 1 || capacity == 1 ){
-      return 1;
+  if(time_get(t) == 0) { //or just t
+     return;
+   }
+
+  int *c;
+  flight_capacity_get(c);  //this also has to be done as above to get appropraite io
+  
+  if (flight_capacity_get(c) == 0){
+      return;
   }
 
   struct flight *flights;
@@ -513,8 +537,8 @@ void flight_schedule_add_flight(city_t city){
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
     if(flights[i].time == -1){
-      flights[i].time = time;//was flights[i] will this change correct one?
-      flights[i].capacity = capacity;
+      flights[i].time = *t;//was flights[i] will this change correct one?
+      flights[i].capacity = *c;
       break;
     }
   }
@@ -527,8 +551,6 @@ void flight_schedule_remove_flight(city_t city){
   struct flight_schedule *temp = flight_schedule_find(city);
  //idk if this is the right time to call or even need too
 
-
-
   int *t;
   time_get(t); //if 1 continue; else tell user
    if(time_get(t) == 0) {
@@ -536,6 +558,9 @@ void flight_schedule_remove_flight(city_t city){
    }
   int *c;
   flight_capacity_get(c); 
+  if(flight_capacity_get(c) == 0){
+
+  }
   
   struct flight *flights;
   flights = temp->flights;
@@ -556,14 +581,18 @@ void flight_schedule_schedule_seat(city_t city) {
 
   struct flight *flights;
   flights = temp->flights;
+  int *t;
+  time_get(t);
+  if(time_get(t) == 0) {
+     return;
+   }
 
-  int time = time_get();
   int nearest = 0;
   int position = 0;
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
-    if(flights[i].time >= time){
-      if(flights[i].time - nearest <= nearest - time){
+    if(flights[i].time >= *t){
+      if(flights[i].time - nearest <= nearest - *t) {  //had time instead of t
         nearest = flights[i].time;
         position = i;
       }
@@ -573,18 +602,21 @@ flights[position].available--;
   
 }
 
-flight_schedule_unschedule_seat(city_t city){
+ void flight_schedule_unschedule_seat(city_t city){
   struct flight_schedule *temp = flight_schedule_find(city);
 
   struct flight *flights;
   flights = temp->flights;
-
-  int time = time_get();
+  int *t;
+  time_get(t);
+  if(time_get(t) == 0) {
+     return;
+   }
   int nearest = 0;
   int position = 0;
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
-    if(flights[i].time == time){
+    if(flights[i].time == *t){ //origrinally was time 
      flights[i].available--;
     }
   }
diff --git a/gitlog.txt b/gitlog.txt
index e69de29..c3e37f7 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -0,0 +1,3895 @@
+commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 22:04:59 2020 -0400
+
+    finshing up scheduling/unscheduling and debuggin
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 322ef6c..881c536 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
+   flight_schedule_add(city);
+   struct flight_schedule *temp = flight_schedule_find(city);
+ 
+-  time_t time = time_get();
+-  int capacity = flight_capacity_get();
++
++  int *t;
++  time_get(t); //do this then check if t is 0 to see if valid or not 
++  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
+   
+   if (time == 1 || capacity == 1 ){
+       return 1;
+@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
+ 
+ 
+ 
+-  time_t time = time_get();
+-  int capacity = flight_capacity_get(); 
++  int *t;
++  time_get(t); //if 1 continue; else tell user
++   if(time_get(t) == 0) {
++     return;
++   }
++  int *c;
++  flight_capacity_get(c); 
+   
+   struct flight *flights;
+   flights = temp->flights;
+ 
+   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+-    if(flights[i].time == time){
++    if(flights[i].time == *t){
+       flights[i].time = -1;//was flights[i] will this change correct one?
+       flights[i].capacity = 0;  
+       flights[i].available = 0;
+
+commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 21:51:04 2020 -0400
+
+    schedule and unschedule seat
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 6db86b9..322ef6c 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
+ 
+ 
+ void flight_schedule_schedule_seat(city_t city) {
++  struct flight_schedule *temp = flight_schedule_find(city);
++
++  struct flight *flights;
++  flights = temp->flights;
++
++  int time = time_get();
++  int nearest = 0;
++  int position = 0;
++
++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++    if(flights[i].time >= time){
++      if(flights[i].time - nearest <= nearest - time){
++        nearest = flights[i].time;
++        position = i;
++      }
++    }
++  }
++flights[position].available--;
+   
+-}
+\ No newline at end of file
++}
++
++flight_schedule_unschedule_seat(city_t city){
++  struct flight_schedule *temp = flight_schedule_find(city);
++
++  struct flight *flights;
++  flights = temp->flights;
++
++  int time = time_get();
++  int nearest = 0;
++  int position = 0;
++
++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++    if(flights[i].time == time){
++     flights[i].available--;
++    }
++  }
++}
++
+
+commit 4490dcc205f2959c8fa299368be096d99f756e27
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 21:23:54 2020 -0400
+
+    continuing work on add and remove flights
+
+diff --git a/assignment-3.c b/assignment-3.c
+index d9c99ff..6db86b9 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
+   flight_schedule_add(city);
+   struct flight_schedule *temp = flight_schedule_find(city);
+ 
+-  int time = time_get();
++  time_t time = time_get();
+   int capacity = flight_capacity_get();
+   
+   if (time == 1 || capacity == 1 ){
+       return 1;
+   }
+ 
+-  temp->flight->flights[];
++  struct flight *flights;
++  flights = temp->flights;
++  //flights[i]
++  //loop thru flights until open flight then add flight
+ 
++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++    if(flights[i].time == -1){
++      flights[i].time = time;//was flights[i] will this change correct one?
++      flights[i].capacity = capacity;
++      break;
++    }
++  }
++  //else return that it failed
++
++
++}
++
++void flight_schedule_remove_flight(city_t city){
++  struct flight_schedule *temp = flight_schedule_find(city);
++ //idk if this is the right time to call or even need too
+ 
+ 
++
++  time_t time = time_get();
++  int capacity = flight_capacity_get(); 
++  
++  struct flight *flights;
++  flights = temp->flights;
++
++  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
++    if(flights[i].time == time){
++      flights[i].time = -1;//was flights[i] will this change correct one?
++      flights[i].capacity = 0;  
++      flights[i].available = 0;
++      break;
++    }
++  }
+ }
++
++
++void flight_schedule_schedule_seat(city_t city) {
++  
++}
+\ No newline at end of file
+
+commit e41186f0b9058ea4390a8f0fda78296861580f31
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 20:05:28 2020 -0400
+
+    updates to add_flight
+
+diff --git a/assignment-3.c b/assignment-3.c
+index aae10c7..d9c99ff 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
+   }
+ }
+ 
+-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
+   struct flight_schedule *temp = flight_schedules_active;
++
+   while(temp != NULL){
+-    if (strcmp(city,temp->destination) == 0){
++    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
+       return(temp);
+     }
+     temp = temp->next;
+@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+ }
+ 
+ 
++void flight_schedule_add(city_t city){ //should this call get city
++  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
++  
++  if (flight_schedule_find) {
++    msg_city_exists(city);
++  }
++  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
++  
++  //p->destination = ch; 
++
++}
++
++
++void flight_schedule_remove(city_t city){
++  struct flight_schedule *temp = flight_schedule_find(city);
++  flight_schedule_free(temp);
++}
++
++
++
++void flight_schedule_listAll(void){
++  struct flight_schedule *temp = flight_schedules_active;
++  while(temp != NULL){
++    printf("%p", &temp);
++    temp = temp->next;
++  }
++
++}
++
++void flight_schedule_list(city_t city){
++  struct flight_schedule *temp = flight_schedules_active;
++  while(temp != NULL){
++    if (strcmp(city,temp->destination) == 0){
++      printf("%p", &temp);
++    }
++    temp = temp->next;
++  }
++}
++
++void flight_schedule_add_flight(city_t city){
++  flight_schedule_add(city);
++  struct flight_schedule *temp = flight_schedule_find(city);
++
++  int time = time_get();
++  int capacity = flight_capacity_get();
++  
++  if (time == 1 || capacity == 1 ){
++      return 1;
++  }
++
++  temp->flight->flights[];
++
++
++
++}
+
+commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 18:35:40 2020 -0400
+
+    correction of free, working on find
+
+diff --git a/assignment-3.c b/assignment-3.c
+index a03a0af..aae10c7 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+   int counter = 0;
+   struct flight_schedule *temp = flight_schedules_active;
+   while(temp != NULL) {
+-    if(temp == fs){
++    if(temp == fs){ //use flight schedule find instead
+       break;
+     }
+     temp = temp->next;
+@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
+     flight_schedule_reset(temp);
+ 
+     temp->next = flight_schedules_free; //this block of code adds temp to front of free
+-    flight_schedule_free = temp;
++    flight_schedules_free = temp;
+     flight_schedules_free->next->prev = flight_schedules_free;
+     //flight_schedule_reset(temp);
+ 
+   }
+-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
+     temp->prev->next = temp->next;
+     temp->next->prev = temp->prev;
+     temp->next = NULL;
+@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
+     flight_schedule_reset(temp);
+ 
+     temp->next = flight_schedules_free;
+-    flight_schedule_free = temp;
++    flight_schedules_free = temp;
+     flight_schedules_free->next->prev = flight_schedules_free;
+   }
+   else{
+@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
+     flight_schedule_reset(temp); //this sets both next and prev of temp to null
+ 
+     temp->next = flight_schedules_free;
+-    flight_schedule_free = temp;
++    flight_schedules_free = temp;
+     flight_schedules_free->next->prev = flight_schedules_free;
+     
+   }
+-}
+\ No newline at end of file
++}
++
++struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
++  struct flight_schedule *temp = flight_schedules_active;
++  while(temp != NULL){
++    if (strcmp(city,temp->destination) == 0){
++      return(temp);
++    }
++    temp = temp->next;
++  }
++}
++
++
+
+commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 15:08:53 2020 -0400
+
+    working on flight_schedule_free
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 1f30cd1..a03a0af 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
+ //flight schedule free
+ //takes schedule off active list, resets it, then places the node back on free list
+ void flight_schedule_free(struct flight_schedule *fs){
+-  struct flight_schedule *temp = flight
++  int counter = 0;
++  struct flight_schedule *temp = flight_schedules_active;
++  while(temp != NULL) {
++    if(temp == fs){
++      break;
++    }
++    temp = temp->next;
++    counter++;
++  }
++  
++  if (counter == 0){
++    flight_schedules_active = temp->next;
++    flight_schedules_active->prev = NULL;
++    temp->next = NULL;
++
++    flight_schedule_reset(temp);
++
++    temp->next = flight_schedules_free; //this block of code adds temp to front of free
++    flight_schedule_free = temp;
++    flight_schedules_free->next->prev = flight_schedules_free;
++    //flight_schedule_reset(temp);
++
++  }
++  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
++    temp->prev->next = temp->next;
++    temp->next->prev = temp->prev;
++    temp->next = NULL;
++    temp->prev = NULL;
++
++    flight_schedule_reset(temp);
++
++    temp->next = flight_schedules_free;
++    flight_schedule_free = temp;
++    flight_schedules_free->next->prev = flight_schedules_free;
++  }
++  else{
++    temp->prev = NULL;
++    flight_schedules_active->prev->next = NULL;
++
++    flight_schedule_reset(temp); //this sets both next and prev of temp to null
++
++    temp->next = flight_schedules_free;
++    flight_schedule_free = temp;
++    flight_schedules_free->next->prev = flight_schedules_free;
++    
++  }
+ }
+\ No newline at end of file
+
+commit 4da1a4230cc78e7821817c597d531316ac1feee4
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Mon Sep 28 14:12:10 2020 -0400
+
+    correcting allocate
+
+diff --git a/assignment-3.c b/assignment-3.c
+index ec71f49..1f30cd1 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
+ //returns pointer to updated flight schedule
+ struct flight_schedule * flight_schedule_allocate(void){
+ 
+-  struct flight_schedule temp = 
++  struct flight_schedule *temp =  flight_schedules_free;
++  flight_schedules_free = flight_schedules_free->next;
++  flight_schedules_free->prev = NULL;
++  temp->next = flight_schedules_active;
++
++  flight_schedules_active = temp;
++  flight_schedules_active->next->prev = flight_schedules_active;
++  //temp->prev = NULL;
++  //struct flight_schedule *temp2 = flight_schedules_active
+   
+-  
+-  
+-  *flight_schedules_active = *flight_schedules_free->free;
+-
+-  
+-  //flight_schedules_active = flight_schedules_free;
+-  *flight_schedules_free = *flight_schedules_free->next;
+-  *flight_schedules_free->prev = NULL;
+-  return(flight_schedules_active->flights[]);
++  return(flight_schedules_active);
+ }
+ 
+ //flight schedule free
+ //takes schedule off active list, resets it, then places the node back on free list
+ void flight_schedule_free(struct flight_schedule *fs){
+-  
++  struct flight_schedule *temp = flight
+ }
+\ No newline at end of file
+
+commit 7c7197814c779e696458438563f16bc76b197fb2
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Sep 25 18:25:04 2020 -0400
+
+    very confused, trying to use pointers to alt sched
+
+diff --git a/assignment-3.c b/assignment-3.c
+index ff89d23..ec71f49 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
+   return (af->time - bf->time);
+ }
+ 
+-WRITE SOME CODE!
++//WRITE SOME CODE!
+ //flight schedule allocate
++//takes a schedule off the free list and places it on the active list
++//returns pointer to updated flight schedule
+ struct flight_schedule * flight_schedule_allocate(void){
+-  *flight_schedules_active = *flight_schedules_free;
+-  *flight_schedules_free = *flight_schedules_free.next;
+-  return(flight_schedule);
+-}
+ 
++  struct flight_schedule temp = 
++  
++  
++  
++  *flight_schedules_active = *flight_schedules_free->free;
+ 
++  
++  //flight_schedules_active = flight_schedules_free;
++  *flight_schedules_free = *flight_schedules_free->next;
++  *flight_schedules_free->prev = NULL;
++  return(flight_schedules_active->flights[]);
++}
+ 
+ //flight schedule free
+-
++//takes schedule off active list, resets it, then places the node back on free list
+ void flight_schedule_free(struct flight_schedule *fs){
+-  *flight_schedule_active = *flight_schedule_free;
+-  *fs = 
++  
+ }
+\ No newline at end of file
+
+commit c499f77919fd84ed08d77fbe2340135c1ac4d968
+Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
+Date:   Fri Sep 25 12:05:56 2020 -0400
+
+    starting work on first 3 helper functions
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 31abde4..ff89d23 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
+ }
+ 
+ WRITE SOME CODE!
++//flight schedule allocate
++struct flight_schedule * flight_schedule_allocate(void){
++  *flight_schedules_active = *flight_schedules_free;
++  *flight_schedules_free = *flight_schedules_free.next;
++  return(flight_schedule);
++}
++
++
++
++//flight schedule free
++
++void flight_schedule_free(struct flight_schedule *fs){
++  *flight_schedule_active = *flight_schedule_free;
++  *fs = 
++}
+\ No newline at end of file
+
+commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
+Author: Jonathan Appavoo <jappavoo@bu.edu>
+Date:   Thu Sep 24 18:32:49 2020 -0400
+
+    An update to assignment-3. Fix to assignment-3.c and new refence binary
+
+diff --git a/assignment-3.c b/assignment-3.c
+index 2f5c360..31abde4 100644
+--- a/assignment-3.c
++++ b/assignment-3.c
+@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+ // Structure to hold all the information for a single flight
+ //   A city's schedule has an array of these
+ struct flight {
+-  int time;       // departure time of the flight
++  time_t time;       // departure time of the flight
+   int available;  // number of seats currently available on the flight
+   int capacity;   // maximum seat capacity of the flight
+ };
+@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
+     array[i+1].prev = &array[i];
+   }
+   // Takes care of last node.  
+-  // Its prev pointer will be set in the loop,
+-  // we just have to set its next to NULL.
++  flight_schedule_reset(&array[n-1]); // reset clears all fields
+   array[n-1].next = NULL;
++  array[n-1].prev = &array[n-2];
+   flight_schedules_free = &array[0];
+ }
+ 
+diff --git a/reference b/reference
+index ee9132a..b11f6c6 100755
+Binary files a/reference and b/reference differ
+
+commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
+Author: Jonathan Appavoo <jappavoo@bu.edu>
+Date:   Mon Sep 21 21:02:39 2020 -0400
+
+    Initial Commit to seed assignment 3. Have fun!
+
+diff --git a/.gitignore b/.gitignore
+new file mode 100644
+index 0000000..8ff04a2
+--- /dev/null
++++ b/.gitignore
+@@ -0,0 +1,4 @@
++*
++!assignment-3.c
++!gitlog.txt
++
+diff --git a/.vscode/launch.json b/.vscode/launch.json
+new file mode 100644
+index 0000000..5f223b9
+--- /dev/null
++++ b/.vscode/launch.json
+@@ -0,0 +1,30 @@
++{
++    // Use IntelliSense to learn about possible attributes.
++    // Hover to view descriptions of existing attributes.
++    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
++    "version": "0.2.0",
++    "configurations": [
++    
++
++        {
++            "name": "(gdb) Launch",
++            "type": "cppdbg",
++            "request": "launch",
++            "program": "${workspaceFolder}/assignment-3",
++            "args": [],
++            "stopAtEntry": true,
++            "cwd": "${workspaceFolder}",
++            "environment": [],
++            "externalConsole": false,
++            "MIMode": "gdb",
++            "setupCommands": [
++                {
++                    "description": "Enable pretty-printing for gdb",
++                    "text": "-enable-pretty-printing",
++                    "ignoreFailures": true
++                }
++            ],
++            "preLaunchTask": "Build"
++        }
++    ]
++}
+diff --git a/.vscode/settings.json b/.vscode/settings.json
+new file mode 100644
+index 0000000..495436f
+--- /dev/null
++++ b/.vscode/settings.json
+@@ -0,0 +1,21 @@
++{
++    "git.ignoreLegacyWarning": true,
++    "files.autoSave": "afterDelay",
++    "files.exclude": {
++        ".vscode": true,
++        "**/*.o": true,
++        "reference": true,
++        "assignment-3": true,
++        "test.sh":true,
++        "gitlog.txt":true,
++        ".gitignore":true
++    },
++    "editor.renderControlCharacters": true,
++    "C_Cpp.default.cStandard": "c99",
++    "C_Cpp.default.cppStandard": "gnu++11",
++    "C_Cpp.default.defines": [],
++    "C_Cpp.intelliSenseEngine": "Disabled",
++    "C_Cpp.workspaceParsingPriority": "low",
++    "C_Cpp.intelliSenseCacheSize": 100,
++    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
++}
+diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+new file mode 100644
+index 0000000..d02618f
+--- /dev/null
++++ b/.vscode/tasks.json
+@@ -0,0 +1,28 @@
++{
++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++    // for the documentation about the tasks.json format
++    "version": "2.0.0",
++    "tasks": [
++        {
++            "label": "Build",
++            "type": "shell",
++            "command": "make",
++            "options": {
++                "cwd": "${workspaceFolder}"
++            },
++            "group": {
++                "kind": "build",
++                "isDefault": true
++            },
++            "presentation": {
++                "reveal": "always",
++                "panel": "shared"
++            },
++            "problemMatcher": {
++                "base": "$gcc",
++                "fileLocation": ["relative", "${workspaceRoot}/"]
++            }
++        }
++        
++    ]
++}
+diff --git a/Makefile b/Makefile
+new file mode 100644
+index 0000000..1c3a3d1
+--- /dev/null
++++ b/Makefile
+@@ -0,0 +1,69 @@
++.PHONY: all clean test gitlog
++
++all: assignment-3
++
++assignment-3: assignment-3.c
++	${CC} -std=c99 -g assignment-3.c -o assignment-3
++
++test: assignment-3 gitlog
++	./test.sh
++
++test1: assignment-3
++	./test.sh 1
++
++test2: assignment-3
++	./test.sh 2
++
++test3: assignment-3
++	./test.sh 3
++
++test4: assignment-3
++	./test.sh 4
++
++test5: assignment-3
++	./test.sh 5
++
++test6: assignment-3
++	./test.sh 6
++
++test7: assignment-3
++	./test.sh 7
++
++test8: assignment-3
++	./test.sh 8
++
++test9: assignment-3
++	./test.sh 9
++
++test10: assignment-3
++	./test.sh 10
++
++test11: assignment-3
++	./test.sh 11
++
++test12: assignment-3
++	./test.sh 12
++
++test13: assignment-3
++	./test.sh 13
++
++test14: assignment-3
++	./test.sh 14
++
++test15: assignment-3
++	./test.sh 15
++
++test16: assignment-3
++	./test.sh 16
++
++bonus1: assignment-3
++	./test.sh 1 bonus
++
++bonus2: assignment-3
++	./test.sh 2 bonus
++
++gitlog:
++	git log -p > gitlog.txt
++
++clean:
++	-${RM} assignment-3
+diff --git a/assignment-3.c b/assignment-3.c
+new file mode 100644
+index 0000000..2f5c360
+--- /dev/null
++++ b/assignment-3.c
+@@ -0,0 +1,375 @@
++/**
++ * Assignment #3: Strings, structs, pointers, command-line arguments.
++ *  Let's use our knowledge to write a simple flight management system!
++ **/
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++#include <stdbool.h>
++#include <assert.h>
++
++// Limit constants
++#define MAX_CITY_NAME_LEN 20
++#define MAX_FLIGHTS_PER_CITY 5
++#define MAX_DEFAULT_SCHEDULES 50
++
++// Time definitions
++#define TIME_MIN 0
++#define TIME_MAX ((60 * 24)-1)
++#define TIME_NULL -1
++
++
++/******************************************************************************
++ * Structure and Type definitions                                             *
++ ******************************************************************************/
++typedef int time_t;                        // integers used for time values
++typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
++ 
++// Structure to hold all the information for a single flight
++//   A city's schedule has an array of these
++struct flight {
++  int time;       // departure time of the flight
++  int available;  // number of seats currently available on the flight
++  int capacity;   // maximum seat capacity of the flight
++};
++
++// Structure for an individual flight schedule
++// The main data structure of the program is an Array of these structures
++// Each structure will be placed on one of two linked lists:
++//                free or active
++// Initially the active list will be empty and all the schedules
++// will be on the free list.  Adding a schedule is finding the first
++// free schedule on the free list, removing it from the free list,
++// setting its destination city and putting it on the active list
++struct flight_schedule {
++  city_t destination;                          // destination city name
++  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
++  struct flight_schedule *next;                // link list next pointer
++  struct flight_schedule *prev;                // link list prev pointer
++};
++
++/******************************************************************************
++ * Global / External variables                                                *
++ ******************************************************************************/
++// This program uses two global linked lists of Schedules.  See comments
++// of struct flight_schedule above for details
++struct flight_schedule *flight_schedules_free = NULL;
++struct flight_schedule *flight_schedules_active = NULL;
++
++
++/******************************************************************************
++ * Function Prototypes                                                        *
++ ******************************************************************************/
++// Misc utility io functions
++int city_read(city_t city);           
++bool time_get(time_t *time_ptr);      
++bool flight_capacity_get(int *capacity_ptr);
++void print_command_help(void);
++
++// Core functions of the program
++void flight_schedule_initialize(struct flight_schedule array[], int n);
++struct flight_schedule * flight_schedule_find(city_t city);
++struct flight_schedule * flight_schedule_allocate(void);
++void flight_schedule_free(struct flight_schedule *fs);
++void flight_schedule_add(city_t city);
++void flight_schedule_listAll(void);
++void flight_schedule_list(city_t city);
++void flight_schedule_add_flight(city_t city);
++void flight_schedule_remove_flight(city_t city);
++void flight_schedule_schedule_seat(city_t city);
++void flight_schedule_unschedule_seat(city_t city);
++void flight_schedule_remove(city_t city);
++
++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
++int  flight_compare_time(const void *a, const void *b);
++
++
++int main(int argc, char *argv[]) 
++{
++  long n = MAX_DEFAULT_SCHEDULES;
++  char command;
++  city_t city;
++
++  if (argc > 1) {
++    // If the program was passed an argument then try and convert the first
++    // argument in the a number that will override the default max number
++    // of schedule we will support
++    char *end;
++    n = strtol(argv[1], &end, 10); // CPAMA p 787
++    if (n==0) {
++      printf("ERROR: Bad number of default max scedules specified.\n");
++      exit(EXIT_FAILURE);
++    }
++  }
++
++  // C99 lets us allocate an array of a fixed length as a local 
++  // variable.  Since we are doing this in main and a call to main will be 
++  // active for the entire time of the program's execution this
++  // array will be alive for the entire time -- its memory and values
++  // will be stable for the entire program execution.
++  struct flight_schedule flight_schedules[n];
++ 
++  // Initialize our global lists of free and active schedules using
++  // the elements of the flight_schedules array
++  flight_schedule_initialize(flight_schedules, n);
++
++  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
++  //  When possible, if we know that some particular thing should have happened
++  //  we think of that as an assertion and write code to test them.
++  // Use the assert function (CPAMA p749) to be sure the initilization has set
++  // the free list to a non-null value and the the active list is a null value.
++  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
++
++  // Print the instruction in the beginning
++  print_command_help();
++
++  // Command processing loop
++  while (scanf(" %c", &command) == 1) {
++    switch (command) {
++    case 'A': 
++      //  Add an active flight schedule for a new city eg "A Toronto\n"
++      city_read(city);
++      flight_schedule_add(city);
++
++      break;
++    case 'L':
++      // List all active flight schedules eg. "L\n"
++      flight_schedule_listAll();
++      break;
++    case 'l': 
++      // List the flights for a particular city eg. "l\n"
++      city_read(city);
++      flight_schedule_list(city);
++      break;
++    case 'a':
++      // Adds a flight for a particular city "a Toronto\n
++      //                                      360 100\n"
++      city_read(city);
++      flight_schedule_add_flight(city);
++      break;
++    case 'r':
++      // Remove a flight for a particular city "r Toronto\n
++      //                                        360\n"
++      city_read(city);
++      flight_schedule_remove_flight(city);
++	break;
++    case 's':
++      // schedule a seat on a flight for a particular city "s Toronto\n
++      //                                                    300\n"
++      city_read(city);
++      flight_schedule_schedule_seat(city);
++      break;
++    case 'u':
++      // unschedule a seat on a flight for a particular city "u Toronto\n
++      //                                                      360\n"
++        city_read(city);
++        flight_schedule_unschedule_seat(city);
++        break;
++    case 'R':
++      // remove the schedule for a particular city "R Toronto\n"
++      city_read(city);
++      flight_schedule_remove(city);  
++      break;
++    case 'h':
++        print_command_help();
++        break;
++    case 'q':
++      goto done;
++    default:
++      printf("Bad command. Use h to see help.\n");
++    }
++  }
++ done:
++  return EXIT_SUCCESS;
++}
++
++/**********************************************************************
++ * city_read: Takes in and processes a given city following a command *
++ *********************************************************************/
++int city_read(city_t city) {
++  int ch, i=0;
++
++  // skip leading non letter characters
++  while (true) {
++    ch = getchar();
++    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
++      city[i++] = ch;
++      break;
++    }
++  }
++  while ((ch = getchar()) != '\n') {
++    if (i < MAX_CITY_NAME_LEN) {
++      city[i++] = ch;
++    }
++  }
++  city[i] = '\0';
++  return i;
++}
++
++
++/****************************************************************
++ * Message functions so that your messages match what we expect *
++ ****************************************************************/
++void msg_city_bad(char *city) {
++  printf("No schedule for %s\n", city);
++}
++
++void msg_city_exists(char *city) {
++  printf("There is a schedule of %s already.\n", city);
++}
++
++void msg_schedule_no_free(void) {
++  printf("Sorry no more free schedules.\n");
++}
++
++void msg_city_flights(char *city) {
++  printf("The flights for %s are:", city);
++}
++
++void msg_flight_info(int time, int avail, int capacity) {
++  printf(" (%d, %d, %d)", time, avail, capacity);
++}
++
++void msg_city_max_flights_reached(char *city) {
++  printf("Sorry we cannot add more flights on this city.\n");
++}
++
++void msg_flight_bad_time(void) {
++  printf("Sorry there's no flight scheduled on this time.\n");
++}
++
++void msg_flight_no_seats(void) {
++    printf("Sorry there's no more seats available!\n");
++}
++
++void msg_flight_all_seats_empty(void) {
++  printf("All the seats on this flights are empty!\n");
++}
++
++void msg_time_bad() {
++  printf("Invalid time value\n");
++}
++
++void msg_capacity_bad() {
++  printf("Invalid capacity value\n");
++}
++
++void print_command_help()
++{
++  printf("Here are the possible commands:\n"
++	 "A <city name>     - Add an active empty flight schedule for\n"
++	 "                    <city name>\n"
++	 "L                 - List cities which have an active schedule\n"
++	 "l <city name>     - List the flights for <city name>\n"
++	 "a <city name>\n"
++         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
++	 "                    with <capacity> seats\n"  
++	 "r <city name>\n"
++         "<time>            - Remove a flight form <city name> whose time is\n"
++	 "                    <time>\n"
++	 "s <city name>\n"
++	 "<time>            - Attempt to schedule seat on flight to \n"
++	 "                    <city name> at <time> or next closest time on\n"
++	 "                    which their is an available seat\n"
++	 "u <city name>\n"
++	 "<time>            - unschedule a seat from flight to <city name>\n"
++	 "                    at <time>\n"
++	 "R <city name>     - Remove schedule for <city name>\n"
++	 "h                 - print this help message\n"
++	 "q                 - quit\n"
++);
++}
++
++
++/****************************************************************
++ * Resets a flight schedule                                     *
++ ****************************************************************/
++void flight_schedule_reset(struct flight_schedule *fs) {
++    fs->destination[0] = 0;
++    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
++      fs->flights[i].time = TIME_NULL;
++      fs->flights[i].available = 0;
++      fs->flights[i].capacity = 0;
++    }
++    fs->next = NULL;
++    fs->prev = NULL;
++}
++
++/******************************************************************
++* Initializes the flight_schedule array that will hold any flight *
++* schedules created by the user. This is called in main for you.  *
++ *****************************************************************/
++
++void flight_schedule_initialize(struct flight_schedule array[], int n)
++{
++  flight_schedules_active = NULL;
++  flight_schedules_free = NULL;
++
++  // takes care of empty array case
++  if (n==0) return;
++
++  // Loop through the Array connecting them
++  // as a linear doubly linked list
++  array[0].prev = NULL;
++  for (int i=0; i<n-1; i++) {
++    flight_schedule_reset(&array[i]);
++    array[i].next = &array[i+1];
++    array[i+1].prev = &array[i];
++  }
++  // Takes care of last node.  
++  // Its prev pointer will be set in the loop,
++  // we just have to set its next to NULL.
++  array[n-1].next = NULL;
++  flight_schedules_free = &array[0];
++}
++
++/***********************************************************
++ * time_get: read a time from the user
++   Time in this program is a minute number 0-((24*60)-1)=1439
++   -1 is used to indicate the NULL empty time 
++   This function should read in a time value and check its 
++   validity.  If it is not valid eg. not -1 or not 0-1439
++   It should print "Invalid Time" and return false.
++   othewise it should return the value in the integer pointed
++   to by time_ptr.
++ ***********************************************************/
++bool time_get(int *time_ptr) {
++  if (scanf("%d", time_ptr)==1) {
++    return (TIME_NULL == *time_ptr || 
++	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
++  } 
++  msg_time_bad();
++  return false;
++}
++
++/***********************************************************
++ * flight_capacity_get: read the capacity of a flight from the user
++   This function should read in a capacity value and check its 
++   validity.  If it is not greater than 0, it should print 
++   "Invalid capacity value" and return false. Othewise it should 
++   return the value in the integer pointed to by cap_ptr.
++ ***********************************************************/
++bool flight_capacity_get(int *cap_ptr) {
++  if (scanf("%d", cap_ptr)==1) {
++    return *cap_ptr > 0;
++  }
++  msg_capacity_bad();
++  return false;
++}
++
++void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
++{
++  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
++	flight_compare_time);
++}
++
++int flight_compare_time(const void *a, const void *b) 
++{
++  const struct flight *af = a;
++  const struct flight *bf = b;
++  
++  return (af->time - bf->time);
++}
++
++WRITE SOME CODE!
+diff --git a/gitlog.txt b/gitlog.txt
+new file mode 100644
+index 0000000..e69de29
+diff --git a/reference b/reference
+new file mode 100755
+index 0000000..ee9132a
+Binary files /dev/null and b/reference differ
+diff --git a/test.sh b/test.sh
+new file mode 100755
+index 0000000..f8ecbf4
+--- /dev/null
++++ b/test.sh
+@@ -0,0 +1,328 @@
++#!/bin/bash
++#set -x
++
++REFERENCE=./reference
++PGM=./assignment-3
++
++# To add a test you can add an element the REQUIRED arrays 
++# or BONUS Arrays
++# Each test can have a descripttion, input and optionally a num
++# num is passed as the argument on the command line to set
++# the default max schedule size
++
++# Required tests
++REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
++REQUIRED_INPUT[0]="L
++A Toronto
++L"
++
++REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
++REQUIRED_INPUT[1]="L
++A Toronto
++l Toronto
++a Toronto
++1000 5
++l Toronto"
++
++REQUIRED_NUM[2]="2"
++REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
++REQUIRED_INPUT[2]="L
++A City1
++A City2
++L
++A City3
++L"
++
++REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
++REQUIRED_INPUT[3]="A Naples
++A Addis Ababa
++L
++R Naples
++L"
++
++REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
++REQUIRED_INPUT[4]="A San Jose
++a San Jose
++360 100
++l San Jose
++r San Jose
++360
++l San Jose"
++
++REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
++REQUIRED_INPUT[5]="A Hanoi
++r Hanoi
++100"
++
++REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
++REQUIRED_INPUT[6]="A Cartagena
++a Cartagena
++720 100
++a Cartagena
++840 120
++s Cartagena
++480
++l Cartagena"
++
++REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
++REQUIRED_INPUT[7]="L
++A Abu Dhabi
++a Abu Dhabi
++360 50
++a Abu Dhabi
++840 100
++s Abu Dhabi
++700
++l Abu Dhabi
++u Abu Dhabi
++840
++l Abu Dhabi"
++
++REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
++REQUIRED_INPUT[8]="L
++A Belgrade
++a Belgrade
++400 1
++s Belgrade
++400
++l Belgrade
++s Belgrade
++400
++l Belgrade"
++
++REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
++REQUIRED_INPUT[9]="L
++A Kyoto
++a Kyoto
++300 5
++l Kyoto
++u Kyoto
++300
++l Kyoto"
++
++REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
++REQUIRED_INPUT[10]="L
++A Mumbai
++a Mumbai
++900 3
++l Mumbai
++u Mumbai
++300
++l Mumbai"
++
++REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
++REQUIRED_INPUT[11]="L
++A Prague
++a Prague
++360 5
++a Prague
++720 100
++l Prague
++s Prague
++900
++l Prague"
++
++REQUIRED_NUM[12]="2"
++REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
++REQUIRED_INPUT[12]="L
++A City1
++L
++A City2
++L
++A City3
++L
++R City1
++L
++R City2
++L
++R City3
++L
++A City1
++L"
++
++REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
++REQUIRED_INPUT[13]="L
++A City1
++a City1
++60 5
++l City1
++a City1
++120 5
++l City1
++a City1
++180 5
++l City1
++a City1
++240 5
++l City1
++a City1
++300 5
++l City1
++a City1
++360 5
++l City1
++r City1
++360
++l City1
++r City1
++300
++l City1
++r City1
++240
++l City1
++r City1
++180
++l City1
++r City1
++120
++l City1
++r City1
++60
++l City1
++a City1
++60 5
++l City1"
++
++REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
++REQUIRED_INPUT[14]="L
++A City1
++a City1
++60 3
++l City1
++s City1
++60
++l City1
++s City1
++60
++l City1
++s City1
++60
++l City1
++s City1
++60
++l City1
++u City1
++60
++l City1
++u City1
++60
++l City1
++u City1
++60
++l City1
++u City1
++60
++l City1"
++
++REQUIRED_DESC[15]="Required 16: A bigger test "
++REQUIRED_INPUT[15]="$(cat testSmall.txt)"
++REQUIRED_VALUE[15]=5
++
++
++# Bonus tests
++BONUS_DESC[0]="Bonus 1: Medium sized test"
++BONUS_INPUT[0]="$(cat testMedium.txt)"
++BONUS_VALUE[0]=3
++
++BONUS_DESC[1]="Bonus 2: Large sized test"
++BONUS_INPUT[1]="$(cat testBig.txt)"
++BONUS_VALUE[1]=5
++
++
++function run_test()
++{
++   description="$1"
++   input="$2"
++   num="$3"
++
++   echo -n "$description : "
++   [[ -n $VERBOSE ]] &&  echo "Input:"
++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++   [[ -n $VERBOSE ]] &&  echo "$input"
++   [[ -n $VERBOSE ]] &&  echo "--------------------------"
++
++   solution=$($REFERENCE $num <<EOF
++$input
++EOF
++)
++
++   answer=$($PGM $num<<EOF
++$input
++EOF
++)
++
++  if [[ -n $DEBUG ]]; then
++      echo "$solution"
++  else
++    if [[ "$answer" == "$solution" ]]; then
++       echo "PASS"
++       return 0
++    fi
++    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
++    echo "FAIL"
++    [[ -n $VERBOSE ]] && echo "Your program produced:"
++    [[ -n $VERBOSE ]] && echo "--------------------------"
++    [[ -n $VERBOSE ]] && echo "$answers"    
++    [[ -n $VERBOSE ]] && echo "--------------------------"
++    [[ -n $VERBOSE ]] && echo "Output should have been:"
++    [[ -n $VERBOSE ]] && echo "--------------------------"
++    [[ -n $VERBOSE ]] && echo "$solution"
++    [[ -n $VERBOSE ]] && echo "--------------------------"
++    [[ -n $VERBOSE ]] && echo ""
++  fi
++  return 1
++}
++
++testnum=$1
++type=$2
++
++total=0
++correct=0
++
++if [[ -z $testnum ]]; then
++    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
++	value="${REQUIRED_VALUE[$i]}"
++	[[ -z $value ]] && value=1
++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++	    (( correct += $value ))
++	fi
++	(( total += value ))
++    done
++    
++    
++    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
++	value="${BONUS_VALUE[$i]}"
++	[[ -z $value ]] && value=1
++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++	    (( correct += $value ))
++	fi
++    done
++else
++    VERBOSE=1
++    (( i=$testnum - 1 ))
++    if [[ -z "$type" ]]; then
++	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
++	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
++	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
++	    exit -1
++	fi
++	value="${REQUIRED_VALUE[$i]}"
++	[[ -z $value ]] && value=1
++	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
++	    (( correct += $value ))
++	fi
++	(( total += value ))
++    else
++	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
++	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
++	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
++	    exit -1
++	fi	
++	value="${BONUS_VALUE[$i]}"
++	[[ -z $value ]] && value=1
++	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
++         (( correct += $value ))
++	fi
++    fi
++fi
++echo "score: ${correct}/${total}"
+diff --git a/testBig.txt b/testBig.txt
+new file mode 100644
+index 0000000..90170d5
+--- /dev/null
++++ b/testBig.txt
+@@ -0,0 +1,1251 @@
++L
++A Qingdao
++A Paris
++A Lima
++A Los Angeles
++A Khartoum
++A Barcelona
++A Santiago
++A Tokyo
++A Delhi
++A Guangzhou
++A Johannesburg
++A Paris
++A Dhaka
++A Chennai
++A Jinan
++A Luanda
++A Surat
++A Hyderabad
++A Beijing
++A Atlanta
++A Chennai
++A Dar es Salaam
++A Osaka
++A Hong Kong
++A Toronto
++A Saint Petersburg
++A Manila
++A Washington, D.C.
++A Tehran
++A Miami
++A Khartoum
++A Seoul
++A Dar es Salaam
++A Sao Paulo
++A Baghdad
++A Guadalajara
++A Ahmedabad
++A Moscow
++A Philadelphia
++A Fukuoka
++a Tokyo
++1414 113
++a Guadalajara
++385 170
++a Qingdao
++782 37
++a Ahmedabad
++1411 50
++a Los Angeles
++517 84
++a Tehran
++86 61
++a Osaka
++1289 162
++a Barcelona
++1261 158
++a Fukuoka
++550 191
++a Seoul
++207 1
++a Manila
++364 96
++a Khartoum
++56 194
++a Tokyo
++98 1
++a Saint Petersburg
++1330 107
++a Baghdad
++15 15
++a Chennai
++1169 127
++a Beijing
++807 97
++a Seoul
++1134 34
++a Jinan
++220 102
++a Dhaka
++122 101
++a Luanda
++1342 71
++a Guadalajara
++195 35
++a Fukuoka
++28 37
++a Beijing
++678 83
++a Khartoum
++947 39
++a Hyderabad
++490 104
++a Sao Paulo
++62 83
++a Baghdad
++1319 24
++a Delhi
++718 115
++a Baghdad
++204 114
++a Surat
++430 74
++a Miami
++918 87
++a Surat
++455 95
++a Fukuoka
++1077 131
++a Luanda
++311 21
++a Seoul
++1132 155
++a Lima
++432 177
++a Surat
++494 102
++a Washington, D.C.
++667 12
++a Hong Kong
++200 55
++a Los Angeles
++1195 4
++a Ahmedabad
++610 161
++a Delhi
++508 110
++a Atlanta
++17 21
++a Washington, D.C.
++162 23
++a Luanda
++1216 15
++a Tokyo
++1095 117
++a Philadelphia
++1436 117
++a Atlanta
++277 164
++a Manila
++720 147
++a Tokyo
++1017 25
++a Jinan
++76 66
++a Toronto
++844 84
++a Santiago
++7 115
++a Surat
++388 55
++a Tehran
++836 174
++a Paris
++371 110
++a Sao Paulo
++516 113
++a Luanda
++1041 174
++a Dhaka
++1076 34
++a Guadalajara
++162 144
++a Los Angeles
++424 33
++a Philadelphia
++565 167
++a Luanda
++1411 44
++a Osaka
++1005 82
++a Fukuoka
++1253 194
++a Atlanta
++141 102
++a Fukuoka
++1119 112
++a Toronto
++782 150
++a Dhaka
++1006 96
++a Miami
++961 126
++a Lima
++360 41
++a Lima
++14 50
++a Dhaka
++1028 191
++a Philadelphia
++502 115
++a Washington, D.C.
++1380 59
++a Atlanta
++548 113
++a Fukuoka
++694 183
++a Saint Petersburg
++261 26
++a Jinan
++196 53
++a Delhi
++315 78
++a Delhi
++625 92
++a Ahmedabad
++105 98
++a Philadelphia
++111 15
++a Atlanta
++321 31
++a Ahmedabad
++1244 59
++a Osaka
++799 173
++a Khartoum
++302 7
++a Luanda
++823 190
++a Chennai
++754 139
++a Los Angeles
++1028 78
++a Miami
++1123 183
++a Dar es Salaam
++1353 102
++a Beijing
++473 88
++a Paris
++698 95
++a Barcelona
++545 170
++a Chennai
++382 85
++a Miami
++821 114
++a Luanda
++584 161
++a Fukuoka
++38 26
++a Jinan
++536 148
++a Manila
++1403 133
++a Washington, D.C.
++917 130
++a Sao Paulo
++1169 81
++a Santiago
++689 42
++a Ahmedabad
++279 30
++a Los Angeles
++881 35
++a Jinan
++1293 148
++a Guangzhou
++1366 38
++a Santiago
++317 123
++a Tokyo
++454 104
++a Atlanta
++626 177
++a Surat
++69 135
++a Luanda
++1426 19
++a Barcelona
++879 46
++a Los Angeles
++1329 90
++a Beijing
++402 60
++a Lima
++727 161
++a Hyderabad
++601 186
++a Khartoum
++294 183
++a Hyderabad
++267 131
++a Manila
++771 102
++a Osaka
++103 68
++a Atlanta
++848 147
++a Atlanta
++811 179
++a Toronto
++402 131
++a Guadalajara
++804 28
++a Qingdao
++16 114
++a Beijing
++1218 14
++a Moscow
++498 195
++a Surat
++528 48
++a Manila
++865 4
++a Guangzhou
++328 24
++a Dhaka
++227 50
++a Manila
++124 91
++a Philadelphia
++218 104
++a Dar es Salaam
++209 34
++a Chennai
++641 179
++a Barcelona
++1433 171
++a Lima
++957 60
++a Dhaka
++1292 111
++a Qingdao
++647 40
++a Khartoum
++417 3
++a Tehran
++751 180
++a Barcelona
++778 118
++a Luanda
++204 59
++a Ahmedabad
++541 34
++a Ahmedabad
++539 33
++a Los Angeles
++824 193
++a Tehran
++1412 39
++s Luanda
++1418
++s Toronto
++857
++s Lima
++22
++s Tehran
++100
++s Washington
++175
++s Dhaka
++132
++s Jinan
++90
++s Beijing
++812
++s Barcelona
++1268
++s Dhaka
++228
++s Dhaka
++229
++s Osaka
++1295
++s Los Angeles
++527
++s Ahmedabad
++620
++s Tokyo
++461
++s Luanda
++588
++s Tehran
++1420
++s Jinan
++228
++s Hyderabad
++497
++s Manila
++879
++s Delhi
++720
++s Surat
++442
++s Lima
++21
++s Delhi
++630
++s Tehran
++836
++s Dhaka
++1042
++s Atlanta
++558
++s Khartoum
++300
++s Luanda
++1050
++s Lima
++445
++s Hong Kong
++213
++s Delhi
++318
++s Manila
++725
++s Dhaka
++1300
++s Tokyo
++1028
++s Lima
++23
++s Qingdao
++24
++s Ahmedabad
++542
++s Barcelona
++1274
++s Santiago
++7
++s Surat
++467
++s Chennai
++392
++s Fukuoka
++551
++s Fukuoka
++704
++s Fukuoka
++34
++s Fukuoka
++1131
++s Ahmedabad
++541
++s Philadelphia
++566
++s Surat
++506
++s Khartoum
++952
++s Guadalajara
++389
++s Tokyo
++1031
++s Baghdad
++24
++s Khartoum
++307
++s Lima
++370
++s Atlanta
++812
++s Sao Paulo
++1176
++s Manila
++1411
++s Khartoum
++294
++s Seoul
++1148
++s Guadalajara
++814
++s Khartoum
++314
++s Manila
++1410
++s Khartoum
++302
++s Philadelphia
++230
++s Lima
++728
++s Ahmedabad
++548
++s Fukuoka
++1121
++s Baghdad
++206
++s Ahmedabad
++1424
++s Santiago
++11
++s Lima
++364
++s Manila
++128
++s Tokyo
++460
++s Surat
++469
++s Barcelona
++1274
++s Guadalajara
++816
++s Guadalajara
++811
++s Luanda
++597
++s Atlanta
++852
++s Guadalajara
++811
++s Manila
++1409
++s Miami
++918
++s Luanda
++593
++s Barcelona
++1440
++s Dhaka
++132
++s Lima
++363
++s Ahmedabad
++1251
++s Los Angeles
++521
++s Fukuoka
++38
++s Beijing
++686
++s Fukuoka
++1126
++s Guadalajara
++196
++s Baghdad
++206
++s Los Angeles
++522
++s Ahmedabad
++553
++s Ahmedabad
++1416
++s Philadelphia
++113
++s Dar es Salaam
++217
++s Lima
++958
++s Tehran
++752
++s Washington
++680
++s Tehran
++756
++s Khartoum
++299
++s Dhaka
++1084
++s Manila
++878
++s Ahmedabad
++541
++s Ahmedabad
++119
++s Ahmedabad
++616
++s Tehran
++756
++s Tehran
++765
++s Philadelphia
++569
++s Ahmedabad
++283
++s Washington
++1387
++s Saint Petersburg
++274
++s Dhaka
++1037
++s Philadelphia
++506
++s Luanda
++593
++s Philadelphia
++232
++s Dhaka
++233
++s Baghdad
++1329
++s Chennai
++768
++s Barcelona
++546
++s Sao Paulo
++529
++s Jinan
++543
++s Philadelphia
++121
++s Tehran
++759
++s Lima
++964
++s Miami
++923
++s Los Angeles
++1195
++s Jinan
++200
++s Jinan
++224
++s Beijing
++1220
++s Lima
++368
++s Philadelphia
++1436
++s Tehran
++95
++s Miami
++928
++s Baghdad
++1326
++s Beijing
++483
++s Qingdao
++647
++s Fukuoka
++42
++s Los Angeles
++1033
++s Los Angeles
++836
++s Osaka
++1010
++s Manila
++865
++s Miami
++825
++s Barcelona
++553
++s Tehran
++757
++s Jinan
++88
++s Luanda
++1355
++s Saint Petersburg
++266
++s Surat
++459
++s Philadelphia
++576
++s Philadelphia
++1441
++s Paris
++709
++s Manila
++734
++s Toronto
++785
++s Manila
++135
++s Lima
++368
++s Lima
++967
++s Delhi
++731
++s Beijing
++403
++s Santiago
++692
++s Tehran
++1416
++s Dar es Salaam
++1358
++s Seoul
++1134
++s Philadelphia
++579
++s Guangzhou
++342
++s Osaka
++116
++s Guadalajara
++397
++s Dhaka
++1040
++s Toronto
++793
++s Qingdao
++25
++s Baghdad
++1332
++s Osaka
++1017
++s Los Angeles
++1338
++s Ahmedabad
++551
++s Guangzhou
++331
++s Tehran
++1420
++s Dar es Salaam
++215
++s Tokyo
++462
++s Atlanta
++859
++s Fukuoka
++554
++s Ahmedabad
++1423
++s Jinan
++229
++s Dhaka
++1294
++s Ahmedabad
++1250
++s Ahmedabad
++621
++s Delhi
++626
++s Manila
++129
++s Luanda
++204
++s Surat
++440
++s Atlanta
++22
++s Ahmedabad
++1251
++s Khartoum
++302
++s Surat
++73
++s Guadalajara
++209
++s Manila
++721
++s Toronto
++793
++s Dar es Salaam
++216
++s Manila
++785
++s Ahmedabad
++116
++s Barcelona
++548
++s Dhaka
++1041
++s Khartoum
++305
++s Los Angeles
++1208
++s Dhaka
++1079
++s Tokyo
++1422
++s Manila
++722
++s Osaka
++1298
++s Surat
++431
++s Khartoum
++294
++s Barcelona
++1445
++s Luanda
++589
++s Chennai
++645
++s Luanda
++835
++s Manila
++773
++s Fukuoka
++1256
++s Dhaka
++1300
++s Philadelphia
++230
++s Philadelphia
++571
++s Hong Kong
++209
++s Khartoum
++419
++s Paris
++706
++s Sao Paulo
++516
++s Tehran
++843
++s Khartoum
++429
++s Khartoum
++66
++s Guadalajara
++815
++s Khartoum
++63
++s Guadalajara
++397
++s Baghdad
++218
++s Saint Petersburg
++274
++s Dar es Salaam
++1359
++s Lima
++439
++s Khartoum
++312
++s Luanda
++1345
++s Seoul
++220
++s Tokyo
++1020
++s Atlanta
++25
++s Sao Paulo
++1179
++s Manila
++732
++s Philadelphia
++122
++s Manila
++723
++s Baghdad
++205
++s Osaka
++1018
++s Tehran
++762
++s Luanda
++1412
++s Toronto
++845
++s Qingdao
++24
++s Surat
++528
++s Chennai
++385
++s Ahmedabad
++542
++s Philadelphia
++1447
++s Lima
++733
++s Guadalajara
++205
++s Delhi
++326
++s Chennai
++754
++s Atlanta
++823
++s Manila
++377
++s Khartoum
++303
++s Delhi
++512
++s Surat
++498
++s Guadalajara
++165
++s Manila
++720
++s Washington
++170
++s Hyderabad
++280
++s Lima
++370
++s Tokyo
++98
++s Toronto
++854
++s Ahmedabad
++618
++s Toronto
++858
++s Tehran
++1421
++s Qingdao
++783
++s Barcelona
++784
++s Santiago
++690
++s Fukuoka
++1082
++s Jinan
++232
++s Chennai
++385
++s Paris
++710
++s Tokyo
++1427
++s Chennai
++754
++s Miami
++920
++s Toronto
++407
++s Guadalajara
++806
++s Miami
++923
++s Philadelphia
++226
++s Manila
++720
++s Manila
++133
++s Toronto
++852
++s Barcelona
++886
++s Sao Paulo
++68
++s Delhi
++630
++s Los Angeles
++428
++s Washington
++917
++s Atlanta
++322
++s Atlanta
++549
++s Manila
++137
++s Miami
++1135
++s Guadalajara
++399
++A Dar es Salaam
++a Qingdao
++1015 95
++u Toronto
++402
++A Lagos
++L
++a Qingdao
++910 139
++R Dar es Salaam
++r Washington
++917
++u Osaka
++103
++R Tokyo
++a Baghdad
++309 68
++L
++R Jinan
++L
++s Washington
++170
++L
++R Hyderabad
++r Lima
++727
++u Khartoum
++302
++A Nagoya
++u Los Angeles
++1329
++a Luanda
++1364 38
++r Philadelphia
++1436
++A Johannesburg
++A New York City
++a Los Angeles
++270 149
++A Los Angeles
++R Manila
++r Beijing
++473
++A Beijing
++r Tokyo
++1414
++a Lima
++1003 11
++r Dhaka
++227
++s Fukuoka
++38
++s Moscow
++499
++u Delhi
++508
++r Jinan
++220
++L
++a Qingdao
++314 81
++s Manila
++878
++a Sao Paulo
++457 134
++L
++R Hong Kong
++A Nagoya
++s Lima
++962
++u Baghdad
++1319
++L
++R Dhaka
++L
++u Lima
++432
++a Barcelona
++756 138
++s Toronto
++784
++u Dar es Salaam
++209
++R Miami
++u Washington
++1380
++s Manila
++784
++A London
++s Surat
++459
++L
++A Manila
++A Istanbul
++r Toronto
++782
++r Saint Petersburg
++1330
++s Guadalajara
++396
++A Tianjin
++r Tokyo
++98
++R Luanda
++r Dhaka
++122
++R Lagos
++u Fukuoka
++694
++r Jinan
++76
++u Sao Paulo
++457
++a Philadelphia
++455 175
++L
++u Delhi
++718
++r Osaka
++1005
++A Harbin
++u Luanda
++584
++r Los Angeles
++424
++L
++u Los Angeles
++824
++L
++R Khartoum
++r Barcelona
++545
++r Philadelphia
++502
++R Moscow
++r Hyderabad
++601
++u Los Angeles
++824
++A Nagoya
++R Washington, D.C.
++L
++L
++s Qingdao
++790
++R Sao Paulo
++A Shanghai
++A Paris
++u Beijing
++402
++r Philadelphia
++455
++s Luanda
++1053
++a Saint Petersburg
++322 141
++r Osaka
++103
++r Barcelona
++879
++a Baghdad
++732 76
++r Baghdad
++309
++a Tehran
++1213 65
++a Tehran
++270 7
++R Manila
++L
++A Nanjing
++r Luanda
++204
++L
++u Los Angeles
++824
++a Seoul
++161 99
++s Ahmedabad
++546
++a Atlanta
++920 91
++a Tianjin
++85 108
++a Lima
++1345 173
++r Manila
++865
++r Luanda
++584
++A Singapore
++L
++u Manila
++364
++L
++A Kolkata
++a Nanjing
++1014 161
++u Jinan
++1293
++u Miami
++918
++L
++R Johannesburg
++L
++L
++A Kuala Lumpur
++u Miami
++961
++R Atlanta
++A Ahmedabad
++A Istanbul
++u Baghdad
++732
++a New York City
++1256 182
++R Qingdao
++r Guadalajara
++385
++R Guadalajara
++s Surat
++463
++r Nanjing
++1014
++A Hangzhou
++A Lahore
++s Los Angeles
++1198
++R Seoul
++A Fukuoka
++A Foshan
++u Sao Paulo
++62
++L
++a Beijing
++9 165
++a Istanbul
++877 85
++R Kolkata
++R Foshan
++R Toronto
++a Barcelona
++1008 74
++s Sao Paulo
++1183
++A Shenzhen
++A Hong Kong
++A Shenzhen
++R Philadelphia
++u Toronto
++844
++R Nagoya
++a London
++599 14
++A Chengdu
++a Paris
++1063 129
++r Lima
++14
++L
++s Luanda
++1374
++a Tehran
++371 109
++r Miami
++918
++a New York City
++272 66
++L
++a Harbin
++633 24
++R Tehran
++A Khartoum
++a Shenzhen
++930 112
++a Istanbul
++1125 123
++u Qingdao
++782
++L
++R Shanghai
++s Osaka
++808
++a Baghdad
++658 29
++u Tianjin
++85
++r Atlanta
++321
++r Khartoum
++302
++A Los Angeles
++A Dhaka
++L
++s Qingdao
++660
++A Toronto
++u Luanda
++1041
++u Guadalajara
++195
++L
++a Hangzhou
++553 187
++s Fukuoka
++1256
++L
++L
++u Osaka
++799
+diff --git a/testMedium.txt b/testMedium.txt
+new file mode 100644
+index 0000000..3ddcea1
+--- /dev/null
++++ b/testMedium.txt
+@@ -0,0 +1,766 @@
++L
++A Manila
++A Jakarta
++A Saint Petersburg
++A Atlanta
++A Hong Kong
++A Philadelphia
++A Chicago
++A Foshan
++A Fukuoka
++A Chennai
++A Dallas
++A Guangzhou
++A Chengdu
++A Ho Chi Minh City
++A Bangkok
++A Nanjing
++A Moscow
++A Chengdu
++A Lahore
++A Philadelphia
++A Bogota
++A Pune
++A Suzhou
++A Dongguan
++A Paris
++A Chennai
++A Dongguan
++A Lima
++A Qingdao
++A Kolkata
++a Nanjing
++1262 198
++a Dongguan
++72 86
++a Foshan
++776 178
++a Bangkok
++1177 9
++a Saint Petersburg
++59 145
++a Pune
++925 113
++a Chicago
++155 192
++a Atlanta
++1400 4
++a Jakarta
++795 145
++a Atlanta
++1177 147
++a Suzhou
++93 109
++a Paris
++95 197
++a Nanjing
++916 142
++a Pune
++1133 134
++a Chennai
++307 49
++a Qingdao
++91 177
++a Dallas
++500 174
++a Atlanta
++457 94
++a Lima
++993 151
++a Chengdu
++1108 189
++a Fukuoka
++44 70
++a Paris
++1107 25
++a Lima
++1052 62
++a Guangzhou
++1410 160
++a Manila
++602 45
++a Nanjing
++1410 105
++a Guangzhou
++1211 170
++a Foshan
++1427 175
++a Fukuoka
++279 183
++a Philadelphia
++329 169
++a Moscow
++1385 5
++a Chennai
++1258 163
++a Chicago
++1304 114
++a Dongguan
++1221 26
++a Philadelphia
++182 26
++a Suzhou
++396 159
++a Chengdu
++524 33
++a Ho Chi Minh City
++869 63
++a Kolkata
++656 1
++a Atlanta
++246 41
++a Chengdu
++626 182
++a Saint Petersburg
++1133 134
++a Suzhou
++348 13
++a Chicago
++1337 18
++a Philadelphia
++1224 23
++a Fukuoka
++68 193
++a Philadelphia
++793 20
++a Saint Petersburg
++229 197
++a Bogota
++818 86
++a Chengdu
++826 46
++a Bangkok
++575 16
++a Paris
++101 180
++a Fukuoka
++406 174
++a Ho Chi Minh City
++1114 108
++a Lahore
++1163 131
++a Ho Chi Minh City
++118 111
++a Foshan
++333 156
++a Kolkata
++287 0
++a Lahore
++1263 28
++a Bogota
++980 116
++a Bogota
++1392 84
++a Suzhou
++111 84
++a Hong Kong
++726 56
++a Kolkata
++663 118
++a Saint Petersburg
++1369 41
++a Atlanta
++1138 89
++a Qingdao
++406 78
++a Lima
++1019 194
++a Kolkata
++1242 80
++a Foshan
++810 6
++a Atlanta
++936 36
++a Manila
++933 147
++a Ho Chi Minh City
++612 31
++a Bangkok
++1383 70
++a Kolkata
++324 94
++a Atlanta
++1318 62
++a Fukuoka
++1136 56
++a Atlanta
++348 41
++a Moscow
++1335 129
++a Manila
++1222 33
++a Chengdu
++1374 183
++a Foshan
++313 20
++a Philadelphia
++1211 143
++a Dongguan
++40 104
++a Atlanta
++539 85
++a Chicago
++756 22
++a Suzhou
++20 113
++a Kolkata
++172 34
++a Moscow
++1306 15
++a Qingdao
++465 13
++a Moscow
++921 144
++a Saint Petersburg
++1264 189
++a Bangkok
++965 179
++a Pune
++21 100
++a Saint Petersburg
++1227 183
++a Lahore
++752 15
++a Chicago
++643 117
++a Suzhou
++18 66
++a Guangzhou
++110 16
++a Dongguan
++1279 94
++s Jakarta
++802
++s Foshan
++787
++s Nanjing
++1263
++s Manila
++941
++s Lima
++1060
++s Chengdu
++1120
++s Qingdao
++99
++s Philadelphia
++329
++s Nanjing
++1266
++s Manila
++1235
++s Qingdao
++96
++s Atlanta
++257
++s Kolkata
++666
++s Kolkata
++663
++s Chengdu
++636
++s Ho Chi Minh City
++1120
++s Bogota
++1394
++s Lahore
++1171
++s Paris
++108
++s Ho Chi Minh City
++1120
++s Foshan
++342
++s Qingdao
++417
++s Chennai
++315
++s Foshan
++1431
++s Guangzhou
++1224
++s Nanjing
++928
++s Ho Chi Minh City
++1125
++s Kolkata
++338
++s Dongguan
++1281
++s Moscow
++1314
++s Foshan
++343
++s Dongguan
++1221
++s Paris
++1110
++s Bangkok
++1178
++s Manila
++1229
++s Ho Chi Minh City
++121
++s Paris
++109
++s Manila
++614
++s Foshan
++789
++s Ho Chi Minh City
++120
++s Jakarta
++803
++s Chicago
++770
++s Kolkata
++660
++s Moscow
++1335
++s Saint Petersburg
++1147
++s Philadelphia
++192
++s Nanjing
++916
++s Dallas
++514
++s Ho Chi Minh City
++626
++s Philadelphia
++1225
++s Saint Petersburg
++1377
++s Suzhou
++402
++s Bogota
++993
++s Chennai
++1271
++s Chennai
++307
++s Paris
++106
++s Moscow
++1318
++s Nanjing
++1267
++s Bogota
++991
++s Atlanta
++1139
++s Suzhou
++34
++s Paris
++104
++s Chennai
++1272
++s Ho Chi Minh City
++623
++s Dongguan
++1287
++s Saint Petersburg
++1372
++s Atlanta
++1142
++s Foshan
++320
++s Chicago
++1338
++s Jakarta
++803
++s Foshan
++816
++s Ho Chi Minh City
++122
++s Atlanta
++549
++s Dongguan
++83
++s Saint Petersburg
++70
++s Chengdu
++1384
++s Philadelphia
++796
++s Ho Chi Minh City
++1123
++s Atlanta
++248
++s Atlanta
++1147
++s Suzhou
++115
++s Dongguan
++72
++s Qingdao
++410
++s Chicago
++766
++s Philadelphia
++1221
++s Lima
++1005
++s Atlanta
++1146
++s Lima
++1003
++s Ho Chi Minh City
++1117
++s Paris
++109
++s Atlanta
++1190
++s Moscow
++1388
++s Kolkata
++666
++s Dallas
++506
++s Chennai
++314
++s Pune
++925
++s Lahore
++1274
++s Nanjing
++927
++s Philadelphia
++799
++s Dallas
++505
++s Hong Kong
++727
++s Moscow
++925
++s Qingdao
++417
++s Philadelphia
++336
++s Bangkok
++1178
++s Moscow
++1347
++s Atlanta
++540
++s Guangzhou
++122
++s Atlanta
++1323
++s Philadelphia
++1224
++s Fukuoka
++1140
++s Chicago
++167
++s Bogota
++1401
++s Foshan
++813
++s Bogota
++1403
++s Qingdao
++465
++s Atlanta
++469
++s Pune
++1133
++s Qingdao
++93
++s Moscow
++1316
++s Dongguan
++49
++s Suzhou
++23
++s Qingdao
++468
++s Kolkata
++335
++s Atlanta
++542
++s Kolkata
++666
++s Lima
++996
++s Foshan
++1441
++s Philadelphia
++184
++s Qingdao
++104
++s Atlanta
++1406
++s Foshan
++335
++s Atlanta
++256
++s Suzhou
++28
++s Lima
++1025
++s Saint Petersburg
++1277
++s Bogota
++987
++s Bogota
++981
++s Ho Chi Minh City
++623
++s Kolkata
++337
++s Bogota
++1398
++s Atlanta
++1145
++s Bangkok
++973
++s Manila
++940
++s Atlanta
++351
++s Ho Chi Minh City
++622
++s Kolkata
++667
++s Paris
++104
++s Chennai
++1265
++s Ho Chi Minh City
++881
++s Foshan
++1427
++s Guangzhou
++1225
++s Kolkata
++1251
++s Manila
++941
++s Jakarta
++808
++s Hong Kong
++736
++s Foshan
++1438
++s Dongguan
++1289
++s Saint Petersburg
++1370
++s Hong Kong
++737
++s Dongguan
++75
++s Philadelphia
++340
++s Suzhou
++118
++s Qingdao
++414
++s Bogota
++823
++s Chengdu
++828
++s Foshan
++317
++s Suzhou
++27
++s Saint Petersburg
++1379
++s Ho Chi Minh City
++618
++s Lahore
++766
++s Chicago
++1304
++s Bangkok
++1179
++s Manila
++609
++s Chengdu
++630
++s Paris
++1108
++s Kolkata
++662
++s Hong Kong
++732
++s Pune
++932
++s Chennai
++1258
++s Paris
++95
++s Pune
++938
++s Chengdu
++635
++s Paris
++1118
++s Ho Chi Minh City
++612
++s Ho Chi Minh City
++1117
++s Ho Chi Minh City
++612
++s Kolkata
++667
++s Chennai
++1266
++s Foshan
++782
++s Philadelphia
++330
++s Manila
++1227
++s Lahore
++1170
++s Guangzhou
++114
++s Foshan
++788
++s Guangzhou
++122
++s Atlanta
++544
++s Paris
++1113
++s Pune
++938
++s Dallas
++502
++A Jinan
++a Dallas
++368 9
++r Lahore
++1163
++A Guadalajara
++s Kolkata
++335
++R Saint Petersburg
++a Chicago
++1209 107
++L
++r Fukuoka
++44
++u Nanjing
++916
++R Hong Kong
++u Guangzhou
++1211
++s Atlanta
++946
++A Rio de Janeiro
++u Bangkok
++575
++s Saint Petersburg
++240
++a Paris
++47 91
++u Kolkata
++656
++a Rio de Janeiro
++344 21
++a Dongguan
++822 109
++a Jakarta
++301 168
++L
++R Kolkata
++L
++u Fukuoka
++406
++A Chennai
++r Jakarta
++301
++A Delhi
++L
++u Philadelphia
++329
++L
++a Suzhou
++410 59
++u Atlanta
++1177
++L
++a Suzhou
++1324 112
++R Jakarta
++R Chicago
++a Manila
++433 124
++a Bangkok
++1360 44
++A Dar es Salaam
++r Saint Petersburg
++1227
++u Dongguan
++40
++a Paris
++53 137
++a Dongguan
++477 27
++a Chennai
++1271 197
++R Qingdao
++r Bangkok
++1383
++a Chennai
++149 23
++L
++r Saint Petersburg
++229
++a Chennai
++283 168
++s Lima
++1021
++a Fukuoka
++273 11
++A Mexico City
++a Delhi
++1276 157
++a Ho Chi Minh City
++729 61
++u Suzhou
++20
++r Guangzhou
++1410
++L
++u Bogota
++980
++a Chengdu
++276 132
++a Rio de Janeiro
++590 30
++r Chicago
++1337
++s Saint Petersburg
++1369
++u Qingdao
++91
++u Ho Chi Minh City
++612
++R Pune
++s Dongguan
++484
++u Nanjing
++1410
++u Chengdu
++1108
++a Chennai
++341 192
++R Dallas
++s Dongguan
++75
++L
++a Ho Chi Minh City
++184 26
++r Ho Chi Minh City
++612
++r Ho Chi Minh City
++1114
++a Philadelphia
++1294 136
++L
++r Nanjing
++1262
+diff --git a/testSmall.txt b/testSmall.txt
+new file mode 100644
+index 0000000..f4ec80b
+--- /dev/null
++++ b/testSmall.txt
+@@ -0,0 +1,405 @@
++L
++A Barcelona
++A Surat
++A Hong Kong
++A Paris
++A Moscow
++A Chennai
++A Dalian
++A Dallas
++A Johannesburg
++A Santiago
++A Tehran
++A Country
++A Dalian
++A Madrid
++A Lima
++A Baghdad
++A London
++A Manila
++A Wuhan
++A Khartoum
++a Santiago
++1367 161
++a Hong Kong
++1264 40
++a Country
++689 165
++a Dalian
++1233 85
++a Surat
++852 188
++a Manila
++1204 151
++a Manila
++976 88
++a London
++52 159
++a London
++931 144
++a Baghdad
++971 50
++a Moscow
++391 42
++a Country
++404 93
++a Chennai
++277 87
++a Moscow
++877 194
++a Surat
++122 42
++a Baghdad
++1304 176
++a Baghdad
++291 159
++a Lima
++859 128
++a Manila
++1039 11
++a Wuhan
++1059 72
++a Dallas
++638 109
++a Lima
++1053 174
++a Dallas
++1344 172
++a Barcelona
++997 102
++a Moscow
++15 84
++a Moscow
++1256 57
++a Barcelona
++69 169
++a London
++848 77
++a Wuhan
++348 32
++a Surat
++146 190
++a Moscow
++374 85
++a Khartoum
++166 145
++a Manila
++1349 35
++a Country
++659 100
++a Dalian
++460 88
++a Dalian
++542 56
++a Paris
++298 48
++a Wuhan
++906 106
++a Chennai
++446 195
++a Khartoum
++755 86
++a Madrid
++255 162
++a Khartoum
++774 189
++a Manila
++753 82
++a Baghdad
++56 162
++a Dalian
++1259 196
++a Hong Kong
++97 2
++a Manila
++1084 43
++a Paris
++518 29
++a Moscow
++710 196
++a Tehran
++375 108
++a Chennai
++836 14
++a Santiago
++1186 103
++a Madrid
++815 186
++a Barcelona
++761 55
++a Paris
++1223 86
++a Hong Kong
++190 8
++a Manila
++1331 53
++a Country
++1277 0
++a Madrid
++269 7
++a Santiago
++94 189
++s Barcelona
++770
++s Wuhan
++1064
++s Santiago
++1375
++s Dalian
++1241
++s London
++851
++s Moscow
++718
++s London
++56
++s Hong Kong
++1273
++s Chennai
++841
++s Khartoum
++167
++s Surat
++853
++s Moscow
++1259
++s Baghdad
++984
++s Hong Kong
++102
++s Manila
++978
++s Madrid
++256
++s Barcelona
++1011
++s Dalian
++553
++s Dallas
++646
++s Wuhan
++354
++s London
++939
++s Barcelona
++769
++s Hong Kong
++1277
++s Santiago
++1187
++s Moscow
++393
++s Country
++661
++s Surat
++860
++s Manila
++1355
++s Country
++691
++s Moscow
++19
++s Country
++667
++s Manila
++977
++s Surat
++156
++s Barcelona
++1004
++s Dallas
++638
++s Moscow
++399
++s Dalian
++1264
++s Country
++1280
++s Wuhan
++907
++s Madrid
++828
++s Santiago
++1375
++s Paris
++311
++s Chennai
++456
++s Madrid
++825
++s Madrid
++823
++s Chennai
++460
++s London
++937
++s Baghdad
++1307
++s Wuhan
++349
++s Country
++691
++s Dalian
++550
++s Manila
++1353
++s Baghdad
++61
++s Moscow
++1256
++s Surat
++129
++s Khartoum
++172
++s Moscow
++882
++s Baghdad
++977
++s Surat
++134
++s Hong Kong
++1273
++s Country
++659
++s Khartoum
++777
++s Manila
++1040
++s Wuhan
++1059
++s Surat
++865
++s Country
++408
++s Baghdad
++973
++s Paris
++1226
++s Santiago
++100
++s Paris
++1227
++s London
++940
++s Moscow
++1269
++s Khartoum
++774
++s Barcelona
++69
++s Manila
++977
++s Wuhan
++354
++s London
++942
++s Barcelona
++763
++s Moscow
++18
++s Hong Kong
++204
++s Manila
++767
++s London
++56
++s Moscow
++386
++s Santiago
++108
++s Manila
++1339
++s Manila
++1040
++s Santiago
++1187
++s Country
++1288
++s Wuhan
++1062
++s Baghdad
++295
++s Madrid
++264
++s Chennai
++457
++s Surat
++866
++s Moscow
++378
++s Dalian
++1268
++s Manila
++1351
++s Dallas
++1354
++s Paris
++301
++s Manila
++976
++s Moscow
++398
++A Dongguan
++u Surat
++852
++R Barcelona
++A Osaka
++u Santiago
++1367
++s Dalian
++468
++r Baghdad
++56
++L
++a Madrid
++451 154
++A Country
++A Belo Horizonte
++r Baghdad
++291
++a Belo Horizonte
++1079 103
++L
++s Wuhan
++352
++r Baghdad
++1304
++r Surat
++146
++R Baghdad
++r Baghdad
++971
++s Manila
++989
++r Surat
++122
++u Dallas
++1344
++A Jakarta
++a Surat
++1137 83
++u Manila
++753
++s Lima
++865
++L
++s Dalian
++1241
++r Manila
++1204
++u Santiago
++1186
++A Dhaka
++L
++R Dongguan
++s Lima
++862
++s Moscow
++387
++L
++A London
++R Madrid
++a Jakarta
++261 84
++a Manila
++360 171
diff --git a/test.sh b/test.sh
index f8ecbf4..1753085 100755
--- a/test.sh
+++ b/test.sh
@@ -262,7 +262,7 @@ EOF
     echo "FAIL"
     [[ -n $VERBOSE ]] && echo "Your program produced:"
     [[ -n $VERBOSE ]] && echo "--------------------------"
-    [[ -n $VERBOSE ]] && echo "$answers"    
+    [[ -n $VERBOSE ]] && echo "$answer"    
     [[ -n $VERBOSE ]] && echo "--------------------------"
     [[ -n $VERBOSE ]] && echo "Output should have been:"
     [[ -n $VERBOSE ]] && echo "--------------------------"

commit e84cdcf329fdacab441ad0ca8a42131b3761c28f
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 22:04:59 2020 -0400

    finshing up scheduling/unscheduling and debuggin

diff --git a/assignment-3.c b/assignment-3.c
index 322ef6c..881c536 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -497,8 +497,10 @@ void flight_schedule_add_flight(city_t city){
   flight_schedule_add(city);
   struct flight_schedule *temp = flight_schedule_find(city);
 
-  time_t time = time_get();
-  int capacity = flight_capacity_get();
+
+  int *t;
+  time_get(t); //do this then check if t is 0 to see if valid or not 
+  int capacity = flight_capacity_get();  //this also has to be done as above to get appropraite io
   
   if (time == 1 || capacity == 1 ){
       return 1;
@@ -527,14 +529,19 @@ void flight_schedule_remove_flight(city_t city){
 
 
 
-  time_t time = time_get();
-  int capacity = flight_capacity_get(); 
+  int *t;
+  time_get(t); //if 1 continue; else tell user
+   if(time_get(t) == 0) {
+     return;
+   }
+  int *c;
+  flight_capacity_get(c); 
   
   struct flight *flights;
   flights = temp->flights;
 
   for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
-    if(flights[i].time == time){
+    if(flights[i].time == *t){
       flights[i].time = -1;//was flights[i] will this change correct one?
       flights[i].capacity = 0;  
       flights[i].available = 0;

commit ef47a987747b2ff4978de4aa2d1fd1f50bb5679e
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 21:51:04 2020 -0400

    schedule and unschedule seat

diff --git a/assignment-3.c b/assignment-3.c
index 6db86b9..322ef6c 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -545,5 +545,41 @@ void flight_schedule_remove_flight(city_t city){
 
 
 void flight_schedule_schedule_seat(city_t city) {
+  struct flight_schedule *temp = flight_schedule_find(city);
+
+  struct flight *flights;
+  flights = temp->flights;
+
+  int time = time_get();
+  int nearest = 0;
+  int position = 0;
+
+  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+    if(flights[i].time >= time){
+      if(flights[i].time - nearest <= nearest - time){
+        nearest = flights[i].time;
+        position = i;
+      }
+    }
+  }
+flights[position].available--;
   
-}
\ No newline at end of file
+}
+
+flight_schedule_unschedule_seat(city_t city){
+  struct flight_schedule *temp = flight_schedule_find(city);
+
+  struct flight *flights;
+  flights = temp->flights;
+
+  int time = time_get();
+  int nearest = 0;
+  int position = 0;
+
+  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+    if(flights[i].time == time){
+     flights[i].available--;
+    }
+  }
+}
+

commit 4490dcc205f2959c8fa299368be096d99f756e27
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 21:23:54 2020 -0400

    continuing work on add and remove flights

diff --git a/assignment-3.c b/assignment-3.c
index d9c99ff..6db86b9 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -497,15 +497,53 @@ void flight_schedule_add_flight(city_t city){
   flight_schedule_add(city);
   struct flight_schedule *temp = flight_schedule_find(city);
 
-  int time = time_get();
+  time_t time = time_get();
   int capacity = flight_capacity_get();
   
   if (time == 1 || capacity == 1 ){
       return 1;
   }
 
-  temp->flight->flights[];
+  struct flight *flights;
+  flights = temp->flights;
+  //flights[i]
+  //loop thru flights until open flight then add flight
 
+  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+    if(flights[i].time == -1){
+      flights[i].time = time;//was flights[i] will this change correct one?
+      flights[i].capacity = capacity;
+      break;
+    }
+  }
+  //else return that it failed
+
+
+}
+
+void flight_schedule_remove_flight(city_t city){
+  struct flight_schedule *temp = flight_schedule_find(city);
+ //idk if this is the right time to call or even need too
 
 
+
+  time_t time = time_get();
+  int capacity = flight_capacity_get(); 
+  
+  struct flight *flights;
+  flights = temp->flights;
+
+  for(int i = 0; i < MAX_FLIGHTS_PER_CITY; i++){
+    if(flights[i].time == time){
+      flights[i].time = -1;//was flights[i] will this change correct one?
+      flights[i].capacity = 0;  
+      flights[i].available = 0;
+      break;
+    }
+  }
 }
+
+
+void flight_schedule_schedule_seat(city_t city) {
+  
+}
\ No newline at end of file

commit e41186f0b9058ea4390a8f0fda78296861580f31
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 20:05:28 2020 -0400

    updates to add_flight

diff --git a/assignment-3.c b/assignment-3.c
index aae10c7..d9c99ff 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -442,10 +442,11 @@ void flight_schedule_free(struct flight_schedule *fs){
   }
 }
 
-struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+struct flight_schedule *flight_schedule_find(city_t city){ //or char *city//it says city_t city cant use strcmp then ja
   struct flight_schedule *temp = flight_schedules_active;
+
   while(temp != NULL){
-    if (strcmp(city,temp->destination) == 0){
+    if (strcmp(city,temp->destination) == 0){ //may have to use casts?
       return(temp);
     }
     temp = temp->next;
@@ -453,3 +454,58 @@ struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
 }
 
 
+void flight_schedule_add(city_t city){ //should this call get city
+  struct flight_schedule *p = flight_schedule_allocate(); // returns pointer and assigns to p
+  
+  if (flight_schedule_find) {
+    msg_city_exists(city);
+  }
+  strncpy(p->destination, city, MAX_CITY_NAME_LEN);
+  
+  //p->destination = ch; 
+
+}
+
+
+void flight_schedule_remove(city_t city){
+  struct flight_schedule *temp = flight_schedule_find(city);
+  flight_schedule_free(temp);
+}
+
+
+
+void flight_schedule_listAll(void){
+  struct flight_schedule *temp = flight_schedules_active;
+  while(temp != NULL){
+    printf("%p", &temp);
+    temp = temp->next;
+  }
+
+}
+
+void flight_schedule_list(city_t city){
+  struct flight_schedule *temp = flight_schedules_active;
+  while(temp != NULL){
+    if (strcmp(city,temp->destination) == 0){
+      printf("%p", &temp);
+    }
+    temp = temp->next;
+  }
+}
+
+void flight_schedule_add_flight(city_t city){
+  flight_schedule_add(city);
+  struct flight_schedule *temp = flight_schedule_find(city);
+
+  int time = time_get();
+  int capacity = flight_capacity_get();
+  
+  if (time == 1 || capacity == 1 ){
+      return 1;
+  }
+
+  temp->flight->flights[];
+
+
+
+}

commit 37a144c61067a29b6b5eb1a92342b6224278ff8b
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 18:35:40 2020 -0400

    correction of free, working on find

diff --git a/assignment-3.c b/assignment-3.c
index a03a0af..aae10c7 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -397,7 +397,7 @@ void flight_schedule_free(struct flight_schedule *fs){
   int counter = 0;
   struct flight_schedule *temp = flight_schedules_active;
   while(temp != NULL) {
-    if(temp == fs){
+    if(temp == fs){ //use flight schedule find instead
       break;
     }
     temp = temp->next;
@@ -412,12 +412,12 @@ void flight_schedule_free(struct flight_schedule *fs){
     flight_schedule_reset(temp);
 
     temp->next = flight_schedules_free; //this block of code adds temp to front of free
-    flight_schedule_free = temp;
+    flight_schedules_free = temp;
     flight_schedules_free->next->prev = flight_schedules_free;
     //flight_schedule_reset(temp);
 
   }
-  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong dont 
     temp->prev->next = temp->next;
     temp->next->prev = temp->prev;
     temp->next = NULL;
@@ -426,7 +426,7 @@ void flight_schedule_free(struct flight_schedule *fs){
     flight_schedule_reset(temp);
 
     temp->next = flight_schedules_free;
-    flight_schedule_free = temp;
+    flight_schedules_free = temp;
     flight_schedules_free->next->prev = flight_schedules_free;
   }
   else{
@@ -436,8 +436,20 @@ void flight_schedule_free(struct flight_schedule *fs){
     flight_schedule_reset(temp); //this sets both next and prev of temp to null
 
     temp->next = flight_schedules_free;
-    flight_schedule_free = temp;
+    flight_schedules_free = temp;
     flight_schedules_free->next->prev = flight_schedules_free;
     
   }
-}
\ No newline at end of file
+}
+
+struct flight_schedule *flight_schedule_find(char *city){ //it says city_t city
+  struct flight_schedule *temp = flight_schedules_active;
+  while(temp != NULL){
+    if (strcmp(city,temp->destination) == 0){
+      return(temp);
+    }
+    temp = temp->next;
+  }
+}
+
+

commit da6178b72774e0fa44ad5b72d5d13399f6e00f37
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 15:08:53 2020 -0400

    working on flight_schedule_free

diff --git a/assignment-3.c b/assignment-3.c
index 1f30cd1..a03a0af 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -394,5 +394,50 @@ struct flight_schedule * flight_schedule_allocate(void){
 //flight schedule free
 //takes schedule off active list, resets it, then places the node back on free list
 void flight_schedule_free(struct flight_schedule *fs){
-  struct flight_schedule *temp = flight
+  int counter = 0;
+  struct flight_schedule *temp = flight_schedules_active;
+  while(temp != NULL) {
+    if(temp == fs){
+      break;
+    }
+    temp = temp->next;
+    counter++;
+  }
+  
+  if (counter == 0){
+    flight_schedules_active = temp->next;
+    flight_schedules_active->prev = NULL;
+    temp->next = NULL;
+
+    flight_schedule_reset(temp);
+
+    temp->next = flight_schedules_free; //this block of code adds temp to front of free
+    flight_schedule_free = temp;
+    flight_schedules_free->next->prev = flight_schedules_free;
+    //flight_schedule_reset(temp);
+
+  }
+  if (counter != sizeof(fs)/sizeof(fs[0])){ //slightly wrong
+    temp->prev->next = temp->next;
+    temp->next->prev = temp->prev;
+    temp->next = NULL;
+    temp->prev = NULL;
+
+    flight_schedule_reset(temp);
+
+    temp->next = flight_schedules_free;
+    flight_schedule_free = temp;
+    flight_schedules_free->next->prev = flight_schedules_free;
+  }
+  else{
+    temp->prev = NULL;
+    flight_schedules_active->prev->next = NULL;
+
+    flight_schedule_reset(temp); //this sets both next and prev of temp to null
+
+    temp->next = flight_schedules_free;
+    flight_schedule_free = temp;
+    flight_schedules_free->next->prev = flight_schedules_free;
+    
+  }
 }
\ No newline at end of file

commit 4da1a4230cc78e7821817c597d531316ac1feee4
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Mon Sep 28 14:12:10 2020 -0400

    correcting allocate

diff --git a/assignment-3.c b/assignment-3.c
index ec71f49..1f30cd1 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -378,21 +378,21 @@ int flight_compare_time(const void *a, const void *b)
 //returns pointer to updated flight schedule
 struct flight_schedule * flight_schedule_allocate(void){
 
-  struct flight_schedule temp = 
+  struct flight_schedule *temp =  flight_schedules_free;
+  flight_schedules_free = flight_schedules_free->next;
+  flight_schedules_free->prev = NULL;
+  temp->next = flight_schedules_active;
+
+  flight_schedules_active = temp;
+  flight_schedules_active->next->prev = flight_schedules_active;
+  //temp->prev = NULL;
+  //struct flight_schedule *temp2 = flight_schedules_active
   
-  
-  
-  *flight_schedules_active = *flight_schedules_free->free;
-
-  
-  //flight_schedules_active = flight_schedules_free;
-  *flight_schedules_free = *flight_schedules_free->next;
-  *flight_schedules_free->prev = NULL;
-  return(flight_schedules_active->flights[]);
+  return(flight_schedules_active);
 }
 
 //flight schedule free
 //takes schedule off active list, resets it, then places the node back on free list
 void flight_schedule_free(struct flight_schedule *fs){
-  
+  struct flight_schedule *temp = flight
 }
\ No newline at end of file

commit 7c7197814c779e696458438563f16bc76b197fb2
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Sep 25 18:25:04 2020 -0400

    very confused, trying to use pointers to alt sched

diff --git a/assignment-3.c b/assignment-3.c
index ff89d23..ec71f49 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -372,19 +372,27 @@ int flight_compare_time(const void *a, const void *b)
   return (af->time - bf->time);
 }
 
-WRITE SOME CODE!
+//WRITE SOME CODE!
 //flight schedule allocate
+//takes a schedule off the free list and places it on the active list
+//returns pointer to updated flight schedule
 struct flight_schedule * flight_schedule_allocate(void){
-  *flight_schedules_active = *flight_schedules_free;
-  *flight_schedules_free = *flight_schedules_free.next;
-  return(flight_schedule);
-}
 
+  struct flight_schedule temp = 
+  
+  
+  
+  *flight_schedules_active = *flight_schedules_free->free;
 
+  
+  //flight_schedules_active = flight_schedules_free;
+  *flight_schedules_free = *flight_schedules_free->next;
+  *flight_schedules_free->prev = NULL;
+  return(flight_schedules_active->flights[]);
+}
 
 //flight schedule free
-
+//takes schedule off active list, resets it, then places the node back on free list
 void flight_schedule_free(struct flight_schedule *fs){
-  *flight_schedule_active = *flight_schedule_free;
-  *fs = 
+  
 }
\ No newline at end of file

commit c499f77919fd84ed08d77fbe2340135c1ac4d968
Author: Griffin Heyrich <gheyrich@csa1.bu.edu>
Date:   Fri Sep 25 12:05:56 2020 -0400

    starting work on first 3 helper functions

diff --git a/assignment-3.c b/assignment-3.c
index 31abde4..ff89d23 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -373,3 +373,18 @@ int flight_compare_time(const void *a, const void *b)
 }
 
 WRITE SOME CODE!
+//flight schedule allocate
+struct flight_schedule * flight_schedule_allocate(void){
+  *flight_schedules_active = *flight_schedules_free;
+  *flight_schedules_free = *flight_schedules_free.next;
+  return(flight_schedule);
+}
+
+
+
+//flight schedule free
+
+void flight_schedule_free(struct flight_schedule *fs){
+  *flight_schedule_active = *flight_schedule_free;
+  *fs = 
+}
\ No newline at end of file

commit 7ba0e13285692bb88688ff6e951de4b0b4458ce0
Author: Jonathan Appavoo <jappavoo@bu.edu>
Date:   Thu Sep 24 18:32:49 2020 -0400

    An update to assignment-3. Fix to assignment-3.c and new refence binary

diff --git a/assignment-3.c b/assignment-3.c
index 2f5c360..31abde4 100644
--- a/assignment-3.c
+++ b/assignment-3.c
@@ -29,7 +29,7 @@ typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
 // Structure to hold all the information for a single flight
 //   A city's schedule has an array of these
 struct flight {
-  int time;       // departure time of the flight
+  time_t time;       // departure time of the flight
   int available;  // number of seats currently available on the flight
   int capacity;   // maximum seat capacity of the flight
 };
@@ -318,9 +318,9 @@ void flight_schedule_initialize(struct flight_schedule array[], int n)
     array[i+1].prev = &array[i];
   }
   // Takes care of last node.  
-  // Its prev pointer will be set in the loop,
-  // we just have to set its next to NULL.
+  flight_schedule_reset(&array[n-1]); // reset clears all fields
   array[n-1].next = NULL;
+  array[n-1].prev = &array[n-2];
   flight_schedules_free = &array[0];
 }
 
diff --git a/reference b/reference
index ee9132a..b11f6c6 100755
Binary files a/reference and b/reference differ

commit 15b1620feb4a8b29cc2e391b3dc3509e95aaf61a
Author: Jonathan Appavoo <jappavoo@bu.edu>
Date:   Mon Sep 21 21:02:39 2020 -0400

    Initial Commit to seed assignment 3. Have fun!

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..8ff04a2
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+*
+!assignment-3.c
+!gitlog.txt
+
diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..5f223b9
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,30 @@
+{
+    // Use IntelliSense to learn about possible attributes.
+    // Hover to view descriptions of existing attributes.
+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+    
+
+        {
+            "name": "(gdb) Launch",
+            "type": "cppdbg",
+            "request": "launch",
+            "program": "${workspaceFolder}/assignment-3",
+            "args": [],
+            "stopAtEntry": true,
+            "cwd": "${workspaceFolder}",
+            "environment": [],
+            "externalConsole": false,
+            "MIMode": "gdb",
+            "setupCommands": [
+                {
+                    "description": "Enable pretty-printing for gdb",
+                    "text": "-enable-pretty-printing",
+                    "ignoreFailures": true
+                }
+            ],
+            "preLaunchTask": "Build"
+        }
+    ]
+}
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..495436f
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,21 @@
+{
+    "git.ignoreLegacyWarning": true,
+    "files.autoSave": "afterDelay",
+    "files.exclude": {
+        ".vscode": true,
+        "**/*.o": true,
+        "reference": true,
+        "assignment-3": true,
+        "test.sh":true,
+        "gitlog.txt":true,
+        ".gitignore":true
+    },
+    "editor.renderControlCharacters": true,
+    "C_Cpp.default.cStandard": "c99",
+    "C_Cpp.default.cppStandard": "gnu++11",
+    "C_Cpp.default.defines": [],
+    "C_Cpp.intelliSenseEngine": "Disabled",
+    "C_Cpp.workspaceParsingPriority": "low",
+    "C_Cpp.intelliSenseCacheSize": 100,
+    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true
+}
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..d02618f
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,28 @@
+{
+    // See https://go.microsoft.com/fwlink/?LinkId=733558
+    // for the documentation about the tasks.json format
+    "version": "2.0.0",
+    "tasks": [
+        {
+            "label": "Build",
+            "type": "shell",
+            "command": "make",
+            "options": {
+                "cwd": "${workspaceFolder}"
+            },
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+            "presentation": {
+                "reveal": "always",
+                "panel": "shared"
+            },
+            "problemMatcher": {
+                "base": "$gcc",
+                "fileLocation": ["relative", "${workspaceRoot}/"]
+            }
+        }
+        
+    ]
+}
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..1c3a3d1
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,69 @@
+.PHONY: all clean test gitlog
+
+all: assignment-3
+
+assignment-3: assignment-3.c
+	${CC} -std=c99 -g assignment-3.c -o assignment-3
+
+test: assignment-3 gitlog
+	./test.sh
+
+test1: assignment-3
+	./test.sh 1
+
+test2: assignment-3
+	./test.sh 2
+
+test3: assignment-3
+	./test.sh 3
+
+test4: assignment-3
+	./test.sh 4
+
+test5: assignment-3
+	./test.sh 5
+
+test6: assignment-3
+	./test.sh 6
+
+test7: assignment-3
+	./test.sh 7
+
+test8: assignment-3
+	./test.sh 8
+
+test9: assignment-3
+	./test.sh 9
+
+test10: assignment-3
+	./test.sh 10
+
+test11: assignment-3
+	./test.sh 11
+
+test12: assignment-3
+	./test.sh 12
+
+test13: assignment-3
+	./test.sh 13
+
+test14: assignment-3
+	./test.sh 14
+
+test15: assignment-3
+	./test.sh 15
+
+test16: assignment-3
+	./test.sh 16
+
+bonus1: assignment-3
+	./test.sh 1 bonus
+
+bonus2: assignment-3
+	./test.sh 2 bonus
+
+gitlog:
+	git log -p > gitlog.txt
+
+clean:
+	-${RM} assignment-3
diff --git a/assignment-3.c b/assignment-3.c
new file mode 100644
index 0000000..2f5c360
--- /dev/null
+++ b/assignment-3.c
@@ -0,0 +1,375 @@
+/**
+ * Assignment #3: Strings, structs, pointers, command-line arguments.
+ *  Let's use our knowledge to write a simple flight management system!
+ **/
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <assert.h>
+
+// Limit constants
+#define MAX_CITY_NAME_LEN 20
+#define MAX_FLIGHTS_PER_CITY 5
+#define MAX_DEFAULT_SCHEDULES 50
+
+// Time definitions
+#define TIME_MIN 0
+#define TIME_MAX ((60 * 24)-1)
+#define TIME_NULL -1
+
+
+/******************************************************************************
+ * Structure and Type definitions                                             *
+ ******************************************************************************/
+typedef int time_t;                        // integers used for time values
+typedef char city_t[MAX_CITY_NAME_LEN+1];; // null terminate fixed length city
+ 
+// Structure to hold all the information for a single flight
+//   A city's schedule has an array of these
+struct flight {
+  int time;       // departure time of the flight
+  int available;  // number of seats currently available on the flight
+  int capacity;   // maximum seat capacity of the flight
+};
+
+// Structure for an individual flight schedule
+// The main data structure of the program is an Array of these structures
+// Each structure will be placed on one of two linked lists:
+//                free or active
+// Initially the active list will be empty and all the schedules
+// will be on the free list.  Adding a schedule is finding the first
+// free schedule on the free list, removing it from the free list,
+// setting its destination city and putting it on the active list
+struct flight_schedule {
+  city_t destination;                          // destination city name
+  struct flight flights[MAX_FLIGHTS_PER_CITY]; // array of flights to the city
+  struct flight_schedule *next;                // link list next pointer
+  struct flight_schedule *prev;                // link list prev pointer
+};
+
+/******************************************************************************
+ * Global / External variables                                                *
+ ******************************************************************************/
+// This program uses two global linked lists of Schedules.  See comments
+// of struct flight_schedule above for details
+struct flight_schedule *flight_schedules_free = NULL;
+struct flight_schedule *flight_schedules_active = NULL;
+
+
+/******************************************************************************
+ * Function Prototypes                                                        *
+ ******************************************************************************/
+// Misc utility io functions
+int city_read(city_t city);           
+bool time_get(time_t *time_ptr);      
+bool flight_capacity_get(int *capacity_ptr);
+void print_command_help(void);
+
+// Core functions of the program
+void flight_schedule_initialize(struct flight_schedule array[], int n);
+struct flight_schedule * flight_schedule_find(city_t city);
+struct flight_schedule * flight_schedule_allocate(void);
+void flight_schedule_free(struct flight_schedule *fs);
+void flight_schedule_add(city_t city);
+void flight_schedule_listAll(void);
+void flight_schedule_list(city_t city);
+void flight_schedule_add_flight(city_t city);
+void flight_schedule_remove_flight(city_t city);
+void flight_schedule_schedule_seat(city_t city);
+void flight_schedule_unschedule_seat(city_t city);
+void flight_schedule_remove(city_t city);
+
+void flight_schedule_sort_flights_by_time(struct flight_schedule *fs);
+int  flight_compare_time(const void *a, const void *b);
+
+
+int main(int argc, char *argv[]) 
+{
+  long n = MAX_DEFAULT_SCHEDULES;
+  char command;
+  city_t city;
+
+  if (argc > 1) {
+    // If the program was passed an argument then try and convert the first
+    // argument in the a number that will override the default max number
+    // of schedule we will support
+    char *end;
+    n = strtol(argv[1], &end, 10); // CPAMA p 787
+    if (n==0) {
+      printf("ERROR: Bad number of default max scedules specified.\n");
+      exit(EXIT_FAILURE);
+    }
+  }
+
+  // C99 lets us allocate an array of a fixed length as a local 
+  // variable.  Since we are doing this in main and a call to main will be 
+  // active for the entire time of the program's execution this
+  // array will be alive for the entire time -- its memory and values
+  // will be stable for the entire program execution.
+  struct flight_schedule flight_schedules[n];
+ 
+  // Initialize our global lists of free and active schedules using
+  // the elements of the flight_schedules array
+  flight_schedule_initialize(flight_schedules, n);
+
+  // DEFENSIVE PROGRAMMING:  Write code that avoids bad things from happening.
+  //  When possible, if we know that some particular thing should have happened
+  //  we think of that as an assertion and write code to test them.
+  // Use the assert function (CPAMA p749) to be sure the initilization has set
+  // the free list to a non-null value and the the active list is a null value.
+  assert(flight_schedules_free != NULL && flight_schedules_active == NULL);
+
+  // Print the instruction in the beginning
+  print_command_help();
+
+  // Command processing loop
+  while (scanf(" %c", &command) == 1) {
+    switch (command) {
+    case 'A': 
+      //  Add an active flight schedule for a new city eg "A Toronto\n"
+      city_read(city);
+      flight_schedule_add(city);
+
+      break;
+    case 'L':
+      // List all active flight schedules eg. "L\n"
+      flight_schedule_listAll();
+      break;
+    case 'l': 
+      // List the flights for a particular city eg. "l\n"
+      city_read(city);
+      flight_schedule_list(city);
+      break;
+    case 'a':
+      // Adds a flight for a particular city "a Toronto\n
+      //                                      360 100\n"
+      city_read(city);
+      flight_schedule_add_flight(city);
+      break;
+    case 'r':
+      // Remove a flight for a particular city "r Toronto\n
+      //                                        360\n"
+      city_read(city);
+      flight_schedule_remove_flight(city);
+	break;
+    case 's':
+      // schedule a seat on a flight for a particular city "s Toronto\n
+      //                                                    300\n"
+      city_read(city);
+      flight_schedule_schedule_seat(city);
+      break;
+    case 'u':
+      // unschedule a seat on a flight for a particular city "u Toronto\n
+      //                                                      360\n"
+        city_read(city);
+        flight_schedule_unschedule_seat(city);
+        break;
+    case 'R':
+      // remove the schedule for a particular city "R Toronto\n"
+      city_read(city);
+      flight_schedule_remove(city);  
+      break;
+    case 'h':
+        print_command_help();
+        break;
+    case 'q':
+      goto done;
+    default:
+      printf("Bad command. Use h to see help.\n");
+    }
+  }
+ done:
+  return EXIT_SUCCESS;
+}
+
+/**********************************************************************
+ * city_read: Takes in and processes a given city following a command *
+ *********************************************************************/
+int city_read(city_t city) {
+  int ch, i=0;
+
+  // skip leading non letter characters
+  while (true) {
+    ch = getchar();
+    if ((ch >= 'A' && ch <= 'Z') || (ch >='a' && ch <='z')) {
+      city[i++] = ch;
+      break;
+    }
+  }
+  while ((ch = getchar()) != '\n') {
+    if (i < MAX_CITY_NAME_LEN) {
+      city[i++] = ch;
+    }
+  }
+  city[i] = '\0';
+  return i;
+}
+
+
+/****************************************************************
+ * Message functions so that your messages match what we expect *
+ ****************************************************************/
+void msg_city_bad(char *city) {
+  printf("No schedule for %s\n", city);
+}
+
+void msg_city_exists(char *city) {
+  printf("There is a schedule of %s already.\n", city);
+}
+
+void msg_schedule_no_free(void) {
+  printf("Sorry no more free schedules.\n");
+}
+
+void msg_city_flights(char *city) {
+  printf("The flights for %s are:", city);
+}
+
+void msg_flight_info(int time, int avail, int capacity) {
+  printf(" (%d, %d, %d)", time, avail, capacity);
+}
+
+void msg_city_max_flights_reached(char *city) {
+  printf("Sorry we cannot add more flights on this city.\n");
+}
+
+void msg_flight_bad_time(void) {
+  printf("Sorry there's no flight scheduled on this time.\n");
+}
+
+void msg_flight_no_seats(void) {
+    printf("Sorry there's no more seats available!\n");
+}
+
+void msg_flight_all_seats_empty(void) {
+  printf("All the seats on this flights are empty!\n");
+}
+
+void msg_time_bad() {
+  printf("Invalid time value\n");
+}
+
+void msg_capacity_bad() {
+  printf("Invalid capacity value\n");
+}
+
+void print_command_help()
+{
+  printf("Here are the possible commands:\n"
+	 "A <city name>     - Add an active empty flight schedule for\n"
+	 "                    <city name>\n"
+	 "L                 - List cities which have an active schedule\n"
+	 "l <city name>     - List the flights for <city name>\n"
+	 "a <city name>\n"
+         "<time> <capacity> - Add a flight for <city name> @ <time> time\n"
+	 "                    with <capacity> seats\n"  
+	 "r <city name>\n"
+         "<time>            - Remove a flight form <city name> whose time is\n"
+	 "                    <time>\n"
+	 "s <city name>\n"
+	 "<time>            - Attempt to schedule seat on flight to \n"
+	 "                    <city name> at <time> or next closest time on\n"
+	 "                    which their is an available seat\n"
+	 "u <city name>\n"
+	 "<time>            - unschedule a seat from flight to <city name>\n"
+	 "                    at <time>\n"
+	 "R <city name>     - Remove schedule for <city name>\n"
+	 "h                 - print this help message\n"
+	 "q                 - quit\n"
+);
+}
+
+
+/****************************************************************
+ * Resets a flight schedule                                     *
+ ****************************************************************/
+void flight_schedule_reset(struct flight_schedule *fs) {
+    fs->destination[0] = 0;
+    for (int i=0; i<MAX_FLIGHTS_PER_CITY; i++) {
+      fs->flights[i].time = TIME_NULL;
+      fs->flights[i].available = 0;
+      fs->flights[i].capacity = 0;
+    }
+    fs->next = NULL;
+    fs->prev = NULL;
+}
+
+/******************************************************************
+* Initializes the flight_schedule array that will hold any flight *
+* schedules created by the user. This is called in main for you.  *
+ *****************************************************************/
+
+void flight_schedule_initialize(struct flight_schedule array[], int n)
+{
+  flight_schedules_active = NULL;
+  flight_schedules_free = NULL;
+
+  // takes care of empty array case
+  if (n==0) return;
+
+  // Loop through the Array connecting them
+  // as a linear doubly linked list
+  array[0].prev = NULL;
+  for (int i=0; i<n-1; i++) {
+    flight_schedule_reset(&array[i]);
+    array[i].next = &array[i+1];
+    array[i+1].prev = &array[i];
+  }
+  // Takes care of last node.  
+  // Its prev pointer will be set in the loop,
+  // we just have to set its next to NULL.
+  array[n-1].next = NULL;
+  flight_schedules_free = &array[0];
+}
+
+/***********************************************************
+ * time_get: read a time from the user
+   Time in this program is a minute number 0-((24*60)-1)=1439
+   -1 is used to indicate the NULL empty time 
+   This function should read in a time value and check its 
+   validity.  If it is not valid eg. not -1 or not 0-1439
+   It should print "Invalid Time" and return false.
+   othewise it should return the value in the integer pointed
+   to by time_ptr.
+ ***********************************************************/
+bool time_get(int *time_ptr) {
+  if (scanf("%d", time_ptr)==1) {
+    return (TIME_NULL == *time_ptr || 
+	    (*time_ptr >= TIME_MIN && *time_ptr <= TIME_MAX));
+  } 
+  msg_time_bad();
+  return false;
+}
+
+/***********************************************************
+ * flight_capacity_get: read the capacity of a flight from the user
+   This function should read in a capacity value and check its 
+   validity.  If it is not greater than 0, it should print 
+   "Invalid capacity value" and return false. Othewise it should 
+   return the value in the integer pointed to by cap_ptr.
+ ***********************************************************/
+bool flight_capacity_get(int *cap_ptr) {
+  if (scanf("%d", cap_ptr)==1) {
+    return *cap_ptr > 0;
+  }
+  msg_capacity_bad();
+  return false;
+}
+
+void flight_schedule_sort_flights_by_time(struct flight_schedule *fs) 
+{
+  qsort(fs->flights, MAX_FLIGHTS_PER_CITY, sizeof(struct flight),
+	flight_compare_time);
+}
+
+int flight_compare_time(const void *a, const void *b) 
+{
+  const struct flight *af = a;
+  const struct flight *bf = b;
+  
+  return (af->time - bf->time);
+}
+
+WRITE SOME CODE!
diff --git a/gitlog.txt b/gitlog.txt
new file mode 100644
index 0000000..e69de29
diff --git a/reference b/reference
new file mode 100755
index 0000000..ee9132a
Binary files /dev/null and b/reference differ
diff --git a/test.sh b/test.sh
new file mode 100755
index 0000000..f8ecbf4
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,328 @@
+#!/bin/bash
+#set -x
+
+REFERENCE=./reference
+PGM=./assignment-3
+
+# To add a test you can add an element the REQUIRED arrays 
+# or BONUS Arrays
+# Each test can have a descripttion, input and optionally a num
+# num is passed as the argument on the command line to set
+# the default max schedule size
+
+# Required tests
+REQUIRED_DESC[0]="Required 1: Simple List schedules and Add Schedule test"
+REQUIRED_INPUT[0]="L
+A Toronto
+L"
+
+REQUIRED_DESC[1]="Required 2: Basic test of add Flight"
+REQUIRED_INPUT[1]="L
+A Toronto
+l Toronto
+a Toronto
+1000 5
+l Toronto"
+
+REQUIRED_NUM[2]="2"
+REQUIRED_DESC[2]="Required 3: Corner Test max+1 adding schedules"
+REQUIRED_INPUT[2]="L
+A City1
+A City2
+L
+A City3
+L"
+
+REQUIRED_DESC[3]="Required 4: Basic test of removing a flight schedule"
+REQUIRED_INPUT[3]="A Naples
+A Addis Ababa
+L
+R Naples
+L"
+
+REQUIRED_DESC[4]="Required 5: Basic test of removing a flight for a particular city"
+REQUIRED_INPUT[4]="A San Jose
+a San Jose
+360 100
+l San Jose
+r San Jose
+360
+l San Jose"
+
+REQUIRED_DESC[5]="Required 6: Corner test of removing a nonexistent flight for a particular city"
+REQUIRED_INPUT[5]="A Hanoi
+r Hanoi
+100"
+
+REQUIRED_DESC[6]="Required 7: Basic test of scheduling a flight for a particular city"
+REQUIRED_INPUT[6]="A Cartagena
+a Cartagena
+720 100
+a Cartagena
+840 120
+s Cartagena
+480
+l Cartagena"
+
+REQUIRED_DESC[7]="Required 8: Basic test of unscheduling a flight for a particular city"
+REQUIRED_INPUT[7]="L
+A Abu Dhabi
+a Abu Dhabi
+360 50
+a Abu Dhabi
+840 100
+s Abu Dhabi
+700
+l Abu Dhabi
+u Abu Dhabi
+840
+l Abu Dhabi"
+
+REQUIRED_DESC[8]="Required 9: Corner test of scheduling a full flight for a particular city"
+REQUIRED_INPUT[8]="L
+A Belgrade
+a Belgrade
+400 1
+s Belgrade
+400
+l Belgrade
+s Belgrade
+400
+l Belgrade"
+
+REQUIRED_DESC[9]="Required 10: Corner test of unscheduling an empty flight"
+REQUIRED_INPUT[9]="L
+A Kyoto
+a Kyoto
+300 5
+l Kyoto
+u Kyoto
+300
+l Kyoto"
+
+REQUIRED_DESC[10]="Required 11: Corner test of unscheduling a nonexistent flight"
+REQUIRED_INPUT[10]="L
+A Mumbai
+a Mumbai
+900 3
+l Mumbai
+u Mumbai
+300
+l Mumbai"
+
+REQUIRED_DESC[11]="Required 12: Corner test for scheduling a flight after all possible times"
+REQUIRED_INPUT[11]="L
+A Prague
+a Prague
+360 5
+a Prague
+720 100
+l Prague
+s Prague
+900
+l Prague"
+
+REQUIRED_NUM[12]="2"
+REQUIRED_DESC[12]="Required 13: Exhaustive Test for adding schedules to maximuin amount and removing them"
+REQUIRED_INPUT[12]="L
+A City1
+L
+A City2
+L
+A City3
+L
+R City1
+L
+R City2
+L
+R City3
+L
+A City1
+L"
+
+REQUIRED_DESC[13]="Required 14: Exhaustive Test for maxinum flights on a city"
+REQUIRED_INPUT[13]="L
+A City1
+a City1
+60 5
+l City1
+a City1
+120 5
+l City1
+a City1
+180 5
+l City1
+a City1
+240 5
+l City1
+a City1
+300 5
+l City1
+a City1
+360 5
+l City1
+r City1
+360
+l City1
+r City1
+300
+l City1
+r City1
+240
+l City1
+r City1
+180
+l City1
+r City1
+120
+l City1
+r City1
+60
+l City1
+a City1
+60 5
+l City1"
+
+REQUIRED_DESC[14]="Required 15: Exhaustive Test for schedule up to maxinum seats on a flight"
+REQUIRED_INPUT[14]="L
+A City1
+a City1
+60 3
+l City1
+s City1
+60
+l City1
+s City1
+60
+l City1
+s City1
+60
+l City1
+s City1
+60
+l City1
+u City1
+60
+l City1
+u City1
+60
+l City1
+u City1
+60
+l City1
+u City1
+60
+l City1"
+
+REQUIRED_DESC[15]="Required 16: A bigger test "
+REQUIRED_INPUT[15]="$(cat testSmall.txt)"
+REQUIRED_VALUE[15]=5
+
+
+# Bonus tests
+BONUS_DESC[0]="Bonus 1: Medium sized test"
+BONUS_INPUT[0]="$(cat testMedium.txt)"
+BONUS_VALUE[0]=3
+
+BONUS_DESC[1]="Bonus 2: Large sized test"
+BONUS_INPUT[1]="$(cat testBig.txt)"
+BONUS_VALUE[1]=5
+
+
+function run_test()
+{
+   description="$1"
+   input="$2"
+   num="$3"
+
+   echo -n "$description : "
+   [[ -n $VERBOSE ]] &&  echo "Input:"
+   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+   [[ -n $VERBOSE ]] &&  echo "$input"
+   [[ -n $VERBOSE ]] &&  echo "--------------------------"
+
+   solution=$($REFERENCE $num <<EOF
+$input
+EOF
+)
+
+   answer=$($PGM $num<<EOF
+$input
+EOF
+)
+
+  if [[ -n $DEBUG ]]; then
+      echo "$solution"
+  else
+    if [[ "$answer" == "$solution" ]]; then
+       echo "PASS"
+       return 0
+    fi
+    #echo "FAIL: your program produced: '$answer' output should have been: '$solution'"
+    echo "FAIL"
+    [[ -n $VERBOSE ]] && echo "Your program produced:"
+    [[ -n $VERBOSE ]] && echo "--------------------------"
+    [[ -n $VERBOSE ]] && echo "$answers"    
+    [[ -n $VERBOSE ]] && echo "--------------------------"
+    [[ -n $VERBOSE ]] && echo "Output should have been:"
+    [[ -n $VERBOSE ]] && echo "--------------------------"
+    [[ -n $VERBOSE ]] && echo "$solution"
+    [[ -n $VERBOSE ]] && echo "--------------------------"
+    [[ -n $VERBOSE ]] && echo ""
+  fi
+  return 1
+}
+
+testnum=$1
+type=$2
+
+total=0
+correct=0
+
+if [[ -z $testnum ]]; then
+    for ((i=0; i<${#REQUIRED_INPUT[@]}; i++)); do
+	value="${REQUIRED_VALUE[$i]}"
+	[[ -z $value ]] && value=1
+	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+	    (( correct += $value ))
+	fi
+	(( total += value ))
+    done
+    
+    
+    for ((i=0; i<${#BONUS_INPUT[@]}; i++)); do
+	value="${BONUS_VALUE[$i]}"
+	[[ -z $value ]] && value=1
+	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+	    (( correct += $value ))
+	fi
+    done
+else
+    VERBOSE=1
+    (( i=$testnum - 1 ))
+    if [[ -z "$type" ]]; then
+	if (( $i < 0 || $i >= ${#REQUIRED_INPUT[@]} )); then
+	    echo -n "There are ${#REQUIRED_INPUT[@]} required tests.  Please specify a test number"
+	    echo " between 1 and ${#REQUIRED_INPUT[@]} inclusively"
+	    exit -1
+	fi
+	value="${REQUIRED_VALUE[$i]}"
+	[[ -z $value ]] && value=1
+	if run_test "${REQUIRED_DESC[$i]}" "${REQUIRED_INPUT[$i]}" "${REQUIRED_NUM[$i]}"; then
+	    (( correct += $value ))
+	fi
+	(( total += value ))
+    else
+	if (( $i < 0 || $i >= ${#BONUS_INPUT[@]} )); then
+	    echo -n "There are ${#BONUS_INPUT[@]} bonus tests.  Please specify a test number"
+	    echo " between 1 and ${#BONUS_INPUT[@]} inclusively"
+	    exit -1
+	fi	
+	value="${BONUS_VALUE[$i]}"
+	[[ -z $value ]] && value=1
+	if run_test "${BONUS_DESC[$i]}" "${BONUS_INPUT[$i]}" "${BONUS_NUM[$i]}"; then
+         (( correct += $value ))
+	fi
+    fi
+fi
+echo "score: ${correct}/${total}"
diff --git a/testBig.txt b/testBig.txt
new file mode 100644
index 0000000..90170d5
--- /dev/null
+++ b/testBig.txt
@@ -0,0 +1,1251 @@
+L
+A Qingdao
+A Paris
+A Lima
+A Los Angeles
+A Khartoum
+A Barcelona
+A Santiago
+A Tokyo
+A Delhi
+A Guangzhou
+A Johannesburg
+A Paris
+A Dhaka
+A Chennai
+A Jinan
+A Luanda
+A Surat
+A Hyderabad
+A Beijing
+A Atlanta
+A Chennai
+A Dar es Salaam
+A Osaka
+A Hong Kong
+A Toronto
+A Saint Petersburg
+A Manila
+A Washington, D.C.
+A Tehran
+A Miami
+A Khartoum
+A Seoul
+A Dar es Salaam
+A Sao Paulo
+A Baghdad
+A Guadalajara
+A Ahmedabad
+A Moscow
+A Philadelphia
+A Fukuoka
+a Tokyo
+1414 113
+a Guadalajara
+385 170
+a Qingdao
+782 37
+a Ahmedabad
+1411 50
+a Los Angeles
+517 84
+a Tehran
+86 61
+a Osaka
+1289 162
+a Barcelona
+1261 158
+a Fukuoka
+550 191
+a Seoul
+207 1
+a Manila
+364 96
+a Khartoum
+56 194
+a Tokyo
+98 1
+a Saint Petersburg
+1330 107
+a Baghdad
+15 15
+a Chennai
+1169 127
+a Beijing
+807 97
+a Seoul
+1134 34
+a Jinan
+220 102
+a Dhaka
+122 101
+a Luanda
+1342 71
+a Guadalajara
+195 35
+a Fukuoka
+28 37
+a Beijing
+678 83
+a Khartoum
+947 39
+a Hyderabad
+490 104
+a Sao Paulo
+62 83
+a Baghdad
+1319 24
+a Delhi
+718 115
+a Baghdad
+204 114
+a Surat
+430 74
+a Miami
+918 87
+a Surat
+455 95
+a Fukuoka
+1077 131
+a Luanda
+311 21
+a Seoul
+1132 155
+a Lima
+432 177
+a Surat
+494 102
+a Washington, D.C.
+667 12
+a Hong Kong
+200 55
+a Los Angeles
+1195 4
+a Ahmedabad
+610 161
+a Delhi
+508 110
+a Atlanta
+17 21
+a Washington, D.C.
+162 23
+a Luanda
+1216 15
+a Tokyo
+1095 117
+a Philadelphia
+1436 117
+a Atlanta
+277 164
+a Manila
+720 147
+a Tokyo
+1017 25
+a Jinan
+76 66
+a Toronto
+844 84
+a Santiago
+7 115
+a Surat
+388 55
+a Tehran
+836 174
+a Paris
+371 110
+a Sao Paulo
+516 113
+a Luanda
+1041 174
+a Dhaka
+1076 34
+a Guadalajara
+162 144
+a Los Angeles
+424 33
+a Philadelphia
+565 167
+a Luanda
+1411 44
+a Osaka
+1005 82
+a Fukuoka
+1253 194
+a Atlanta
+141 102
+a Fukuoka
+1119 112
+a Toronto
+782 150
+a Dhaka
+1006 96
+a Miami
+961 126
+a Lima
+360 41
+a Lima
+14 50
+a Dhaka
+1028 191
+a Philadelphia
+502 115
+a Washington, D.C.
+1380 59
+a Atlanta
+548 113
+a Fukuoka
+694 183
+a Saint Petersburg
+261 26
+a Jinan
+196 53
+a Delhi
+315 78
+a Delhi
+625 92
+a Ahmedabad
+105 98
+a Philadelphia
+111 15
+a Atlanta
+321 31
+a Ahmedabad
+1244 59
+a Osaka
+799 173
+a Khartoum
+302 7
+a Luanda
+823 190
+a Chennai
+754 139
+a Los Angeles
+1028 78
+a Miami
+1123 183
+a Dar es Salaam
+1353 102
+a Beijing
+473 88
+a Paris
+698 95
+a Barcelona
+545 170
+a Chennai
+382 85
+a Miami
+821 114
+a Luanda
+584 161
+a Fukuoka
+38 26
+a Jinan
+536 148
+a Manila
+1403 133
+a Washington, D.C.
+917 130
+a Sao Paulo
+1169 81
+a Santiago
+689 42
+a Ahmedabad
+279 30
+a Los Angeles
+881 35
+a Jinan
+1293 148
+a Guangzhou
+1366 38
+a Santiago
+317 123
+a Tokyo
+454 104
+a Atlanta
+626 177
+a Surat
+69 135
+a Luanda
+1426 19
+a Barcelona
+879 46
+a Los Angeles
+1329 90
+a Beijing
+402 60
+a Lima
+727 161
+a Hyderabad
+601 186
+a Khartoum
+294 183
+a Hyderabad
+267 131
+a Manila
+771 102
+a Osaka
+103 68
+a Atlanta
+848 147
+a Atlanta
+811 179
+a Toronto
+402 131
+a Guadalajara
+804 28
+a Qingdao
+16 114
+a Beijing
+1218 14
+a Moscow
+498 195
+a Surat
+528 48
+a Manila
+865 4
+a Guangzhou
+328 24
+a Dhaka
+227 50
+a Manila
+124 91
+a Philadelphia
+218 104
+a Dar es Salaam
+209 34
+a Chennai
+641 179
+a Barcelona
+1433 171
+a Lima
+957 60
+a Dhaka
+1292 111
+a Qingdao
+647 40
+a Khartoum
+417 3
+a Tehran
+751 180
+a Barcelona
+778 118
+a Luanda
+204 59
+a Ahmedabad
+541 34
+a Ahmedabad
+539 33
+a Los Angeles
+824 193
+a Tehran
+1412 39
+s Luanda
+1418
+s Toronto
+857
+s Lima
+22
+s Tehran
+100
+s Washington
+175
+s Dhaka
+132
+s Jinan
+90
+s Beijing
+812
+s Barcelona
+1268
+s Dhaka
+228
+s Dhaka
+229
+s Osaka
+1295
+s Los Angeles
+527
+s Ahmedabad
+620
+s Tokyo
+461
+s Luanda
+588
+s Tehran
+1420
+s Jinan
+228
+s Hyderabad
+497
+s Manila
+879
+s Delhi
+720
+s Surat
+442
+s Lima
+21
+s Delhi
+630
+s Tehran
+836
+s Dhaka
+1042
+s Atlanta
+558
+s Khartoum
+300
+s Luanda
+1050
+s Lima
+445
+s Hong Kong
+213
+s Delhi
+318
+s Manila
+725
+s Dhaka
+1300
+s Tokyo
+1028
+s Lima
+23
+s Qingdao
+24
+s Ahmedabad
+542
+s Barcelona
+1274
+s Santiago
+7
+s Surat
+467
+s Chennai
+392
+s Fukuoka
+551
+s Fukuoka
+704
+s Fukuoka
+34
+s Fukuoka
+1131
+s Ahmedabad
+541
+s Philadelphia
+566
+s Surat
+506
+s Khartoum
+952
+s Guadalajara
+389
+s Tokyo
+1031
+s Baghdad
+24
+s Khartoum
+307
+s Lima
+370
+s Atlanta
+812
+s Sao Paulo
+1176
+s Manila
+1411
+s Khartoum
+294
+s Seoul
+1148
+s Guadalajara
+814
+s Khartoum
+314
+s Manila
+1410
+s Khartoum
+302
+s Philadelphia
+230
+s Lima
+728
+s Ahmedabad
+548
+s Fukuoka
+1121
+s Baghdad
+206
+s Ahmedabad
+1424
+s Santiago
+11
+s Lima
+364
+s Manila
+128
+s Tokyo
+460
+s Surat
+469
+s Barcelona
+1274
+s Guadalajara
+816
+s Guadalajara
+811
+s Luanda
+597
+s Atlanta
+852
+s Guadalajara
+811
+s Manila
+1409
+s Miami
+918
+s Luanda
+593
+s Barcelona
+1440
+s Dhaka
+132
+s Lima
+363
+s Ahmedabad
+1251
+s Los Angeles
+521
+s Fukuoka
+38
+s Beijing
+686
+s Fukuoka
+1126
+s Guadalajara
+196
+s Baghdad
+206
+s Los Angeles
+522
+s Ahmedabad
+553
+s Ahmedabad
+1416
+s Philadelphia
+113
+s Dar es Salaam
+217
+s Lima
+958
+s Tehran
+752
+s Washington
+680
+s Tehran
+756
+s Khartoum
+299
+s Dhaka
+1084
+s Manila
+878
+s Ahmedabad
+541
+s Ahmedabad
+119
+s Ahmedabad
+616
+s Tehran
+756
+s Tehran
+765
+s Philadelphia
+569
+s Ahmedabad
+283
+s Washington
+1387
+s Saint Petersburg
+274
+s Dhaka
+1037
+s Philadelphia
+506
+s Luanda
+593
+s Philadelphia
+232
+s Dhaka
+233
+s Baghdad
+1329
+s Chennai
+768
+s Barcelona
+546
+s Sao Paulo
+529
+s Jinan
+543
+s Philadelphia
+121
+s Tehran
+759
+s Lima
+964
+s Miami
+923
+s Los Angeles
+1195
+s Jinan
+200
+s Jinan
+224
+s Beijing
+1220
+s Lima
+368
+s Philadelphia
+1436
+s Tehran
+95
+s Miami
+928
+s Baghdad
+1326
+s Beijing
+483
+s Qingdao
+647
+s Fukuoka
+42
+s Los Angeles
+1033
+s Los Angeles
+836
+s Osaka
+1010
+s Manila
+865
+s Miami
+825
+s Barcelona
+553
+s Tehran
+757
+s Jinan
+88
+s Luanda
+1355
+s Saint Petersburg
+266
+s Surat
+459
+s Philadelphia
+576
+s Philadelphia
+1441
+s Paris
+709
+s Manila
+734
+s Toronto
+785
+s Manila
+135
+s Lima
+368
+s Lima
+967
+s Delhi
+731
+s Beijing
+403
+s Santiago
+692
+s Tehran
+1416
+s Dar es Salaam
+1358
+s Seoul
+1134
+s Philadelphia
+579
+s Guangzhou
+342
+s Osaka
+116
+s Guadalajara
+397
+s Dhaka
+1040
+s Toronto
+793
+s Qingdao
+25
+s Baghdad
+1332
+s Osaka
+1017
+s Los Angeles
+1338
+s Ahmedabad
+551
+s Guangzhou
+331
+s Tehran
+1420
+s Dar es Salaam
+215
+s Tokyo
+462
+s Atlanta
+859
+s Fukuoka
+554
+s Ahmedabad
+1423
+s Jinan
+229
+s Dhaka
+1294
+s Ahmedabad
+1250
+s Ahmedabad
+621
+s Delhi
+626
+s Manila
+129
+s Luanda
+204
+s Surat
+440
+s Atlanta
+22
+s Ahmedabad
+1251
+s Khartoum
+302
+s Surat
+73
+s Guadalajara
+209
+s Manila
+721
+s Toronto
+793
+s Dar es Salaam
+216
+s Manila
+785
+s Ahmedabad
+116
+s Barcelona
+548
+s Dhaka
+1041
+s Khartoum
+305
+s Los Angeles
+1208
+s Dhaka
+1079
+s Tokyo
+1422
+s Manila
+722
+s Osaka
+1298
+s Surat
+431
+s Khartoum
+294
+s Barcelona
+1445
+s Luanda
+589
+s Chennai
+645
+s Luanda
+835
+s Manila
+773
+s Fukuoka
+1256
+s Dhaka
+1300
+s Philadelphia
+230
+s Philadelphia
+571
+s Hong Kong
+209
+s Khartoum
+419
+s Paris
+706
+s Sao Paulo
+516
+s Tehran
+843
+s Khartoum
+429
+s Khartoum
+66
+s Guadalajara
+815
+s Khartoum
+63
+s Guadalajara
+397
+s Baghdad
+218
+s Saint Petersburg
+274
+s Dar es Salaam
+1359
+s Lima
+439
+s Khartoum
+312
+s Luanda
+1345
+s Seoul
+220
+s Tokyo
+1020
+s Atlanta
+25
+s Sao Paulo
+1179
+s Manila
+732
+s Philadelphia
+122
+s Manila
+723
+s Baghdad
+205
+s Osaka
+1018
+s Tehran
+762
+s Luanda
+1412
+s Toronto
+845
+s Qingdao
+24
+s Surat
+528
+s Chennai
+385
+s Ahmedabad
+542
+s Philadelphia
+1447
+s Lima
+733
+s Guadalajara
+205
+s Delhi
+326
+s Chennai
+754
+s Atlanta
+823
+s Manila
+377
+s Khartoum
+303
+s Delhi
+512
+s Surat
+498
+s Guadalajara
+165
+s Manila
+720
+s Washington
+170
+s Hyderabad
+280
+s Lima
+370
+s Tokyo
+98
+s Toronto
+854
+s Ahmedabad
+618
+s Toronto
+858
+s Tehran
+1421
+s Qingdao
+783
+s Barcelona
+784
+s Santiago
+690
+s Fukuoka
+1082
+s Jinan
+232
+s Chennai
+385
+s Paris
+710
+s Tokyo
+1427
+s Chennai
+754
+s Miami
+920
+s Toronto
+407
+s Guadalajara
+806
+s Miami
+923
+s Philadelphia
+226
+s Manila
+720
+s Manila
+133
+s Toronto
+852
+s Barcelona
+886
+s Sao Paulo
+68
+s Delhi
+630
+s Los Angeles
+428
+s Washington
+917
+s Atlanta
+322
+s Atlanta
+549
+s Manila
+137
+s Miami
+1135
+s Guadalajara
+399
+A Dar es Salaam
+a Qingdao
+1015 95
+u Toronto
+402
+A Lagos
+L
+a Qingdao
+910 139
+R Dar es Salaam
+r Washington
+917
+u Osaka
+103
+R Tokyo
+a Baghdad
+309 68
+L
+R Jinan
+L
+s Washington
+170
+L
+R Hyderabad
+r Lima
+727
+u Khartoum
+302
+A Nagoya
+u Los Angeles
+1329
+a Luanda
+1364 38
+r Philadelphia
+1436
+A Johannesburg
+A New York City
+a Los Angeles
+270 149
+A Los Angeles
+R Manila
+r Beijing
+473
+A Beijing
+r Tokyo
+1414
+a Lima
+1003 11
+r Dhaka
+227
+s Fukuoka
+38
+s Moscow
+499
+u Delhi
+508
+r Jinan
+220
+L
+a Qingdao
+314 81
+s Manila
+878
+a Sao Paulo
+457 134
+L
+R Hong Kong
+A Nagoya
+s Lima
+962
+u Baghdad
+1319
+L
+R Dhaka
+L
+u Lima
+432
+a Barcelona
+756 138
+s Toronto
+784
+u Dar es Salaam
+209
+R Miami
+u Washington
+1380
+s Manila
+784
+A London
+s Surat
+459
+L
+A Manila
+A Istanbul
+r Toronto
+782
+r Saint Petersburg
+1330
+s Guadalajara
+396
+A Tianjin
+r Tokyo
+98
+R Luanda
+r Dhaka
+122
+R Lagos
+u Fukuoka
+694
+r Jinan
+76
+u Sao Paulo
+457
+a Philadelphia
+455 175
+L
+u Delhi
+718
+r Osaka
+1005
+A Harbin
+u Luanda
+584
+r Los Angeles
+424
+L
+u Los Angeles
+824
+L
+R Khartoum
+r Barcelona
+545
+r Philadelphia
+502
+R Moscow
+r Hyderabad
+601
+u Los Angeles
+824
+A Nagoya
+R Washington, D.C.
+L
+L
+s Qingdao
+790
+R Sao Paulo
+A Shanghai
+A Paris
+u Beijing
+402
+r Philadelphia
+455
+s Luanda
+1053
+a Saint Petersburg
+322 141
+r Osaka
+103
+r Barcelona
+879
+a Baghdad
+732 76
+r Baghdad
+309
+a Tehran
+1213 65
+a Tehran
+270 7
+R Manila
+L
+A Nanjing
+r Luanda
+204
+L
+u Los Angeles
+824
+a Seoul
+161 99
+s Ahmedabad
+546
+a Atlanta
+920 91
+a Tianjin
+85 108
+a Lima
+1345 173
+r Manila
+865
+r Luanda
+584
+A Singapore
+L
+u Manila
+364
+L
+A Kolkata
+a Nanjing
+1014 161
+u Jinan
+1293
+u Miami
+918
+L
+R Johannesburg
+L
+L
+A Kuala Lumpur
+u Miami
+961
+R Atlanta
+A Ahmedabad
+A Istanbul
+u Baghdad
+732
+a New York City
+1256 182
+R Qingdao
+r Guadalajara
+385
+R Guadalajara
+s Surat
+463
+r Nanjing
+1014
+A Hangzhou
+A Lahore
+s Los Angeles
+1198
+R Seoul
+A Fukuoka
+A Foshan
+u Sao Paulo
+62
+L
+a Beijing
+9 165
+a Istanbul
+877 85
+R Kolkata
+R Foshan
+R Toronto
+a Barcelona
+1008 74
+s Sao Paulo
+1183
+A Shenzhen
+A Hong Kong
+A Shenzhen
+R Philadelphia
+u Toronto
+844
+R Nagoya
+a London
+599 14
+A Chengdu
+a Paris
+1063 129
+r Lima
+14
+L
+s Luanda
+1374
+a Tehran
+371 109
+r Miami
+918
+a New York City
+272 66
+L
+a Harbin
+633 24
+R Tehran
+A Khartoum
+a Shenzhen
+930 112
+a Istanbul
+1125 123
+u Qingdao
+782
+L
+R Shanghai
+s Osaka
+808
+a Baghdad
+658 29
+u Tianjin
+85
+r Atlanta
+321
+r Khartoum
+302
+A Los Angeles
+A Dhaka
+L
+s Qingdao
+660
+A Toronto
+u Luanda
+1041
+u Guadalajara
+195
+L
+a Hangzhou
+553 187
+s Fukuoka
+1256
+L
+L
+u Osaka
+799
diff --git a/testMedium.txt b/testMedium.txt
new file mode 100644
index 0000000..3ddcea1
--- /dev/null
+++ b/testMedium.txt
@@ -0,0 +1,766 @@
+L
+A Manila
+A Jakarta
+A Saint Petersburg
+A Atlanta
+A Hong Kong
+A Philadelphia
+A Chicago
+A Foshan
+A Fukuoka
+A Chennai
+A Dallas
+A Guangzhou
+A Chengdu
+A Ho Chi Minh City
+A Bangkok
+A Nanjing
+A Moscow
+A Chengdu
+A Lahore
+A Philadelphia
+A Bogota
+A Pune
+A Suzhou
+A Dongguan
+A Paris
+A Chennai
+A Dongguan
+A Lima
+A Qingdao
+A Kolkata
+a Nanjing
+1262 198
+a Dongguan
+72 86
+a Foshan
+776 178
+a Bangkok
+1177 9
+a Saint Petersburg
+59 145
+a Pune
+925 113
+a Chicago
+155 192
+a Atlanta
+1400 4
+a Jakarta
+795 145
+a Atlanta
+1177 147
+a Suzhou
+93 109
+a Paris
+95 197
+a Nanjing
+916 142
+a Pune
+1133 134
+a Chennai
+307 49
+a Qingdao
+91 177
+a Dallas
+500 174
+a Atlanta
+457 94
+a Lima
+993 151
+a Chengdu
+1108 189
+a Fukuoka
+44 70
+a Paris
+1107 25
+a Lima
+1052 62
+a Guangzhou
+1410 160
+a Manila
+602 45
+a Nanjing
+1410 105
+a Guangzhou
+1211 170
+a Foshan
+1427 175
+a Fukuoka
+279 183
+a Philadelphia
+329 169
+a Moscow
+1385 5
+a Chennai
+1258 163
+a Chicago
+1304 114
+a Dongguan
+1221 26
+a Philadelphia
+182 26
+a Suzhou
+396 159
+a Chengdu
+524 33
+a Ho Chi Minh City
+869 63
+a Kolkata
+656 1
+a Atlanta
+246 41
+a Chengdu
+626 182
+a Saint Petersburg
+1133 134
+a Suzhou
+348 13
+a Chicago
+1337 18
+a Philadelphia
+1224 23
+a Fukuoka
+68 193
+a Philadelphia
+793 20
+a Saint Petersburg
+229 197
+a Bogota
+818 86
+a Chengdu
+826 46
+a Bangkok
+575 16
+a Paris
+101 180
+a Fukuoka
+406 174
+a Ho Chi Minh City
+1114 108
+a Lahore
+1163 131
+a Ho Chi Minh City
+118 111
+a Foshan
+333 156
+a Kolkata
+287 0
+a Lahore
+1263 28
+a Bogota
+980 116
+a Bogota
+1392 84
+a Suzhou
+111 84
+a Hong Kong
+726 56
+a Kolkata
+663 118
+a Saint Petersburg
+1369 41
+a Atlanta
+1138 89
+a Qingdao
+406 78
+a Lima
+1019 194
+a Kolkata
+1242 80
+a Foshan
+810 6
+a Atlanta
+936 36
+a Manila
+933 147
+a Ho Chi Minh City
+612 31
+a Bangkok
+1383 70
+a Kolkata
+324 94
+a Atlanta
+1318 62
+a Fukuoka
+1136 56
+a Atlanta
+348 41
+a Moscow
+1335 129
+a Manila
+1222 33
+a Chengdu
+1374 183
+a Foshan
+313 20
+a Philadelphia
+1211 143
+a Dongguan
+40 104
+a Atlanta
+539 85
+a Chicago
+756 22
+a Suzhou
+20 113
+a Kolkata
+172 34
+a Moscow
+1306 15
+a Qingdao
+465 13
+a Moscow
+921 144
+a Saint Petersburg
+1264 189
+a Bangkok
+965 179
+a Pune
+21 100
+a Saint Petersburg
+1227 183
+a Lahore
+752 15
+a Chicago
+643 117
+a Suzhou
+18 66
+a Guangzhou
+110 16
+a Dongguan
+1279 94
+s Jakarta
+802
+s Foshan
+787
+s Nanjing
+1263
+s Manila
+941
+s Lima
+1060
+s Chengdu
+1120
+s Qingdao
+99
+s Philadelphia
+329
+s Nanjing
+1266
+s Manila
+1235
+s Qingdao
+96
+s Atlanta
+257
+s Kolkata
+666
+s Kolkata
+663
+s Chengdu
+636
+s Ho Chi Minh City
+1120
+s Bogota
+1394
+s Lahore
+1171
+s Paris
+108
+s Ho Chi Minh City
+1120
+s Foshan
+342
+s Qingdao
+417
+s Chennai
+315
+s Foshan
+1431
+s Guangzhou
+1224
+s Nanjing
+928
+s Ho Chi Minh City
+1125
+s Kolkata
+338
+s Dongguan
+1281
+s Moscow
+1314
+s Foshan
+343
+s Dongguan
+1221
+s Paris
+1110
+s Bangkok
+1178
+s Manila
+1229
+s Ho Chi Minh City
+121
+s Paris
+109
+s Manila
+614
+s Foshan
+789
+s Ho Chi Minh City
+120
+s Jakarta
+803
+s Chicago
+770
+s Kolkata
+660
+s Moscow
+1335
+s Saint Petersburg
+1147
+s Philadelphia
+192
+s Nanjing
+916
+s Dallas
+514
+s Ho Chi Minh City
+626
+s Philadelphia
+1225
+s Saint Petersburg
+1377
+s Suzhou
+402
+s Bogota
+993
+s Chennai
+1271
+s Chennai
+307
+s Paris
+106
+s Moscow
+1318
+s Nanjing
+1267
+s Bogota
+991
+s Atlanta
+1139
+s Suzhou
+34
+s Paris
+104
+s Chennai
+1272
+s Ho Chi Minh City
+623
+s Dongguan
+1287
+s Saint Petersburg
+1372
+s Atlanta
+1142
+s Foshan
+320
+s Chicago
+1338
+s Jakarta
+803
+s Foshan
+816
+s Ho Chi Minh City
+122
+s Atlanta
+549
+s Dongguan
+83
+s Saint Petersburg
+70
+s Chengdu
+1384
+s Philadelphia
+796
+s Ho Chi Minh City
+1123
+s Atlanta
+248
+s Atlanta
+1147
+s Suzhou
+115
+s Dongguan
+72
+s Qingdao
+410
+s Chicago
+766
+s Philadelphia
+1221
+s Lima
+1005
+s Atlanta
+1146
+s Lima
+1003
+s Ho Chi Minh City
+1117
+s Paris
+109
+s Atlanta
+1190
+s Moscow
+1388
+s Kolkata
+666
+s Dallas
+506
+s Chennai
+314
+s Pune
+925
+s Lahore
+1274
+s Nanjing
+927
+s Philadelphia
+799
+s Dallas
+505
+s Hong Kong
+727
+s Moscow
+925
+s Qingdao
+417
+s Philadelphia
+336
+s Bangkok
+1178
+s Moscow
+1347
+s Atlanta
+540
+s Guangzhou
+122
+s Atlanta
+1323
+s Philadelphia
+1224
+s Fukuoka
+1140
+s Chicago
+167
+s Bogota
+1401
+s Foshan
+813
+s Bogota
+1403
+s Qingdao
+465
+s Atlanta
+469
+s Pune
+1133
+s Qingdao
+93
+s Moscow
+1316
+s Dongguan
+49
+s Suzhou
+23
+s Qingdao
+468
+s Kolkata
+335
+s Atlanta
+542
+s Kolkata
+666
+s Lima
+996
+s Foshan
+1441
+s Philadelphia
+184
+s Qingdao
+104
+s Atlanta
+1406
+s Foshan
+335
+s Atlanta
+256
+s Suzhou
+28
+s Lima
+1025
+s Saint Petersburg
+1277
+s Bogota
+987
+s Bogota
+981
+s Ho Chi Minh City
+623
+s Kolkata
+337
+s Bogota
+1398
+s Atlanta
+1145
+s Bangkok
+973
+s Manila
+940
+s Atlanta
+351
+s Ho Chi Minh City
+622
+s Kolkata
+667
+s Paris
+104
+s Chennai
+1265
+s Ho Chi Minh City
+881
+s Foshan
+1427
+s Guangzhou
+1225
+s Kolkata
+1251
+s Manila
+941
+s Jakarta
+808
+s Hong Kong
+736
+s Foshan
+1438
+s Dongguan
+1289
+s Saint Petersburg
+1370
+s Hong Kong
+737
+s Dongguan
+75
+s Philadelphia
+340
+s Suzhou
+118
+s Qingdao
+414
+s Bogota
+823
+s Chengdu
+828
+s Foshan
+317
+s Suzhou
+27
+s Saint Petersburg
+1379
+s Ho Chi Minh City
+618
+s Lahore
+766
+s Chicago
+1304
+s Bangkok
+1179
+s Manila
+609
+s Chengdu
+630
+s Paris
+1108
+s Kolkata
+662
+s Hong Kong
+732
+s Pune
+932
+s Chennai
+1258
+s Paris
+95
+s Pune
+938
+s Chengdu
+635
+s Paris
+1118
+s Ho Chi Minh City
+612
+s Ho Chi Minh City
+1117
+s Ho Chi Minh City
+612
+s Kolkata
+667
+s Chennai
+1266
+s Foshan
+782
+s Philadelphia
+330
+s Manila
+1227
+s Lahore
+1170
+s Guangzhou
+114
+s Foshan
+788
+s Guangzhou
+122
+s Atlanta
+544
+s Paris
+1113
+s Pune
+938
+s Dallas
+502
+A Jinan
+a Dallas
+368 9
+r Lahore
+1163
+A Guadalajara
+s Kolkata
+335
+R Saint Petersburg
+a Chicago
+1209 107
+L
+r Fukuoka
+44
+u Nanjing
+916
+R Hong Kong
+u Guangzhou
+1211
+s Atlanta
+946
+A Rio de Janeiro
+u Bangkok
+575
+s Saint Petersburg
+240
+a Paris
+47 91
+u Kolkata
+656
+a Rio de Janeiro
+344 21
+a Dongguan
+822 109
+a Jakarta
+301 168
+L
+R Kolkata
+L
+u Fukuoka
+406
+A Chennai
+r Jakarta
+301
+A Delhi
+L
+u Philadelphia
+329
+L
+a Suzhou
+410 59
+u Atlanta
+1177
+L
+a Suzhou
+1324 112
+R Jakarta
+R Chicago
+a Manila
+433 124
+a Bangkok
+1360 44
+A Dar es Salaam
+r Saint Petersburg
+1227
+u Dongguan
+40
+a Paris
+53 137
+a Dongguan
+477 27
+a Chennai
+1271 197
+R Qingdao
+r Bangkok
+1383
+a Chennai
+149 23
+L
+r Saint Petersburg
+229
+a Chennai
+283 168
+s Lima
+1021
+a Fukuoka
+273 11
+A Mexico City
+a Delhi
+1276 157
+a Ho Chi Minh City
+729 61
+u Suzhou
+20
+r Guangzhou
+1410
+L
+u Bogota
+980
+a Chengdu
+276 132
+a Rio de Janeiro
+590 30
+r Chicago
+1337
+s Saint Petersburg
+1369
+u Qingdao
+91
+u Ho Chi Minh City
+612
+R Pune
+s Dongguan
+484
+u Nanjing
+1410
+u Chengdu
+1108
+a Chennai
+341 192
+R Dallas
+s Dongguan
+75
+L
+a Ho Chi Minh City
+184 26
+r Ho Chi Minh City
+612
+r Ho Chi Minh City
+1114
+a Philadelphia
+1294 136
+L
+r Nanjing
+1262
diff --git a/testSmall.txt b/testSmall.txt
new file mode 100644
index 0000000..f4ec80b
--- /dev/null
+++ b/testSmall.txt
@@ -0,0 +1,405 @@
+L
+A Barcelona
+A Surat
+A Hong Kong
+A Paris
+A Moscow
+A Chennai
+A Dalian
+A Dallas
+A Johannesburg
+A Santiago
+A Tehran
+A Country
+A Dalian
+A Madrid
+A Lima
+A Baghdad
+A London
+A Manila
+A Wuhan
+A Khartoum
+a Santiago
+1367 161
+a Hong Kong
+1264 40
+a Country
+689 165
+a Dalian
+1233 85
+a Surat
+852 188
+a Manila
+1204 151
+a Manila
+976 88
+a London
+52 159
+a London
+931 144
+a Baghdad
+971 50
+a Moscow
+391 42
+a Country
+404 93
+a Chennai
+277 87
+a Moscow
+877 194
+a Surat
+122 42
+a Baghdad
+1304 176
+a Baghdad
+291 159
+a Lima
+859 128
+a Manila
+1039 11
+a Wuhan
+1059 72
+a Dallas
+638 109
+a Lima
+1053 174
+a Dallas
+1344 172
+a Barcelona
+997 102
+a Moscow
+15 84
+a Moscow
+1256 57
+a Barcelona
+69 169
+a London
+848 77
+a Wuhan
+348 32
+a Surat
+146 190
+a Moscow
+374 85
+a Khartoum
+166 145
+a Manila
+1349 35
+a Country
+659 100
+a Dalian
+460 88
+a Dalian
+542 56
+a Paris
+298 48
+a Wuhan
+906 106
+a Chennai
+446 195
+a Khartoum
+755 86
+a Madrid
+255 162
+a Khartoum
+774 189
+a Manila
+753 82
+a Baghdad
+56 162
+a Dalian
+1259 196
+a Hong Kong
+97 2
+a Manila
+1084 43
+a Paris
+518 29
+a Moscow
+710 196
+a Tehran
+375 108
+a Chennai
+836 14
+a Santiago
+1186 103
+a Madrid
+815 186
+a Barcelona
+761 55
+a Paris
+1223 86
+a Hong Kong
+190 8
+a Manila
+1331 53
+a Country
+1277 0
+a Madrid
+269 7
+a Santiago
+94 189
+s Barcelona
+770
+s Wuhan
+1064
+s Santiago
+1375
+s Dalian
+1241
+s London
+851
+s Moscow
+718
+s London
+56
+s Hong Kong
+1273
+s Chennai
+841
+s Khartoum
+167
+s Surat
+853
+s Moscow
+1259
+s Baghdad
+984
+s Hong Kong
+102
+s Manila
+978
+s Madrid
+256
+s Barcelona
+1011
+s Dalian
+553
+s Dallas
+646
+s Wuhan
+354
+s London
+939
+s Barcelona
+769
+s Hong Kong
+1277
+s Santiago
+1187
+s Moscow
+393
+s Country
+661
+s Surat
+860
+s Manila
+1355
+s Country
+691
+s Moscow
+19
+s Country
+667
+s Manila
+977
+s Surat
+156
+s Barcelona
+1004
+s Dallas
+638
+s Moscow
+399
+s Dalian
+1264
+s Country
+1280
+s Wuhan
+907
+s Madrid
+828
+s Santiago
+1375
+s Paris
+311
+s Chennai
+456
+s Madrid
+825
+s Madrid
+823
+s Chennai
+460
+s London
+937
+s Baghdad
+1307
+s Wuhan
+349
+s Country
+691
+s Dalian
+550
+s Manila
+1353
+s Baghdad
+61
+s Moscow
+1256
+s Surat
+129
+s Khartoum
+172
+s Moscow
+882
+s Baghdad
+977
+s Surat
+134
+s Hong Kong
+1273
+s Country
+659
+s Khartoum
+777
+s Manila
+1040
+s Wuhan
+1059
+s Surat
+865
+s Country
+408
+s Baghdad
+973
+s Paris
+1226
+s Santiago
+100
+s Paris
+1227
+s London
+940
+s Moscow
+1269
+s Khartoum
+774
+s Barcelona
+69
+s Manila
+977
+s Wuhan
+354
+s London
+942
+s Barcelona
+763
+s Moscow
+18
+s Hong Kong
+204
+s Manila
+767
+s London
+56
+s Moscow
+386
+s Santiago
+108
+s Manila
+1339
+s Manila
+1040
+s Santiago
+1187
+s Country
+1288
+s Wuhan
+1062
+s Baghdad
+295
+s Madrid
+264
+s Chennai
+457
+s Surat
+866
+s Moscow
+378
+s Dalian
+1268
+s Manila
+1351
+s Dallas
+1354
+s Paris
+301
+s Manila
+976
+s Moscow
+398
+A Dongguan
+u Surat
+852
+R Barcelona
+A Osaka
+u Santiago
+1367
+s Dalian
+468
+r Baghdad
+56
+L
+a Madrid
+451 154
+A Country
+A Belo Horizonte
+r Baghdad
+291
+a Belo Horizonte
+1079 103
+L
+s Wuhan
+352
+r Baghdad
+1304
+r Surat
+146
+R Baghdad
+r Baghdad
+971
+s Manila
+989
+r Surat
+122
+u Dallas
+1344
+A Jakarta
+a Surat
+1137 83
+u Manila
+753
+s Lima
+865
+L
+s Dalian
+1241
+r Manila
+1204
+u Santiago
+1186
+A Dhaka
+L
+R Dongguan
+s Lima
+862
+s Moscow
+387
+L
+A London
+R Madrid
+a Jakarta
+261 84
+a Manila
+360 171
